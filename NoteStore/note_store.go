// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package NoteStore

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"

	"github.com/quekshuy/evernote-golang-sdk/Errors"
    "github.com/quekshuy/evernote-golang-sdk/Limits"
	"github.com/quekshuy/evernote-golang-sdk/Types"
	"github.com/quekshuy/evernote-golang-sdk/UserStore"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = UserStore.GoUnusedProtection__
var _ = Types.GoUnusedProtection__
var _ = Errors.GoUnusedProtection__
var _ = Limits.GoUnusedProtection__

type NoteStore interface {
	// Asks the NoteStore to provide information about the status of the user
	// account corresponding to the provided authentication token.
	//
	// Parameters:
	//  - AuthenticationToken
	GetSyncState(authenticationToken string) (r *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Asks the NoteStore to provide information about the status of the user
	// account corresponding to the provided authentication token.
	// This version of 'getSyncState' allows the client to upload coarse-
	// grained usage metrics to the service.
	//
	// @param clientMetrics  see the documentation of the ClientUsageMetrics
	//   structure for an explanation of the fields that clients can pass to
	//   the service.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - ClientMetrics
	GetSyncStateWithMetrics(authenticationToken string, clientMetrics *ClientUsageMetrics) (r *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// DEPRECATED - use getFilteredSyncChunk.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - AfterUSN
	//  - MaxEntries
	//  - FullSyncOnly
	GetSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Asks the NoteStore to provide the state of the account in order of
	// last modification.  This request retrieves one block of the server's
	// state so that a client can make several small requests against a large
	// account rather than getting the entire state in one big message.
	// This call gives fine-grained control of the data that will
	// be received by a client by omitting data elements that a client doesn't
	// need. This may reduce network traffic and sync times.
	//
	// @param afterUSN
	//   The client can pass this value to ask only for objects that
	//   have been updated after a certain point.  This allows the client to
	//   receive updates after its last checkpoint rather than doing a full
	//   synchronization on every pass.  The default value of "0" indicates
	//   that the client wants to get objects from the start of the account.
	//
	// @param maxEntries
	//   The maximum number of modified objects that should be
	//   returned in the result SyncChunk.  This can be used to limit the size
	//   of each individual message to be friendly for network transfer.
	//
	// @param filter
	//   The caller must set some of the flags in this structure to specify which
	//   data types should be returned during the synchronization.  See
	//   the SyncChunkFilter structure for information on each flag.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - AfterUSN
	//  - MaxEntries
	//  - Filter
	GetFilteredSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, filter *SyncChunkFilter) (r *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Asks the NoteStore to provide information about the status of a linked
	// notebook that has been shared with the caller, or that is public to the
	// world.
	// This will return a result that is similar to getSyncState, but may omit
	// SyncState.uploaded if the caller doesn't have permission to write to
	// the linked notebook.
	//
	// This function must be called on the shard that owns the referenced
	// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
	// same as LinkedNotebook.shardId.)
	//
	// @param authenticationToken
	//   This should be an authenticationToken for the guest who has received
	//   the invitation to the share.  (I.e. this should not be the result of
	//   NoteStore.authenticateToSharedNotebook)
	//
	// @param linkedNotebook
	//   This structure should contain identifying information and permissions
	//   to access the notebook in question.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	GetLinkedNotebookSyncState(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (r *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Asks the NoteStore to provide information about the contents of a linked
	// notebook that has been shared with the caller, or that is public to the
	// world.
	// This will return a result that is similar to getSyncChunk, but will only
	// contain entries that are visible to the caller.  I.e. only that particular
	// Notebook will be visible, along with its Notes, and Tags on those Notes.
	//
	// This function must be called on the shard that owns the referenced
	// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
	// same as LinkedNotebook.shardId.)
	//
	// @param authenticationToken
	//   This should be an authenticationToken for the guest who has received
	//   the invitation to the share.  (I.e. this should not be the result of
	//   NoteStore.authenticateToSharedNotebook)
	//
	// @param linkedNotebook
	//   This structure should contain identifying information and permissions
	//   to access the notebook in question.  This must contain the valid fields
	//   for either a shared notebook (e.g. shareKey)
	//   or a public notebook (e.g. username, uri)
	//
	// @param afterUSN
	//   The client can pass this value to ask only for objects that
	//   have been updated after a certain point.  This allows the client to
	//   receive updates after its last checkpoint rather than doing a full
	//   synchronization on every pass.  The default value of "0" indicates
	//   that the client wants to get objects from the start of the account.
	//
	// @param maxEntries
	//   The maximum number of modified objects that should be
	//   returned in the result SyncChunk.  This can be used to limit the size
	//   of each individual message to be friendly for network transfer.
	//   Applications should not request more than 256 objects at a time,
	//   and must handle the case where the service returns less than the
	//   requested number of objects in a given request even though more
	//   objects are available on the service.
	//
	// @param fullSyncOnly
	//   If true, then the client only wants initial data for a full sync.
	//   In this case, the service will not return any expunged objects,
	//   and will not return any Resources, since these are also provided
	//   in their corresponding Notes.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "LinkedNotebook" - if the provided information doesn't match any
	//     valid notebook
	//   </li>
	//   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
	//     valid notebook
	//   </li>
	//   <li> "SharedNotebook.id" - if the provided information indicates a
	//      shared notebook that no longer exists
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	//  - AfterUSN
	//  - MaxEntries
	//  - FullSyncOnly
	GetLinkedNotebookSyncChunk(authenticationToken string, linkedNotebook *Types.LinkedNotebook, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a list of all of the notebooks in the account.
	//
	// Parameters:
	//  - AuthenticationToken
	ListNotebooks(authenticationToken string) (r []*Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Returns the current state of the notebook with the provided GUID.
	// The notebook may be active or deleted (but not expunged).
	//
	// @param guid
	//   The GUID of the notebook to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetNotebook(authenticationToken string, guid Types.Guid) (r *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the notebook that should be used to store new notes in the
	// user's account when no other notebooks are specified.
	//
	// Parameters:
	//  - AuthenticationToken
	GetDefaultNotebook(authenticationToken string) (r *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Asks the service to make a notebook with the provided name.
	//
	// @param notebook
	//   The desired fields for the notebook must be provided on this
	//   object.  The name of the notebook must be set, and either the 'active'
	//   or 'defaultNotebook' fields may be set by the client at creation.
	//   If a notebook exists in the account with the same name (via
	//   case-insensitive compare), this will throw an EDAMUserException.
	//
	// @return
	//   The newly created Notebook.  The server-side GUID will be
	//   saved in this object's 'guid' field.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
	//   </li>
	//   <li> DATA_CONFLICT "Notebook.name" - name already in use
	//   </li>
	//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
	//   </li>
	//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
	//   </li>
	//   <li> LIMIT_REACHED "Notebook" - at max number of notebooks
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Notebook
	CreateNotebook(authenticationToken string, notebook *Types.Notebook) (r *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Submits notebook changes to the service.  The provided data must include
	// the notebook's guid field for identification.
	//
	// @param notebook
	//   The notebook object containing the requested changes.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
	//   </li>
	//   <li> DATA_CONFLICT "Notebook.name" - name already in use
	//   </li>
	//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
	//   </li>
	//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Notebook
	UpdateNotebook(authenticationToken string, notebook *Types.Notebook) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Permanently removes the notebook from the user's account.
	// After this action, the notebook is no longer available for undeletion, etc.
	// If the notebook contains any Notes, they will be moved to the current
	// default notebook and moved into the trash (i.e. Note.active=false).
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the notebook to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
	//   </li>
	//   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	ExpungeNotebook(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a list of the tags in the account.  Evernote does not support
	// the undeletion of tags, so this will only include active tags.
	//
	// Parameters:
	//  - AuthenticationToken
	ListTags(authenticationToken string) (r []*Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Returns a list of the tags that are applied to at least one note within
	// the provided notebook.  If the notebook is public, the authenticationToken
	// may be ignored.
	//
	// @param notebookGuid
	//    the GUID of the notebook to use to find tags
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - notebook not found by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NotebookGuid
	ListTagsByNotebook(authenticationToken string, notebookGuid Types.Guid) (r []*Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the current state of the Tag with the provided GUID.
	//
	// @param guid
	//   The GUID of the tag to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetTag(authenticationToken string, guid Types.Guid) (r *Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Asks the service to make a tag with a set of information.
	//
	// @param tag
	//   The desired list of fields for the tag are specified in this
	//   object.  The caller must specify the tag name, and may provide
	//   the parentGUID.
	//
	// @return
	//   The newly created Tag.  The server-side GUID will be
	//   saved in this object.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
	//   </li>
	//   <li> DATA_CONFLICT "Tag.name" - name already in use
	//   </li>
	//   <li> LIMIT_REACHED "Tag" - at max number of tags
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.parentGuid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Tag
	CreateTag(authenticationToken string, tag *Types.Tag) (r *Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Submits tag changes to the service.  The provided data must include
	// the tag's guid field for identification.  The service will apply
	// updates to the following tag fields:  name, parentGuid
	//
	// @param tag
	//   The tag object containing the requested changes.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
	//   </li>
	//   <li> DATA_CONFLICT "Tag.name" - name already in use
	//   </li>
	//   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	//   <li> "Tag.parentGuid" - parent not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Tag
	UpdateTag(authenticationToken string, tag *Types.Tag) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Removes the provided tag from every note that is currently tagged with
	// this tag.  If this operation is successful, the tag will still be in
	// the account, but it will not be tagged on any notes.
	//
	// This function is not indended for use by full synchronizing clients, since
	// it does not provide enough result information to the client to reconcile
	// the local state without performing a follow-up sync from the service.  This
	// is intended for "thin clients" that need to efficiently support this as
	// a UI operation.
	//
	// @param guid
	//   The GUID of the tag to remove from all notes.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	UntagAll(authenticationToken string, guid Types.Guid) (userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Permanently deletes the tag with the provided GUID, if present.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the tag to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	ExpungeTag(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a list of the searches in the account.  Evernote does not support
	// the undeletion of searches, so this will only include active searches.
	//
	// Parameters:
	//  - AuthenticationToken
	ListSearches(authenticationToken string) (r []*Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Returns the current state of the search with the provided GUID.
	//
	// @param guid
	//   The GUID of the search to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
	//   </li>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SavedSearch.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetSearch(authenticationToken string, guid Types.Guid) (r *Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Asks the service to make a saved search with a set of information.
	//
	// @param search
	//   The desired list of fields for the search are specified in this
	//   object. The caller must specify the name and query for the
	//   search, and may optionally specify a search scope.
	//   The SavedSearch.format field is ignored by the service.
	//
	// @return
	//   The newly created SavedSearch.  The server-side GUID will be
	//   saved in this object.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
	//   </li>
	//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
	//   </li>
	//   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Search
	CreateSearch(authenticationToken string, search *Types.SavedSearch) (r *Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Submits search changes to the service. The provided data must include
	// the search's guid field for identification. The service will apply
	// updates to the following search fields: name, query, and scope.
	//
	// @param search
	//   The search object containing the requested changes.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
	//   </li>
	//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
	//   </li>
	//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SavedSearch.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Search
	UpdateSearch(authenticationToken string, search *Types.SavedSearch) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Permanently deletes the saved search with the provided GUID, if present.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the search to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
	//   </li>
	//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SavedSearch.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	ExpungeSearch(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// DEPRECATED. Use findNotesMetadata.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - Offset
	//  - MaxNotes
	FindNotes(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32) (r *NoteList, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Finds the position of a note within a sorted subset of all of the user's
	// notes. This may be useful for thin clients that are displaying a paginated
	// listing of a large account, which need to know where a particular note
	// sits in the list without retrieving all notes first.
	//
	// @param authenticationToken
	//   Must be a valid token for the user's account unless the NoteFilter
	//   'notebookGuid' is the GUID of a public notebook.
	//
	// @param filter
	//   The list of criteria that will constrain the notes to be returned.
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @return
	//   If the note with the provided GUID is found within the matching note
	//   list, this will return the offset of that note within that list (where
	//   the first offset is 0).  If the note is not found within the set of
	//   notes, this will return -1.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - Guid
	FindNoteOffset(authenticationToken string, filter *NoteFilter, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Used to find the high-level information about a set of the notes from a
	// user's account based on various criteria specified via a NoteFilter object.
	// <p/>
	// Web applications that wish to periodically check for new content in a user's
	// Evernote account should consider using webhooks instead of polling this API.
	// See http://dev.evernote.com/documentation/cloud/chapters/polling_notification.php
	// for more information.
	//
	// @param authenticationToken
	//   Must be a valid token for the user's account unless the NoteFilter
	//   'notebookGuid' is the GUID of a public notebook.
	//
	// @param filter
	//   The list of criteria that will constrain the notes to be returned.
	//
	// @param offset
	//   The numeric index of the first note to show within the sorted
	//   results.  The numbering scheme starts with "0".  This can be used for
	//   pagination.
	//
	// @param maxNotes
	//   The mximum notes to return in this query.  The service will return a set
	//   of notes that is no larger than this number, but may return fewer notes
	//   if needed.  The NoteList.totalNotes field in the return value will
	//   indicate whether there are more values available after the returned set.
	//
	// @param resultSpec
	//   This specifies which information should be returned for each matching
	//   Note. The fields on this structure can be used to eliminate data that
	//   the client doesn't need, which will reduce the time and bandwidth
	//   to receive and process the reply.
	//
	// @return
	//   The list of notes that match the criteria.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - Offset
	//  - MaxNotes
	//  - ResultSpec
	FindNotesMetadata(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32, resultSpec *NotesMetadataResultSpec) (r *NotesMetadataList, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// This function is used to determine how many notes are found for each
	// notebook and tag in the user's account, given a current set of filter
	// parameters that determine the current selection.  This function will
	// return a structure that gives the note count for each notebook and tag
	// that has at least one note under the requested filter.  Any notebook or
	// tag that has zero notes in the filtered set will not be listed in the
	// reply to this function (so they can be assumed to be 0).
	//
	// @param authenticationToken
	//   Must be a valid token for the user's account unless the NoteFilter
	//   'notebookGuid' is the GUID of a public notebook.
	//
	// @param filter
	//   The note selection filter that is currently being applied.  The note
	//   counts are to be calculated with this filter applied to the total set
	//   of notes in the user's account.
	//
	// @param withTrash
	//   If true, then the NoteCollectionCounts.trashCount will be calculated
	//   and supplied in the reply. Otherwise, the trash value will be omitted.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - WithTrash
	FindNoteCounts(authenticationToken string, filter *NoteFilter, withTrash bool) (r *NoteCollectionCounts, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the current state of the note in the service with the provided
	// GUID.  The ENML contents of the note will only be provided if the
	// 'withContent' parameter is true.  The service will include the meta-data
	// for each resource in the note, but the binary contents of the resources
	// and their recognition data will be omitted.
	// If the Note is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).  The applicationData
	// fields are returned as keysOnly.
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @param withContent
	//   If true, the note will include the ENML contents of its
	//   'content' field.
	//
	// @param withResourcesData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'data' field's body.
	//
	// @param withResourcesRecognition
	//   If true, any Resource elements will include the binary contents of the
	//   'recognition' field's body if recognition data is present.
	//
	// @param withResourcesAlternateData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'alternateData' fields' body, if an alternate form
	//   is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - WithContent
	//  - WithResourcesData
	//  - WithResourcesRecognition
	//  - WithResourcesAlternateData
	GetNote(authenticationToken string, guid Types.Guid, withContent bool, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Get all of the application data for the note identified by GUID,
	// with values returned within the LazyMap fullMap field.
	// If there are no applicationData entries, then a LazyMap
	// with an empty fullMap will be returned. If your application
	// only needs to fetch its own applicationData entry, use
	// getNoteApplicationDataEntry instead.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetNoteApplicationData(authenticationToken string, guid Types.Guid) (r *Types.LazyMap, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Get the value of a single entry in the applicationData map
	// for the note identified by GUID.
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - note not found, by GUID</li>
	//   <li> "NoteAttributes.applicationData.key" - note not found, by key</li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - Key
	GetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Update, or create, an entry in the applicationData map for
	// the note identified by guid.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - Key
	//  - Value
	SetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string, value string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Remove an entry identified by 'key' from the applicationData map for
	// the note identified by 'guid'. Silently ignores an unset of a
	// non-existing key.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - Key
	UnsetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns XHTML contents of the note with the provided GUID.
	// If the Note is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetNoteContent(authenticationToken string, guid Types.Guid) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a block of the extracted plain text contents of the note with the
	// provided GUID.  This text can be indexed for search purposes by a light
	// client that doesn't have capabilities to extract all of the searchable
	// text content from the note and its resources.
	//
	// If the Note is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @param noteOnly
	//   If true, this will only return the text extracted from the ENML contents
	//   of the note itself.  If false, this will also include the extracted text
	//   from any text-bearing resources (PDF, recognized images)
	//
	// @param tokenizeForIndexing
	//   If true, this will break the text into cleanly separated and sanitized
	//   tokens.  If false, this will return the more raw text extraction, with
	//   its original punctuation, capitalization, spacing, etc.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - NoteOnly
	//  - TokenizeForIndexing
	GetNoteSearchText(authenticationToken string, guid Types.Guid, noteOnly bool, tokenizeForIndexing bool) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a block of the extracted plain text contents of the resource with
	// the provided GUID.  This text can be indexed for search purposes by a light
	// client that doesn't have capability to extract all of the searchable
	// text content from a resource.
	//
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetResourceSearchText(authenticationToken string, guid Types.Guid) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a list of the names of the tags for the note with the provided
	// guid.  This can be used with authentication to get the tags for a
	// user's own note, or can be used without valid authentication to retrieve
	// the names of the tags for a note in a public notebook.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetNoteTagNames(authenticationToken string, guid Types.Guid) (r []string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Asks the service to make a note with the provided set of information.
	//
	// @param note
	//   A Note object containing the desired fields to be populated on
	//   the service.
	//
	// @return
	//   The newly created Note from the service.  The server-side
	//   GUIDs for the Note and any Resources will be saved in this object.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
	//   </li>
	//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
	//   </li>
	//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
	//   </li>
	//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
	//   </li>
	//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
	//   </li>
	//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
	//   </li>
	//   <li> LIMIT_REACHED "Note" - at max number per account
	//   </li>
	//   <li> LIMIT_REACHED "Note.size" - total note size too large
	//   </li>
	//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
	//   </li>
	//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
	//   </li>
	//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
	//   </li>
	//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
	//   </li>
	//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
	//   </li>
	//   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
	//   </li>
	//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
	//     of the specified tags had an invalid length or pattern
	//   </li>
	//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
	//     new tags would exceed the maximum number per account
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.notebookGuid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Note
	CreateNote(authenticationToken string, note *Types.Note) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Submit a set of changes to a note to the service.  The provided data
	// must include the note's guid field for identification. The note's
	// title must also be set.
	//
	// @param note
	//   A Note object containing the desired fields to be populated on
	//   the service. With the exception of the note's title and guid, fields
	//   that are not being changed do not need to be set. If the content is not
	//   being modified, note.content should be left unset. If the list of
	//   resources is not being modified, note.resources should be left unset.
	//
	// @return
	//   The metadata (no contents) for the Note on the server after the update
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
	//   </li>
	//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
	//   </li>
	//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
	//   </li>
	//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
	//   </li>
	//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
	//   </li>
	//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
	//   </li>
	//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
	//   </li>
	//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
	//   </li>
	//   <li> LIMIT_REACHED "Note.size" - total note size too large
	//   </li>
	//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
	//   </li>
	//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
	//   </li>
	//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	//   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
	//   </li>
	//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
	//     of the specified tags had an invalid length or pattern
	//   </li>
	//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
	//     new tags would exceed the maximum number per account
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - note not found, by GUID
	//   </li>
	//   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Note
	UpdateNote(authenticationToken string, note *Types.Note) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Moves the note into the trash. The note may still be undeleted, unless it
	// is expunged.  This is equivalent to calling updateNote() after setting
	// Note.active = false
	//
	// @param guid
	//   The GUID of the note to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
	//          update the note.
	//   </li>
	// </ul>
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_CONFLICT "Note.guid" - the note is already deleted
	//   </li>
	// </ul>
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	DeleteNote(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Permanently removes a Note, and all of its Resources,
	// from the service.
	// <p/>
	// NOTE: This function is not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the note to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	ExpungeNote(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Permanently removes a list of Notes, and all of their Resources, from
	// the service.  This should be invoked with a small number of Note GUIDs
	// (e.g. 100 or less) on each call.  To expunge a larger number of notes,
	// call this method multiple times.  This should also be used to reduce the
	// number of Notes in a notebook before calling expungeNotebook() or
	// in the trash before calling expungeInactiveNotes(), since these calls may
	// be prohibitively slow if there are more than a few hundred notes.
	// If an exception is thrown for any of the GUIDs, then none of the notes
	// will be deleted.  I.e. this call can be treated as an atomic transaction.
	// <p/>
	// NOTE: This function is not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param noteGuids
	//   The list of GUIDs for the Notes to remove.
	//
	// @return
	//   The account's updateCount at the end of this operation
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuids
	ExpungeNotes(authenticationToken string, noteGuids []Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Permanently removes all of the Notes that are currently marked as
	// inactive.  This is equivalent to "emptying the trash", and these Notes
	// will be gone permanently.
	// <p/>
	// This operation may be relatively slow if the account contains a large
	// number of inactive Notes.
	// <p/>
	// NOTE: This function is not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @return
	//    The number of notes that were expunged.
	//
	// Parameters:
	//  - AuthenticationToken
	ExpungeInactiveNotes(authenticationToken string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error)
	// Performs a deep copy of the Note with the provided GUID 'noteGuid' into
	// the Notebook with the provided GUID 'toNotebookGuid'.
	// The caller must be the owner of both the Note and the Notebook.
	// This creates a new Note in the destination Notebook with new content and
	// Resources that match all of the content and Resources from the original
	// Note, but with new GUID identifiers.
	// The original Note is not modified by this operation.
	// The copied note is considered as an "upload" for the purpose of upload
	// transfer limit calculation, so its size is added to the upload count for
	// the owner.
	//
	// @param noteGuid
	//   The GUID of the Note to copy.
	//
	// @param toNotebookGuid
	//   The GUID of the Notebook that should receive the new Note.
	//
	// @return
	//   The metadata for the new Note that was created.  This will include the
	//   new GUID for this Note (and any copied Resources), but will not include
	//   the content body or the binary bodies of any Resources.
	//
	// @throws EDAMUserException <ul>
	//   <li> LIMIT_REACHED "Note" - at max number per account
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	//  - ToNotebookGuid
	CopyNote(authenticationToken string, noteGuid Types.Guid, toNotebookGuid Types.Guid) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns a list of the prior versions of a particular note that are
	// saved within the service.  These prior versions are stored to provide a
	// recovery from unintentional removal of content from a note. The identifiers
	// that are returned by this call can be used with getNoteVersion to retrieve
	// the previous note.
	// The identifiers will be listed from the most recent versions to the oldest.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	ListNoteVersions(authenticationToken string, noteGuid Types.Guid) (r []*NoteVersionId, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// This can be used to retrieve a previous version of a Note after it has been
	// updated within the service.  The caller must identify the note (via its
	// guid) and the version (via the updateSequenceNumber of that version).
	// to find a listing of the stored version USNs for a note, call
	// listNoteVersions.
	// This call is only available for notes in Premium accounts.  (I.e. access
	// to past versions of Notes is a Premium-only feature.)
	//
	// @param noteGuid
	//   The GUID of the note to be retrieved.
	//
	// @param updateSequenceNum
	//   The USN of the version of the note that is being retrieved
	//
	// @param withResourcesData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'data' field's body.
	//
	// @param withResourcesRecognition
	//   If true, any Resource elements will include the binary contents of the
	//   'recognition' field's body if recognition data is present.
	//
	// @param withResourcesAlternateData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'alternateData' fields' body, if an alternate form
	//   is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	//   <li> PERMISSION_DENIED "updateSequenceNum" -
	//     The account isn't permitted to access previous versions of notes.
	//     (i.e. this is a Free account.)
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	//   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
	//      the corresponding USN.
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	//  - UpdateSequenceNum
	//  - WithResourcesData
	//  - WithResourcesRecognition
	//  - WithResourcesAlternateData
	GetNoteVersion(authenticationToken string, noteGuid Types.Guid, updateSequenceNum int32, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the current state of the resource in the service with the
	// provided GUID.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).  Only the
	// keys for the applicationData will be returned.
	//
	// @param guid
	//   The GUID of the resource to be retrieved.
	//
	// @param withData
	//   If true, the Resource will include the binary contents of the
	//   'data' field's body.
	//
	// @param withRecognition
	//   If true, the Resource will include the binary contents of the
	//   'recognition' field's body if recognition data is present.
	//
	// @param withAttributes
	//   If true, the Resource will include the attributes
	//
	// @param withAlternateData
	//   If true, the Resource will include the binary contents of the
	//   'alternateData' field's body, if an alternate form is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - WithData
	//  - WithRecognition
	//  - WithAttributes
	//  - WithAlternateData
	GetResource(authenticationToken string, guid Types.Guid, withData bool, withRecognition bool, withAttributes bool, withAlternateData bool) (r *Types.Resource, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Get all of the application data for the Resource identified by GUID,
	// with values returned within the LazyMap fullMap field.
	// If there are no applicationData entries, then a LazyMap
	// with an empty fullMap will be returned. If your application
	// only needs to fetch its own applicationData entry, use
	// getResourceApplicationDataEntry instead.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetResourceApplicationData(authenticationToken string, guid Types.Guid) (r *Types.LazyMap, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Get the value of a single entry in the applicationData map
	// for the Resource identified by GUID.
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - Resource not found, by GUID</li>
	//   <li> "ResourceAttributes.applicationData.key" - Resource not found, by key</li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - Key
	GetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Update, or create, an entry in the applicationData map for
	// the Resource identified by guid.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - Key
	//  - Value
	SetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string, value string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Remove an entry identified by 'key' from the applicationData map for
	// the Resource identified by 'guid'.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	//  - Key
	UnsetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Submit a set of changes to a resource to the service.  This can be used
	// to update the meta-data about the resource, but cannot be used to change
	// the binary contents of the resource (including the length and hash).  These
	// cannot be changed directly without creating a new resource and removing the
	// old one via updateNote.
	//
	// @param resource
	//   A Resource object containing the desired fields to be populated on
	//   the service.  The service will attempt to update the resource with the
	//   following fields from the client:
	//   <ul>
	//      <li>guid:  must be provided to identify the resource
	//      </li>
	//      <li>mime
	//      </li>
	//      <li>width
	//      </li>
	//      <li>height
	//      </li>
	//      <li>duration
	//      </li>
	//      <li>attributes:  optional.  if present, the set of attributes will
	//           be replaced.
	//      </li>
	//   </ul>
	//
	// @return
	//   The Update Sequence Number of the resource after the changes have been
	//   applied.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
	//   </li>
	//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
	//   </li>
	//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Resource
	UpdateResource(authenticationToken string, resource *Types.Resource) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns binary data of the resource with the provided GUID.  For
	// example, if this were an image resource, this would contain the
	// raw bits of the image.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetResourceData(authenticationToken string, guid Types.Guid) (r []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the current state of a resource, referenced by containing
	// note GUID and resource content hash.
	//
	// @param noteGuid
	//   The GUID of the note that holds the resource to be retrieved.
	//
	// @param contentHash
	//   The MD5 checksum of the resource within that note. Note that
	//   this is the binary checksum, for example from Resource.data.bodyHash,
	//   and not the hex-encoded checksum that is used within an en-media
	//   tag in a note body.
	//
	// @param withData
	//   If true, the Resource will include the binary contents of the
	//   'data' field's body.
	//
	// @param withRecognition
	//   If true, the Resource will include the binary contents of the
	//   'recognition' field's body.
	//
	// @param withAlternateData
	//   If true, the Resource will include the binary contents of the
	//   'alternateData' field's body, if an alternate form is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
	//   </li>
	//   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note" - not found, by guid
	//   </li>
	//   <li> "Resource" - not found, by hash
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	//  - ContentHash
	//  - WithData
	//  - WithRecognition
	//  - WithAlternateData
	GetResourceByHash(authenticationToken string, noteGuid Types.Guid, contentHash []byte, withData bool, withRecognition bool, withAlternateData bool) (r *Types.Resource, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the binary contents of the recognition index for the resource
	// with the provided GUID.  If the caller asks about a resource that has
	// no recognition data, this will throw EDAMNotFoundException.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource whose recognition data should be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	//   <li> "Resource.recognition" - resource has no recognition
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetResourceRecognition(authenticationToken string, guid Types.Guid) (r []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// If the Resource with the provided GUID has an alternate data representation
	// (indicated via the Resource.alternateData field), then this request can
	// be used to retrieve the binary contents of that alternate data file.
	// If the caller asks about a resource that has no alternate data form, this
	// will throw EDAMNotFoundException.
	//
	// @param guid
	//    The GUID of the resource whose recognition data should be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	//   <li> "Resource.alternateData" - resource has no recognition
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetResourceAlternateData(authenticationToken string, guid Types.Guid) (r []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Returns the set of attributes for the Resource with the provided GUID.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource whose attributes should be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	GetResourceAttributes(authenticationToken string, guid Types.Guid) (r *Types.ResourceAttributes, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// <p>
	// Looks for a user account with the provided userId on this NoteStore
	// shard and determines whether that account contains a public notebook
	// with the given URI.  If the account is not found, or no public notebook
	// exists with this URI, this will throw an EDAMNotFoundException,
	// otherwise this will return the information for that Notebook.
	// </p>
	// <p>
	// If a notebook is visible on the web with a full URL like
	// http://www.evernote.com/pub/sethdemo/api
	// Then 'sethdemo' is the username that can be used to look up the userId,
	// and 'api' is the publicUri.
	// </p>
	//
	// @param userId
	//    The numeric identifier for the user who owns the public notebook.
	//    To find this value based on a username string, you can invoke
	//    UserStore.getPublicUserInfo
	//
	// @param publicUri
	//    The uri string for the public notebook, from Notebook.publishing.uri.
	//
	// @throws EDAMNotFoundException <ul>
	//   <li>"Publishing.uri" - not found, by URI</li>
	// </ul>
	//
	// @throws EDAMSystemException <ul>
	//   <li> TAKEN_DOWN "PublicNotebook" - The specified public notebook is
	//     taken down (for all requesters).</li>
	//   <li> TAKEN_DOWN "Country" - The specified public notebook is taken
	//     down for the requester because of an IP-based country lookup.</li>
	// </ul>
	//
	// Parameters:
	//  - UserId
	//  - PublicUri
	GetPublicNotebook(userId Types.UserID, publicUri string) (r *Types.Notebook, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
	// Used to construct a shared notebook object. The constructed notebook will
	// contain a "share key" which serve as a unique identifer and access token
	// for a user to access the notebook of the shared notebook owner.
	//
	// @param sharedNotebook
	//   A shared notebook object populated with the email address of the share
	//   recipient, the notebook guid and the access permissions. All other
	//   attributes of the shared object are ignored. The SharedNotebook.allowPreview
	//   field must be explicitly set with either a true or false value.
	//
	// @return
	//   The fully populated SharedNotebook object including the server assigned
	//   share id and shareKey which can both be used to uniquely identify the
	//   SharedNotebook.
	//
	// @throws EDAMUserException <ul>
	//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid</li>
	//   <li>BAD_DATA_FORMAT "requireLogin" - if the SharedNotebook.allowPreview field was
	//       not set, and the SharedNotebook.requireLogin was also not set or was set to
	//       false.</li>
	//   <li>PERMISSION_DENIED "SharedNotebook.recipientSettings" - if
	//       recipientSettings is set in the sharedNotebook.  Only the recipient
	//       can set these values via the setSharedNotebookRecipientSettings
	//       method.
	//   </li>
	//   </ul>
	// @throws EDAMNotFoundException <ul>
	//   <li>Notebook.guid - if the notebookGuid is not a valid GUID for the user.
	//   </li>
	//   </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebook
	CreateSharedNotebook(authenticationToken string, sharedNotebook *Types.SharedNotebook) (r *Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Update a SharedNotebook object.
	//
	// @param authenticationToken
	//   Must be an authentication token from the owner or a shared notebook
	//   authentication token or business authentication token with sufficient
	//   permissions to change invitations for a notebook.
	//
	// @param sharedNotebook
	//  The SharedNotebook object containing the requested changes.
	//  The "id" of the shared notebook must be set to allow the service
	//  to identify the SharedNotebook to be updated. In addition, you MUST set
	//  the email, permission, and allowPreview fields to the desired values.
	//  All other fields will be ignored if set.
	//
	// @return
	//  The Update Serial Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li>UNSUPPORTED_OPERATION "updateSharedNotebook" - if this service instance does not support shared notebooks.</li>
	//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid.</li>
	//   <li>DATA_REQUIRED "SharedNotebook.id" - if the id field was not set.</li>
	//   <li>DATA_REQUIRED "SharedNotebook.privilege" - if the privilege field was not set.</li>
	//   <li>DATA_REQUIRED "SharedNotebook.allowPreview" - if the allowPreview field was not set.</li>
	//   </ul>
	// @throws EDAMNotFoundException <ul>
	//   <li>SharedNotebook.id - if no shared notebook with the specified ID was found.
	//   </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebook
	UpdateSharedNotebook(authenticationToken string, sharedNotebook *Types.SharedNotebook) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Set values for the recipient settings associated with a shared notebook.  Having
	// update rights to the shared notebook record itself has no effect on this call;
	// only the recipient of the shared notebook can can the recipient settings.
	//
	// If you do <i>not</i> wish to, or cannot, change one of the reminderNotifyEmail or
	// reminderNotifyInApp fields, you must leave that field unset in recipientSettings.
	// This method will skip that field for updates and leave the existing state as
	// it is.
	//
	// @return The update sequence number of the account to which the shared notebook
	//   belongs, which is the account from which we are sharing a notebook.
	//
	// @throws EDAMNotFoundException "sharedNotebookId" - Thrown if the service does not
	//   have a shared notebook record for the sharedNotebookId on the given shard.  If you
	//   receive this exception, it is probable that the shared notebook record has
	//   been revoked or expired, or that you accessed the wrong shard.
	//
	// @throws EDAMUserException <ul>
	//   <li>PEMISSION_DENIED "authenticationToken" - If you do not have permission to set
	//       the recipient settings for the shared notebook.  Only the recipient has
	//       permission to do this.
	//   <li>DATA_CONFLICT "recipientSettings.reminderNotifyEmail" - Setting whether
	//       or not you want to receive reminder e-mail notifications is possible on
	//       a business notebook in the business to which the user belongs.  All
	//       others can safely unset the reminderNotifyEmail field from the
	//       recipientSettings parameter.
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebookId
	//  - RecipientSettings
	SetSharedNotebookRecipientSettings(authenticationToken string, sharedNotebookId int64, recipientSettings *Types.SharedNotebookRecipientSettings) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Send a reminder message to some or all of the email addresses that a notebook has been
	// shared with. The message includes the current link to view the notebook.
	// @param authenticationToken
	//   The auth token of the user with permissions to share the notebook
	// @param notebookGuid
	//   The guid of the shared notebook
	// @param messageText
	//  User provided text to include in the email
	// @param recipients
	//  The email addresses of the recipients. If this list is empty then all of the
	//  users that the notebook has been shared with are emailed.
	//  If an email address doesn't correspond to share invite members then that address
	//  is ignored.
	// @return
	//  The number of messages sent
	// @throws EDAMUserException <ul>
	//   <li> LIMIT_REACHED "(recipients)" -
	//     The email can't be sent because this would exceed the user's daily
	//     email limit.
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook.guid" - The user doesn't have permission to
	//     send a message for the specified notebook.
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NotebookGuid
	//  - MessageText
	//  - Recipients
	SendMessageToSharedNotebookMembers(authenticationToken string, notebookGuid Types.Guid, messageText string, recipients []string) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Lists the collection of shared notebooks for all notebooks in the
	// users account.
	//
	// @return
	//  The list of all SharedNotebooks for the user
	//
	// Parameters:
	//  - AuthenticationToken
	ListSharedNotebooks(authenticationToken string) (r []*Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Expunges the SharedNotebooks in the user's account using the
	// SharedNotebook.id as the identifier.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param
	//   sharedNotebookIds - a list of ShardNotebook.id longs identifying the
	//       objects to delete permanently.
	//
	// @return
	//   The account's update sequence number.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebookIds
	ExpungeSharedNotebooks(authenticationToken string, sharedNotebookIds []int64) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Asks the service to make a linked notebook with the provided name, username
	// of the owner and identifiers provided. A linked notebook can be either a
	// link to a public notebook or to a private shared notebook.
	//
	// @param linkedNotebook
	//   The desired fields for the linked notebook must be provided on this
	//   object.  The name of the linked notebook must be set. Either a username
	//   uri or a shard id and share key must be provided otherwise a
	//   EDAMUserException is thrown.
	//
	// @return
	//   The newly created LinkedNotebook.  The server-side id will be
	//   saved in this object's 'id' field.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
	//   </li>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
	//     if public notebook set but bad uri
	//   </li>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.shareKey" -
	//     if private notebook set but bad shareKey
	//   </li>
	//   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
	//     if private notebook but shard id not provided
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	CreateLinkedNotebook(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (r *Types.LinkedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// @param linkedNotebook
	//   Updates the name of a linked notebook.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	UpdateLinkedNotebook(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Returns a list of linked notebooks
	//
	// Parameters:
	//  - AuthenticationToken
	ListLinkedNotebooks(authenticationToken string) (r []*Types.LinkedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Permanently expunges the linked notebook from the account.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
	//   from the account.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	ExpungeLinkedNotebook(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Asks the service to produce an authentication token that can be used to
	// access the contents of a shared notebook from someone else's account.
	// This authenticationToken can be used with the various other NoteStore
	// calls to find and retrieve notes, and if the permissions in the shared
	// notebook are sufficient, to make changes to the contents of the notebook.
	//
	// @param shareKey
	//   The 'shareKey' identifier from the SharedNotebook that was granted to
	//   some recipient.  This string internally encodes the notebook identifier
	//   and a security signature.
	//
	// @param authenticationToken
	//   If a non-empty string is provided, this is the full user-based
	//   authentication token that identifies the user who is currently logged in
	//   and trying to access the shared notebook.  This may be required if the
	//   notebook was created with 'requireLogin'.
	//   If this string is empty, the service will attempt to authenticate to the
	//   shared notebook without any logged in user.
	//
	// @throws EDAMSystemException <ul>
	//   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string
	//   </li>
	//   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SharedNotebook.id" - the shared notebook no longer exists
	//   </li>
	// </ul>
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
	//          no valid authentication token was provided.
	//   </li>
	//   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
	//          and another username has already been bound to this notebook.
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - ShareKey
	//  - AuthenticationToken
	AuthenticateToSharedNotebook(shareKey string, authenticationToken string) (r *UserStore.AuthenticationResult, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// This function is used to retrieve extended information about a shared
	// notebook by a guest who has already authenticated to access that notebook.
	// This requires an 'authenticationToken' parameter which should be the
	// resut of a call to authenticateToSharedNotebook(...).
	// I.e. this is the token that gives access to the particular shared notebook
	// in someone else's account -- it's not the authenticationToken for the
	// owner of the notebook itself.
	//
	// @param authenticationToken
	//   Should be the authentication token retrieved from the reply of
	//   authenticateToSharedNotebook(), proving access to a particular shared
	//   notebook.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "authenticationToken" -
	//          authentication token doesn't correspond to a valid shared notebook
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SharedNotebook.id" - the shared notebook no longer exists
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	GetSharedNotebookByAuth(authenticationToken string) (r *Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Attempts to send a single note to one or more email recipients.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param authenticationToken
	//    The note will be sent as the user logged in via this token, using that
	//    user's registered email address.  If the authenticated user doesn't
	//    have permission to read that note, the emailing will fail.
	//
	// @param parameters
	//    The note must be specified either by GUID (in which case it will be
	//    sent using the existing data in the service), or else the full Note
	//    must be passed to this call.  This also specifies the additional
	//    email fields that will be used in the email.
	//
	// @throws EDAMUserException <ul>
	//   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
	//     The email can't be sent because this would exceed the user's daily
	//     email limit.
	//   </li>
	//   <li> BAD_DATA_FORMAT "(email address)" -
	//     email address malformed
	//   </li>
	//   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
	//     if there are no To: or Cc: addresses provided.
	//   </li>
	//   <li> DATA_REQUIRED "Note.title" -
	//     if the caller provides a Note parameter with no title
	//   </li>
	//   <li> DATA_REQUIRED "Note.content" -
	//     if the caller provides a Note parameter with no content
	//   </li>
	//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
	//   </li>
	//   <li> DATA_REQUIRED "NoteEmailParameters.note" -
	//     if no guid or note provided
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Parameters
	EmailNote(authenticationToken string, parameters *NoteEmailParameters) (userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// If this note is not already shared (via its own direct URL), then this
	// will start sharing that note.
	// This will return the secret "Note Key" for this note that
	// can currently be used in conjunction with the Note's GUID to gain direct
	// read-only access to the Note.
	// If the note is already shared, then this won't make any changes to the
	// note, and the existing "Note Key" will be returned.  The only way to change
	// the Note Key for an existing note is to stopSharingNote first, and then
	// call this function.
	//
	// @param guid
	//   The GUID of the note to be shared.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	ShareNote(authenticationToken string, guid Types.Guid) (r string, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// If this note is not already shared then this will stop sharing that note
	// and invalidate its "Note Key", so any existing URLs to access that Note
	// will stop working.
	// If the Note is not shared, then this function will do nothing.
	//
	// @param guid
	//   The GUID of the note to be un-shared.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Guid
	StopSharingNote(authenticationToken string, guid Types.Guid) (userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Asks the service to produce an authentication token that can be used to
	// access the contents of a single Note which was individually shared
	// from someone's account.
	// This authenticationToken can be used with the various other NoteStore
	// calls to find and retrieve the Note and its directly-referenced children.
	//
	// @param guid
	//   The GUID identifying this Note on this shard.
	//
	// @param noteKey
	//   The 'noteKey' identifier from the Note that was originally created via
	//   a call to shareNote() and then given to a recipient to access.
	//
	// @param authenticationToken
	//   An optional authenticationToken that identifies the user accessing the
	//   shared note. This parameter may be required to access some shared notes.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
	//     shared, or the noteKey doesn't match the current key for this note
	//   </li>
	//   <li> PERMISSION_DENIED "authenticationToken" - an authentication token is
	//     required to access this Note, but either no authentication token or a
	//     "non-owner" authentication token was provided.
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "guid" - the note with that GUID is not found
	//   </li>
	// </ul>
	//
	// @throws EDAMSystemException <ul>
	//   <li> TAKEN_DOWN "Note" - The specified shared note is taken down (for
	//     all requesters).
	//   </li>
	//   <li> TAKEN_DOWN "Country" - The specified shared note is taken down
	//     for the requester because of an IP-based country lookup.
	//   </ul>
	// </ul>
	//
	// Parameters:
	//  - Guid
	//  - NoteKey
	//  - AuthenticationToken
	AuthenticateToSharedNote(guid string, noteKey string, authenticationToken string) (r *UserStore.AuthenticationResult, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error)
	// Identify related entities on the service, such as notes,
	// notebooks, and tags related to notes or content.
	//
	// @param query
	//   The information about which we are finding related entities.
	//
	// @param resultSpec
	//   Allows the client to indicate the type and quantity of
	//   information to be returned, allowing a saving of time and
	//   bandwidth.
	//
	// @return
	//   The result of the query, with information considered
	//   to likely be relevantly related to the information
	//   described by the query.
	//
	// @throws EDAMUserException <ul>
	//   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
	//     a zero-length plain text value.
	//   </li>
	//   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
	//     invalid Note GUID, that is, one that does not match the constraints
	//     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	//   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
	//     the note identified by RelatedQuery.noteGuid.
	//   </li>
	//   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
	//     in the result spec.
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
	//     found, if that field has been set in the query.
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Query
	//  - ResultSpec
	FindRelated(authenticationToken string, query *RelatedQuery, resultSpec *RelatedResultSpec) (r *RelatedResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error)
}

type NoteStoreClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewNoteStoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *NoteStoreClient {
	return &NoteStoreClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewNoteStoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *NoteStoreClient {
	return &NoteStoreClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Asks the NoteStore to provide information about the status of the user
// account corresponding to the provided authentication token.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) GetSyncState(authenticationToken string) (r *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetSyncState(authenticationToken); err != nil {
		return
	}
	return p.recvGetSyncState()
}

func (p *NoteStoreClient) sendGetSyncState(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSyncState", thrift.CALL, p.SeqId)
	args29 := NewGetSyncStateArgs()
	args29.AuthenticationToken = authenticationToken
	err = args29.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetSyncState() (value *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result30 := NewGetSyncStateResult()
	err = result30.Read(iprot)
	iprot.ReadMessageEnd()
	value = result30.Success
	if result30.UserException != nil {
		userException = result30.UserException
	}
	if result30.SystemException != nil {
		systemException = result30.SystemException
	}
	return
}

// Asks the NoteStore to provide information about the status of the user
// account corresponding to the provided authentication token.
// This version of 'getSyncState' allows the client to upload coarse-
// grained usage metrics to the service.
//
// @param clientMetrics  see the documentation of the ClientUsageMetrics
//   structure for an explanation of the fields that clients can pass to
//   the service.
//
// Parameters:
//  - AuthenticationToken
//  - ClientMetrics
func (p *NoteStoreClient) GetSyncStateWithMetrics(authenticationToken string, clientMetrics *ClientUsageMetrics) (r *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetSyncStateWithMetrics(authenticationToken, clientMetrics); err != nil {
		return
	}
	return p.recvGetSyncStateWithMetrics()
}

func (p *NoteStoreClient) sendGetSyncStateWithMetrics(authenticationToken string, clientMetrics *ClientUsageMetrics) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.CALL, p.SeqId)
	args33 := NewGetSyncStateWithMetricsArgs()
	args33.AuthenticationToken = authenticationToken
	args33.ClientMetrics = clientMetrics
	err = args33.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetSyncStateWithMetrics() (value *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result34 := NewGetSyncStateWithMetricsResult()
	err = result34.Read(iprot)
	iprot.ReadMessageEnd()
	value = result34.Success
	if result34.UserException != nil {
		userException = result34.UserException
	}
	if result34.SystemException != nil {
		systemException = result34.SystemException
	}
	return
}

// DEPRECATED - use getFilteredSyncChunk.
//
// Parameters:
//  - AuthenticationToken
//  - AfterUSN
//  - MaxEntries
//  - FullSyncOnly
func (p *NoteStoreClient) GetSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly); err != nil {
		return
	}
	return p.recvGetSyncChunk()
}

func (p *NoteStoreClient) sendGetSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, fullSyncOnly bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSyncChunk", thrift.CALL, p.SeqId)
	args37 := NewGetSyncChunkArgs()
	args37.AuthenticationToken = authenticationToken
	args37.AfterUSN = afterUSN
	args37.MaxEntries = maxEntries
	args37.FullSyncOnly = fullSyncOnly
	err = args37.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetSyncChunk() (value *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result38 := NewGetSyncChunkResult()
	err = result38.Read(iprot)
	iprot.ReadMessageEnd()
	value = result38.Success
	if result38.UserException != nil {
		userException = result38.UserException
	}
	if result38.SystemException != nil {
		systemException = result38.SystemException
	}
	return
}

// Asks the NoteStore to provide the state of the account in order of
// last modification.  This request retrieves one block of the server's
// state so that a client can make several small requests against a large
// account rather than getting the entire state in one big message.
// This call gives fine-grained control of the data that will
// be received by a client by omitting data elements that a client doesn't
// need. This may reduce network traffic and sync times.
//
// @param afterUSN
//   The client can pass this value to ask only for objects that
//   have been updated after a certain point.  This allows the client to
//   receive updates after its last checkpoint rather than doing a full
//   synchronization on every pass.  The default value of "0" indicates
//   that the client wants to get objects from the start of the account.
//
// @param maxEntries
//   The maximum number of modified objects that should be
//   returned in the result SyncChunk.  This can be used to limit the size
//   of each individual message to be friendly for network transfer.
//
// @param filter
//   The caller must set some of the flags in this structure to specify which
//   data types should be returned during the synchronization.  See
//   the SyncChunkFilter structure for information on each flag.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
//   </li>
//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - AfterUSN
//  - MaxEntries
//  - Filter
func (p *NoteStoreClient) GetFilteredSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, filter *SyncChunkFilter) (r *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter); err != nil {
		return
	}
	return p.recvGetFilteredSyncChunk()
}

func (p *NoteStoreClient) sendGetFilteredSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, filter *SyncChunkFilter) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.CALL, p.SeqId)
	args41 := NewGetFilteredSyncChunkArgs()
	args41.AuthenticationToken = authenticationToken
	args41.AfterUSN = afterUSN
	args41.MaxEntries = maxEntries
	args41.Filter = filter
	err = args41.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetFilteredSyncChunk() (value *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result42 := NewGetFilteredSyncChunkResult()
	err = result42.Read(iprot)
	iprot.ReadMessageEnd()
	value = result42.Success
	if result42.UserException != nil {
		userException = result42.UserException
	}
	if result42.SystemException != nil {
		systemException = result42.SystemException
	}
	return
}

// Asks the NoteStore to provide information about the status of a linked
// notebook that has been shared with the caller, or that is public to the
// world.
// This will return a result that is similar to getSyncState, but may omit
// SyncState.uploaded if the caller doesn't have permission to write to
// the linked notebook.
//
// This function must be called on the shard that owns the referenced
// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
// same as LinkedNotebook.shardId.)
//
// @param authenticationToken
//   This should be an authenticationToken for the guest who has received
//   the invitation to the share.  (I.e. this should not be the result of
//   NoteStore.authenticateToSharedNotebook)
//
// @param linkedNotebook
//   This structure should contain identifying information and permissions
//   to access the notebook in question.
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
func (p *NoteStoreClient) GetLinkedNotebookSyncState(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (r *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetLinkedNotebookSyncState(authenticationToken, linkedNotebook); err != nil {
		return
	}
	return p.recvGetLinkedNotebookSyncState()
}

func (p *NoteStoreClient) sendGetLinkedNotebookSyncState(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.CALL, p.SeqId)
	args45 := NewGetLinkedNotebookSyncStateArgs()
	args45.AuthenticationToken = authenticationToken
	args45.LinkedNotebook = linkedNotebook
	err = args45.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetLinkedNotebookSyncState() (value *SyncState, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result46 := NewGetLinkedNotebookSyncStateResult()
	err = result46.Read(iprot)
	iprot.ReadMessageEnd()
	value = result46.Success
	if result46.UserException != nil {
		userException = result46.UserException
	}
	if result46.SystemException != nil {
		systemException = result46.SystemException
	}
	if result46.NotFoundException != nil {
		notFoundException = result46.NotFoundException
	}
	return
}

// Asks the NoteStore to provide information about the contents of a linked
// notebook that has been shared with the caller, or that is public to the
// world.
// This will return a result that is similar to getSyncChunk, but will only
// contain entries that are visible to the caller.  I.e. only that particular
// Notebook will be visible, along with its Notes, and Tags on those Notes.
//
// This function must be called on the shard that owns the referenced
// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
// same as LinkedNotebook.shardId.)
//
// @param authenticationToken
//   This should be an authenticationToken for the guest who has received
//   the invitation to the share.  (I.e. this should not be the result of
//   NoteStore.authenticateToSharedNotebook)
//
// @param linkedNotebook
//   This structure should contain identifying information and permissions
//   to access the notebook in question.  This must contain the valid fields
//   for either a shared notebook (e.g. shareKey)
//   or a public notebook (e.g. username, uri)
//
// @param afterUSN
//   The client can pass this value to ask only for objects that
//   have been updated after a certain point.  This allows the client to
//   receive updates after its last checkpoint rather than doing a full
//   synchronization on every pass.  The default value of "0" indicates
//   that the client wants to get objects from the start of the account.
//
// @param maxEntries
//   The maximum number of modified objects that should be
//   returned in the result SyncChunk.  This can be used to limit the size
//   of each individual message to be friendly for network transfer.
//   Applications should not request more than 256 objects at a time,
//   and must handle the case where the service returns less than the
//   requested number of objects in a given request even though more
//   objects are available on the service.
//
// @param fullSyncOnly
//   If true, then the client only wants initial data for a full sync.
//   In this case, the service will not return any expunged objects,
//   and will not return any Resources, since these are also provided
//   in their corresponding Notes.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
//   </li>
//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "LinkedNotebook" - if the provided information doesn't match any
//     valid notebook
//   </li>
//   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
//     valid notebook
//   </li>
//   <li> "SharedNotebook.id" - if the provided information indicates a
//      shared notebook that no longer exists
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
//  - AfterUSN
//  - MaxEntries
//  - FullSyncOnly
func (p *NoteStoreClient) GetLinkedNotebookSyncChunk(authenticationToken string, linkedNotebook *Types.LinkedNotebook, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly); err != nil {
		return
	}
	return p.recvGetLinkedNotebookSyncChunk()
}

func (p *NoteStoreClient) sendGetLinkedNotebookSyncChunk(authenticationToken string, linkedNotebook *Types.LinkedNotebook, afterUSN int32, maxEntries int32, fullSyncOnly bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.CALL, p.SeqId)
	args49 := NewGetLinkedNotebookSyncChunkArgs()
	args49.AuthenticationToken = authenticationToken
	args49.LinkedNotebook = linkedNotebook
	args49.AfterUSN = afterUSN
	args49.MaxEntries = maxEntries
	args49.FullSyncOnly = fullSyncOnly
	err = args49.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetLinkedNotebookSyncChunk() (value *SyncChunk, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result50 := NewGetLinkedNotebookSyncChunkResult()
	err = result50.Read(iprot)
	iprot.ReadMessageEnd()
	value = result50.Success
	if result50.UserException != nil {
		userException = result50.UserException
	}
	if result50.SystemException != nil {
		systemException = result50.SystemException
	}
	if result50.NotFoundException != nil {
		notFoundException = result50.NotFoundException
	}
	return
}

// Returns a list of all of the notebooks in the account.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListNotebooks(authenticationToken string) (r []*Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendListNotebooks(authenticationToken); err != nil {
		return
	}
	return p.recvListNotebooks()
}

func (p *NoteStoreClient) sendListNotebooks(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listNotebooks", thrift.CALL, p.SeqId)
	args53 := NewListNotebooksArgs()
	args53.AuthenticationToken = authenticationToken
	err = args53.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListNotebooks() (value []*Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result54 := NewListNotebooksResult()
	err = result54.Read(iprot)
	iprot.ReadMessageEnd()
	value = result54.Success
	if result54.UserException != nil {
		userException = result54.UserException
	}
	if result54.SystemException != nil {
		systemException = result54.SystemException
	}
	return
}

// Returns the current state of the notebook with the provided GUID.
// The notebook may be active or deleted (but not expunged).
//
// @param guid
//   The GUID of the notebook to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetNotebook(authenticationToken string, guid Types.Guid) (r *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNotebook(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNotebook()
}

func (p *NoteStoreClient) sendGetNotebook(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNotebook", thrift.CALL, p.SeqId)
	args57 := NewGetNotebookArgs()
	args57.AuthenticationToken = authenticationToken
	args57.Guid = guid
	err = args57.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNotebook() (value *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result58 := NewGetNotebookResult()
	err = result58.Read(iprot)
	iprot.ReadMessageEnd()
	value = result58.Success
	if result58.UserException != nil {
		userException = result58.UserException
	}
	if result58.SystemException != nil {
		systemException = result58.SystemException
	}
	if result58.NotFoundException != nil {
		notFoundException = result58.NotFoundException
	}
	return
}

// Returns the notebook that should be used to store new notes in the
// user's account when no other notebooks are specified.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) GetDefaultNotebook(authenticationToken string) (r *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetDefaultNotebook(authenticationToken); err != nil {
		return
	}
	return p.recvGetDefaultNotebook()
}

func (p *NoteStoreClient) sendGetDefaultNotebook(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getDefaultNotebook", thrift.CALL, p.SeqId)
	args61 := NewGetDefaultNotebookArgs()
	args61.AuthenticationToken = authenticationToken
	err = args61.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetDefaultNotebook() (value *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result62 := NewGetDefaultNotebookResult()
	err = result62.Read(iprot)
	iprot.ReadMessageEnd()
	value = result62.Success
	if result62.UserException != nil {
		userException = result62.UserException
	}
	if result62.SystemException != nil {
		systemException = result62.SystemException
	}
	return
}

// Asks the service to make a notebook with the provided name.
//
// @param notebook
//   The desired fields for the notebook must be provided on this
//   object.  The name of the notebook must be set, and either the 'active'
//   or 'defaultNotebook' fields may be set by the client at creation.
//   If a notebook exists in the account with the same name (via
//   case-insensitive compare), this will throw an EDAMUserException.
//
// @return
//   The newly created Notebook.  The server-side GUID will be
//   saved in this object's 'guid' field.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
//   </li>
//   <li> DATA_CONFLICT "Notebook.name" - name already in use
//   </li>
//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
//   </li>
//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
//   </li>
//   <li> LIMIT_REACHED "Notebook" - at max number of notebooks
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Notebook
func (p *NoteStoreClient) CreateNotebook(authenticationToken string, notebook *Types.Notebook) (r *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendCreateNotebook(authenticationToken, notebook); err != nil {
		return
	}
	return p.recvCreateNotebook()
}

func (p *NoteStoreClient) sendCreateNotebook(authenticationToken string, notebook *Types.Notebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createNotebook", thrift.CALL, p.SeqId)
	args65 := NewCreateNotebookArgs()
	args65.AuthenticationToken = authenticationToken
	args65.Notebook = notebook
	err = args65.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCreateNotebook() (value *Types.Notebook, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result66 := NewCreateNotebookResult()
	err = result66.Read(iprot)
	iprot.ReadMessageEnd()
	value = result66.Success
	if result66.UserException != nil {
		userException = result66.UserException
	}
	if result66.SystemException != nil {
		systemException = result66.SystemException
	}
	return
}

// Submits notebook changes to the service.  The provided data must include
// the notebook's guid field for identification.
//
// @param notebook
//   The notebook object containing the requested changes.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
//   </li>
//   <li> DATA_CONFLICT "Notebook.name" - name already in use
//   </li>
//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
//   </li>
//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Notebook
func (p *NoteStoreClient) UpdateNotebook(authenticationToken string, notebook *Types.Notebook) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUpdateNotebook(authenticationToken, notebook); err != nil {
		return
	}
	return p.recvUpdateNotebook()
}

func (p *NoteStoreClient) sendUpdateNotebook(authenticationToken string, notebook *Types.Notebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateNotebook", thrift.CALL, p.SeqId)
	args69 := NewUpdateNotebookArgs()
	args69.AuthenticationToken = authenticationToken
	args69.Notebook = notebook
	err = args69.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateNotebook() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result70 := NewUpdateNotebookResult()
	err = result70.Read(iprot)
	iprot.ReadMessageEnd()
	value = result70.Success
	if result70.UserException != nil {
		userException = result70.UserException
	}
	if result70.SystemException != nil {
		systemException = result70.SystemException
	}
	if result70.NotFoundException != nil {
		notFoundException = result70.NotFoundException
	}
	return
}

// Permanently removes the notebook from the user's account.
// After this action, the notebook is no longer available for undeletion, etc.
// If the notebook contains any Notes, they will be moved to the current
// default notebook and moved into the trash (i.e. Note.active=false).
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the notebook to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
//   </li>
//   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
//   </li>
//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) ExpungeNotebook(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendExpungeNotebook(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeNotebook()
}

func (p *NoteStoreClient) sendExpungeNotebook(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeNotebook", thrift.CALL, p.SeqId)
	args73 := NewExpungeNotebookArgs()
	args73.AuthenticationToken = authenticationToken
	args73.Guid = guid
	err = args73.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeNotebook() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error76 error
		error76, err = error75.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error76
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result74 := NewExpungeNotebookResult()
	err = result74.Read(iprot)
	iprot.ReadMessageEnd()
	value = result74.Success
	if result74.UserException != nil {
		userException = result74.UserException
	}
	if result74.SystemException != nil {
		systemException = result74.SystemException
	}
	if result74.NotFoundException != nil {
		notFoundException = result74.NotFoundException
	}
	return
}

// Returns a list of the tags in the account.  Evernote does not support
// the undeletion of tags, so this will only include active tags.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListTags(authenticationToken string) (r []*Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendListTags(authenticationToken); err != nil {
		return
	}
	return p.recvListTags()
}

func (p *NoteStoreClient) sendListTags(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listTags", thrift.CALL, p.SeqId)
	args77 := NewListTagsArgs()
	args77.AuthenticationToken = authenticationToken
	err = args77.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListTags() (value []*Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error79 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error80 error
		error80, err = error79.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error80
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result78 := NewListTagsResult()
	err = result78.Read(iprot)
	iprot.ReadMessageEnd()
	value = result78.Success
	if result78.UserException != nil {
		userException = result78.UserException
	}
	if result78.SystemException != nil {
		systemException = result78.SystemException
	}
	return
}

// Returns a list of the tags that are applied to at least one note within
// the provided notebook.  If the notebook is public, the authenticationToken
// may be ignored.
//
// @param notebookGuid
//    the GUID of the notebook to use to find tags
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - notebook not found by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NotebookGuid
func (p *NoteStoreClient) ListTagsByNotebook(authenticationToken string, notebookGuid Types.Guid) (r []*Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendListTagsByNotebook(authenticationToken, notebookGuid); err != nil {
		return
	}
	return p.recvListTagsByNotebook()
}

func (p *NoteStoreClient) sendListTagsByNotebook(authenticationToken string, notebookGuid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listTagsByNotebook", thrift.CALL, p.SeqId)
	args81 := NewListTagsByNotebookArgs()
	args81.AuthenticationToken = authenticationToken
	args81.NotebookGuid = notebookGuid
	err = args81.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListTagsByNotebook() (value []*Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error83 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error84 error
		error84, err = error83.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error84
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result82 := NewListTagsByNotebookResult()
	err = result82.Read(iprot)
	iprot.ReadMessageEnd()
	value = result82.Success
	if result82.UserException != nil {
		userException = result82.UserException
	}
	if result82.SystemException != nil {
		systemException = result82.SystemException
	}
	if result82.NotFoundException != nil {
		notFoundException = result82.NotFoundException
	}
	return
}

// Returns the current state of the Tag with the provided GUID.
//
// @param guid
//   The GUID of the tag to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetTag(authenticationToken string, guid Types.Guid) (r *Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetTag(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetTag()
}

func (p *NoteStoreClient) sendGetTag(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTag", thrift.CALL, p.SeqId)
	args85 := NewGetTagArgs()
	args85.AuthenticationToken = authenticationToken
	args85.Guid = guid
	err = args85.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetTag() (value *Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error87 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error88 error
		error88, err = error87.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error88
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result86 := NewGetTagResult()
	err = result86.Read(iprot)
	iprot.ReadMessageEnd()
	value = result86.Success
	if result86.UserException != nil {
		userException = result86.UserException
	}
	if result86.SystemException != nil {
		systemException = result86.SystemException
	}
	if result86.NotFoundException != nil {
		notFoundException = result86.NotFoundException
	}
	return
}

// Asks the service to make a tag with a set of information.
//
// @param tag
//   The desired list of fields for the tag are specified in this
//   object.  The caller must specify the tag name, and may provide
//   the parentGUID.
//
// @return
//   The newly created Tag.  The server-side GUID will be
//   saved in this object.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
//   </li>
//   <li> DATA_CONFLICT "Tag.name" - name already in use
//   </li>
//   <li> LIMIT_REACHED "Tag" - at max number of tags
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.parentGuid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Tag
func (p *NoteStoreClient) CreateTag(authenticationToken string, tag *Types.Tag) (r *Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendCreateTag(authenticationToken, tag); err != nil {
		return
	}
	return p.recvCreateTag()
}

func (p *NoteStoreClient) sendCreateTag(authenticationToken string, tag *Types.Tag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId)
	args89 := NewCreateTagArgs()
	args89.AuthenticationToken = authenticationToken
	args89.Tag = tag
	err = args89.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCreateTag() (value *Types.Tag, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error92 error
		error92, err = error91.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error92
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result90 := NewCreateTagResult()
	err = result90.Read(iprot)
	iprot.ReadMessageEnd()
	value = result90.Success
	if result90.UserException != nil {
		userException = result90.UserException
	}
	if result90.SystemException != nil {
		systemException = result90.SystemException
	}
	if result90.NotFoundException != nil {
		notFoundException = result90.NotFoundException
	}
	return
}

// Submits tag changes to the service.  The provided data must include
// the tag's guid field for identification.  The service will apply
// updates to the following tag fields:  name, parentGuid
//
// @param tag
//   The tag object containing the requested changes.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
//   </li>
//   <li> DATA_CONFLICT "Tag.name" - name already in use
//   </li>
//   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
//   </li>
//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
//   <li> "Tag.parentGuid" - parent not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Tag
func (p *NoteStoreClient) UpdateTag(authenticationToken string, tag *Types.Tag) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUpdateTag(authenticationToken, tag); err != nil {
		return
	}
	return p.recvUpdateTag()
}

func (p *NoteStoreClient) sendUpdateTag(authenticationToken string, tag *Types.Tag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateTag", thrift.CALL, p.SeqId)
	args93 := NewUpdateTagArgs()
	args93.AuthenticationToken = authenticationToken
	args93.Tag = tag
	err = args93.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateTag() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error96 error
		error96, err = error95.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error96
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result94 := NewUpdateTagResult()
	err = result94.Read(iprot)
	iprot.ReadMessageEnd()
	value = result94.Success
	if result94.UserException != nil {
		userException = result94.UserException
	}
	if result94.SystemException != nil {
		systemException = result94.SystemException
	}
	if result94.NotFoundException != nil {
		notFoundException = result94.NotFoundException
	}
	return
}

// Removes the provided tag from every note that is currently tagged with
// this tag.  If this operation is successful, the tag will still be in
// the account, but it will not be tagged on any notes.
//
// This function is not indended for use by full synchronizing clients, since
// it does not provide enough result information to the client to reconcile
// the local state without performing a follow-up sync from the service.  This
// is intended for "thin clients" that need to efficiently support this as
// a UI operation.
//
// @param guid
//   The GUID of the tag to remove from all notes.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) UntagAll(authenticationToken string, guid Types.Guid) (userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUntagAll(authenticationToken, guid); err != nil {
		return
	}
	return p.recvUntagAll()
}

func (p *NoteStoreClient) sendUntagAll(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("untagAll", thrift.CALL, p.SeqId)
	args97 := NewUntagAllArgs()
	args97.AuthenticationToken = authenticationToken
	args97.Guid = guid
	err = args97.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUntagAll() (userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error99 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error100 error
		error100, err = error99.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error100
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result98 := NewUntagAllResult()
	err = result98.Read(iprot)
	iprot.ReadMessageEnd()
	if result98.UserException != nil {
		userException = result98.UserException
	}
	if result98.SystemException != nil {
		systemException = result98.SystemException
	}
	if result98.NotFoundException != nil {
		notFoundException = result98.NotFoundException
	}
	return
}

// Permanently deletes the tag with the provided GUID, if present.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the tag to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) ExpungeTag(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendExpungeTag(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeTag()
}

func (p *NoteStoreClient) sendExpungeTag(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeTag", thrift.CALL, p.SeqId)
	args101 := NewExpungeTagArgs()
	args101.AuthenticationToken = authenticationToken
	args101.Guid = guid
	err = args101.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeTag() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error103 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error104 error
		error104, err = error103.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error104
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result102 := NewExpungeTagResult()
	err = result102.Read(iprot)
	iprot.ReadMessageEnd()
	value = result102.Success
	if result102.UserException != nil {
		userException = result102.UserException
	}
	if result102.SystemException != nil {
		systemException = result102.SystemException
	}
	if result102.NotFoundException != nil {
		notFoundException = result102.NotFoundException
	}
	return
}

// Returns a list of the searches in the account.  Evernote does not support
// the undeletion of searches, so this will only include active searches.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListSearches(authenticationToken string) (r []*Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendListSearches(authenticationToken); err != nil {
		return
	}
	return p.recvListSearches()
}

func (p *NoteStoreClient) sendListSearches(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listSearches", thrift.CALL, p.SeqId)
	args105 := NewListSearchesArgs()
	args105.AuthenticationToken = authenticationToken
	err = args105.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListSearches() (value []*Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error107 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error108 error
		error108, err = error107.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error108
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result106 := NewListSearchesResult()
	err = result106.Read(iprot)
	iprot.ReadMessageEnd()
	value = result106.Success
	if result106.UserException != nil {
		userException = result106.UserException
	}
	if result106.SystemException != nil {
		systemException = result106.SystemException
	}
	return
}

// Returns the current state of the search with the provided GUID.
//
// @param guid
//   The GUID of the search to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
//   </li>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SavedSearch.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetSearch(authenticationToken string, guid Types.Guid) (r *Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetSearch(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetSearch()
}

func (p *NoteStoreClient) sendGetSearch(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSearch", thrift.CALL, p.SeqId)
	args109 := NewGetSearchArgs()
	args109.AuthenticationToken = authenticationToken
	args109.Guid = guid
	err = args109.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetSearch() (value *Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error112 error
		error112, err = error111.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error112
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result110 := NewGetSearchResult()
	err = result110.Read(iprot)
	iprot.ReadMessageEnd()
	value = result110.Success
	if result110.UserException != nil {
		userException = result110.UserException
	}
	if result110.SystemException != nil {
		systemException = result110.SystemException
	}
	if result110.NotFoundException != nil {
		notFoundException = result110.NotFoundException
	}
	return
}

// Asks the service to make a saved search with a set of information.
//
// @param search
//   The desired list of fields for the search are specified in this
//   object. The caller must specify the name and query for the
//   search, and may optionally specify a search scope.
//   The SavedSearch.format field is ignored by the service.
//
// @return
//   The newly created SavedSearch.  The server-side GUID will be
//   saved in this object.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
//   </li>
//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
//   </li>
//   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Search
func (p *NoteStoreClient) CreateSearch(authenticationToken string, search *Types.SavedSearch) (r *Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendCreateSearch(authenticationToken, search); err != nil {
		return
	}
	return p.recvCreateSearch()
}

func (p *NoteStoreClient) sendCreateSearch(authenticationToken string, search *Types.SavedSearch) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createSearch", thrift.CALL, p.SeqId)
	args113 := NewCreateSearchArgs()
	args113.AuthenticationToken = authenticationToken
	args113.Search = search
	err = args113.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCreateSearch() (value *Types.SavedSearch, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error116 error
		error116, err = error115.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error116
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result114 := NewCreateSearchResult()
	err = result114.Read(iprot)
	iprot.ReadMessageEnd()
	value = result114.Success
	if result114.UserException != nil {
		userException = result114.UserException
	}
	if result114.SystemException != nil {
		systemException = result114.SystemException
	}
	return
}

// Submits search changes to the service. The provided data must include
// the search's guid field for identification. The service will apply
// updates to the following search fields: name, query, and scope.
//
// @param search
//   The search object containing the requested changes.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
//   </li>
//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
//   </li>
//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SavedSearch.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Search
func (p *NoteStoreClient) UpdateSearch(authenticationToken string, search *Types.SavedSearch) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUpdateSearch(authenticationToken, search); err != nil {
		return
	}
	return p.recvUpdateSearch()
}

func (p *NoteStoreClient) sendUpdateSearch(authenticationToken string, search *Types.SavedSearch) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateSearch", thrift.CALL, p.SeqId)
	args117 := NewUpdateSearchArgs()
	args117.AuthenticationToken = authenticationToken
	args117.Search = search
	err = args117.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateSearch() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error119 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error120 error
		error120, err = error119.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error120
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result118 := NewUpdateSearchResult()
	err = result118.Read(iprot)
	iprot.ReadMessageEnd()
	value = result118.Success
	if result118.UserException != nil {
		userException = result118.UserException
	}
	if result118.SystemException != nil {
		systemException = result118.SystemException
	}
	if result118.NotFoundException != nil {
		notFoundException = result118.NotFoundException
	}
	return
}

// Permanently deletes the saved search with the provided GUID, if present.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the search to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
//   </li>
//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SavedSearch.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) ExpungeSearch(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendExpungeSearch(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeSearch()
}

func (p *NoteStoreClient) sendExpungeSearch(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeSearch", thrift.CALL, p.SeqId)
	args121 := NewExpungeSearchArgs()
	args121.AuthenticationToken = authenticationToken
	args121.Guid = guid
	err = args121.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeSearch() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error123 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error124 error
		error124, err = error123.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error124
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result122 := NewExpungeSearchResult()
	err = result122.Read(iprot)
	iprot.ReadMessageEnd()
	value = result122.Success
	if result122.UserException != nil {
		userException = result122.UserException
	}
	if result122.SystemException != nil {
		systemException = result122.SystemException
	}
	if result122.NotFoundException != nil {
		notFoundException = result122.NotFoundException
	}
	return
}

// DEPRECATED. Use findNotesMetadata.
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - Offset
//  - MaxNotes
func (p *NoteStoreClient) FindNotes(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32) (r *NoteList, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendFindNotes(authenticationToken, filter, offset, maxNotes); err != nil {
		return
	}
	return p.recvFindNotes()
}

func (p *NoteStoreClient) sendFindNotes(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("findNotes", thrift.CALL, p.SeqId)
	args125 := NewFindNotesArgs()
	args125.AuthenticationToken = authenticationToken
	args125.Filter = filter
	args125.Offset = offset
	args125.MaxNotes = maxNotes
	err = args125.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvFindNotes() (value *NoteList, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error127 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error128 error
		error128, err = error127.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error128
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result126 := NewFindNotesResult()
	err = result126.Read(iprot)
	iprot.ReadMessageEnd()
	value = result126.Success
	if result126.UserException != nil {
		userException = result126.UserException
	}
	if result126.SystemException != nil {
		systemException = result126.SystemException
	}
	if result126.NotFoundException != nil {
		notFoundException = result126.NotFoundException
	}
	return
}

// Finds the position of a note within a sorted subset of all of the user's
// notes. This may be useful for thin clients that are displaying a paginated
// listing of a large account, which need to know where a particular note
// sits in the list without retrieving all notes first.
//
// @param authenticationToken
//   Must be a valid token for the user's account unless the NoteFilter
//   'notebookGuid' is the GUID of a public notebook.
//
// @param filter
//   The list of criteria that will constrain the notes to be returned.
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @return
//   If the note with the provided GUID is found within the matching note
//   list, this will return the offset of that note within that list (where
//   the first offset is 0).  If the note is not found within the set of
//   notes, this will return -1.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - Guid
func (p *NoteStoreClient) FindNoteOffset(authenticationToken string, filter *NoteFilter, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendFindNoteOffset(authenticationToken, filter, guid); err != nil {
		return
	}
	return p.recvFindNoteOffset()
}

func (p *NoteStoreClient) sendFindNoteOffset(authenticationToken string, filter *NoteFilter, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("findNoteOffset", thrift.CALL, p.SeqId)
	args129 := NewFindNoteOffsetArgs()
	args129.AuthenticationToken = authenticationToken
	args129.Filter = filter
	args129.Guid = guid
	err = args129.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvFindNoteOffset() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error131 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error132 error
		error132, err = error131.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error132
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result130 := NewFindNoteOffsetResult()
	err = result130.Read(iprot)
	iprot.ReadMessageEnd()
	value = result130.Success
	if result130.UserException != nil {
		userException = result130.UserException
	}
	if result130.SystemException != nil {
		systemException = result130.SystemException
	}
	if result130.NotFoundException != nil {
		notFoundException = result130.NotFoundException
	}
	return
}

// Used to find the high-level information about a set of the notes from a
// user's account based on various criteria specified via a NoteFilter object.
// <p/>
// Web applications that wish to periodically check for new content in a user's
// Evernote account should consider using webhooks instead of polling this API.
// See http://dev.evernote.com/documentation/cloud/chapters/polling_notification.php
// for more information.
//
// @param authenticationToken
//   Must be a valid token for the user's account unless the NoteFilter
//   'notebookGuid' is the GUID of a public notebook.
//
// @param filter
//   The list of criteria that will constrain the notes to be returned.
//
// @param offset
//   The numeric index of the first note to show within the sorted
//   results.  The numbering scheme starts with "0".  This can be used for
//   pagination.
//
// @param maxNotes
//   The mximum notes to return in this query.  The service will return a set
//   of notes that is no larger than this number, but may return fewer notes
//   if needed.  The NoteList.totalNotes field in the return value will
//   indicate whether there are more values available after the returned set.
//
// @param resultSpec
//   This specifies which information should be returned for each matching
//   Note. The fields on this structure can be used to eliminate data that
//   the client doesn't need, which will reduce the time and bandwidth
//   to receive and process the reply.
//
// @return
//   The list of notes that match the criteria.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - Offset
//  - MaxNotes
//  - ResultSpec
func (p *NoteStoreClient) FindNotesMetadata(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32, resultSpec *NotesMetadataResultSpec) (r *NotesMetadataList, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendFindNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec); err != nil {
		return
	}
	return p.recvFindNotesMetadata()
}

func (p *NoteStoreClient) sendFindNotesMetadata(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32, resultSpec *NotesMetadataResultSpec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("findNotesMetadata", thrift.CALL, p.SeqId)
	args133 := NewFindNotesMetadataArgs()
	args133.AuthenticationToken = authenticationToken
	args133.Filter = filter
	args133.Offset = offset
	args133.MaxNotes = maxNotes
	args133.ResultSpec = resultSpec
	err = args133.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvFindNotesMetadata() (value *NotesMetadataList, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error135 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error136 error
		error136, err = error135.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error136
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result134 := NewFindNotesMetadataResult()
	err = result134.Read(iprot)
	iprot.ReadMessageEnd()
	value = result134.Success
	if result134.UserException != nil {
		userException = result134.UserException
	}
	if result134.SystemException != nil {
		systemException = result134.SystemException
	}
	if result134.NotFoundException != nil {
		notFoundException = result134.NotFoundException
	}
	return
}

// This function is used to determine how many notes are found for each
// notebook and tag in the user's account, given a current set of filter
// parameters that determine the current selection.  This function will
// return a structure that gives the note count for each notebook and tag
// that has at least one note under the requested filter.  Any notebook or
// tag that has zero notes in the filtered set will not be listed in the
// reply to this function (so they can be assumed to be 0).
//
// @param authenticationToken
//   Must be a valid token for the user's account unless the NoteFilter
//   'notebookGuid' is the GUID of a public notebook.
//
// @param filter
//   The note selection filter that is currently being applied.  The note
//   counts are to be calculated with this filter applied to the total set
//   of notes in the user's account.
//
// @param withTrash
//   If true, then the NoteCollectionCounts.trashCount will be calculated
//   and supplied in the reply. Otherwise, the trash value will be omitted.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - WithTrash
func (p *NoteStoreClient) FindNoteCounts(authenticationToken string, filter *NoteFilter, withTrash bool) (r *NoteCollectionCounts, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendFindNoteCounts(authenticationToken, filter, withTrash); err != nil {
		return
	}
	return p.recvFindNoteCounts()
}

func (p *NoteStoreClient) sendFindNoteCounts(authenticationToken string, filter *NoteFilter, withTrash bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("findNoteCounts", thrift.CALL, p.SeqId)
	args137 := NewFindNoteCountsArgs()
	args137.AuthenticationToken = authenticationToken
	args137.Filter = filter
	args137.WithTrash = withTrash
	err = args137.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvFindNoteCounts() (value *NoteCollectionCounts, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error139 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error140 error
		error140, err = error139.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error140
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result138 := NewFindNoteCountsResult()
	err = result138.Read(iprot)
	iprot.ReadMessageEnd()
	value = result138.Success
	if result138.UserException != nil {
		userException = result138.UserException
	}
	if result138.SystemException != nil {
		systemException = result138.SystemException
	}
	if result138.NotFoundException != nil {
		notFoundException = result138.NotFoundException
	}
	return
}

// Returns the current state of the note in the service with the provided
// GUID.  The ENML contents of the note will only be provided if the
// 'withContent' parameter is true.  The service will include the meta-data
// for each resource in the note, but the binary contents of the resources
// and their recognition data will be omitted.
// If the Note is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).  The applicationData
// fields are returned as keysOnly.
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @param withContent
//   If true, the note will include the ENML contents of its
//   'content' field.
//
// @param withResourcesData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'data' field's body.
//
// @param withResourcesRecognition
//   If true, any Resource elements will include the binary contents of the
//   'recognition' field's body if recognition data is present.
//
// @param withResourcesAlternateData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'alternateData' fields' body, if an alternate form
//   is present.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - WithContent
//  - WithResourcesData
//  - WithResourcesRecognition
//  - WithResourcesAlternateData
func (p *NoteStoreClient) GetNote(authenticationToken string, guid Types.Guid, withContent bool, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData); err != nil {
		return
	}
	return p.recvGetNote()
}

func (p *NoteStoreClient) sendGetNote(authenticationToken string, guid Types.Guid, withContent bool, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNote", thrift.CALL, p.SeqId)
	args141 := NewGetNoteArgs()
	args141.AuthenticationToken = authenticationToken
	args141.Guid = guid
	args141.WithContent = withContent
	args141.WithResourcesData = withResourcesData
	args141.WithResourcesRecognition = withResourcesRecognition
	args141.WithResourcesAlternateData = withResourcesAlternateData
	err = args141.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNote() (value *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error143 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error144 error
		error144, err = error143.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error144
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result142 := NewGetNoteResult()
	err = result142.Read(iprot)
	iprot.ReadMessageEnd()
	value = result142.Success
	if result142.UserException != nil {
		userException = result142.UserException
	}
	if result142.SystemException != nil {
		systemException = result142.SystemException
	}
	if result142.NotFoundException != nil {
		notFoundException = result142.NotFoundException
	}
	return
}

// Get all of the application data for the note identified by GUID,
// with values returned within the LazyMap fullMap field.
// If there are no applicationData entries, then a LazyMap
// with an empty fullMap will be returned. If your application
// only needs to fetch its own applicationData entry, use
// getNoteApplicationDataEntry instead.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetNoteApplicationData(authenticationToken string, guid Types.Guid) (r *Types.LazyMap, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNoteApplicationData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNoteApplicationData()
}

func (p *NoteStoreClient) sendGetNoteApplicationData(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNoteApplicationData", thrift.CALL, p.SeqId)
	args145 := NewGetNoteApplicationDataArgs()
	args145.AuthenticationToken = authenticationToken
	args145.Guid = guid
	err = args145.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNoteApplicationData() (value *Types.LazyMap, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error147 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error148 error
		error148, err = error147.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error148
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result146 := NewGetNoteApplicationDataResult()
	err = result146.Read(iprot)
	iprot.ReadMessageEnd()
	value = result146.Success
	if result146.UserException != nil {
		userException = result146.UserException
	}
	if result146.SystemException != nil {
		systemException = result146.SystemException
	}
	if result146.NotFoundException != nil {
		notFoundException = result146.NotFoundException
	}
	return
}

// Get the value of a single entry in the applicationData map
// for the note identified by GUID.
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - note not found, by GUID</li>
//   <li> "NoteAttributes.applicationData.key" - note not found, by key</li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - Key
func (p *NoteStoreClient) GetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNoteApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvGetNoteApplicationDataEntry()
}

func (p *NoteStoreClient) sendGetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.CALL, p.SeqId)
	args149 := NewGetNoteApplicationDataEntryArgs()
	args149.AuthenticationToken = authenticationToken
	args149.Guid = guid
	args149.Key = key
	err = args149.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNoteApplicationDataEntry() (value string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error151 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error152 error
		error152, err = error151.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error152
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result150 := NewGetNoteApplicationDataEntryResult()
	err = result150.Read(iprot)
	iprot.ReadMessageEnd()
	value = result150.Success
	if result150.UserException != nil {
		userException = result150.UserException
	}
	if result150.SystemException != nil {
		systemException = result150.SystemException
	}
	if result150.NotFoundException != nil {
		notFoundException = result150.NotFoundException
	}
	return
}

// Update, or create, an entry in the applicationData map for
// the note identified by guid.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - Key
//  - Value
func (p *NoteStoreClient) SetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string, value string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendSetNoteApplicationDataEntry(authenticationToken, guid, key, value); err != nil {
		return
	}
	return p.recvSetNoteApplicationDataEntry()
}

func (p *NoteStoreClient) sendSetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.CALL, p.SeqId)
	args153 := NewSetNoteApplicationDataEntryArgs()
	args153.AuthenticationToken = authenticationToken
	args153.Guid = guid
	args153.Key = key
	args153.Value = value
	err = args153.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvSetNoteApplicationDataEntry() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error155 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error156 error
		error156, err = error155.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error156
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result154 := NewSetNoteApplicationDataEntryResult()
	err = result154.Read(iprot)
	iprot.ReadMessageEnd()
	value = result154.Success
	if result154.UserException != nil {
		userException = result154.UserException
	}
	if result154.SystemException != nil {
		systemException = result154.SystemException
	}
	if result154.NotFoundException != nil {
		notFoundException = result154.NotFoundException
	}
	return
}

// Remove an entry identified by 'key' from the applicationData map for
// the note identified by 'guid'. Silently ignores an unset of a
// non-existing key.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - Key
func (p *NoteStoreClient) UnsetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUnsetNoteApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvUnsetNoteApplicationDataEntry()
}

func (p *NoteStoreClient) sendUnsetNoteApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.CALL, p.SeqId)
	args157 := NewUnsetNoteApplicationDataEntryArgs()
	args157.AuthenticationToken = authenticationToken
	args157.Guid = guid
	args157.Key = key
	err = args157.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUnsetNoteApplicationDataEntry() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error159 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error160 error
		error160, err = error159.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error160
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result158 := NewUnsetNoteApplicationDataEntryResult()
	err = result158.Read(iprot)
	iprot.ReadMessageEnd()
	value = result158.Success
	if result158.UserException != nil {
		userException = result158.UserException
	}
	if result158.SystemException != nil {
		systemException = result158.SystemException
	}
	if result158.NotFoundException != nil {
		notFoundException = result158.NotFoundException
	}
	return
}

// Returns XHTML contents of the note with the provided GUID.
// If the Note is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetNoteContent(authenticationToken string, guid Types.Guid) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNoteContent(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNoteContent()
}

func (p *NoteStoreClient) sendGetNoteContent(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNoteContent", thrift.CALL, p.SeqId)
	args161 := NewGetNoteContentArgs()
	args161.AuthenticationToken = authenticationToken
	args161.Guid = guid
	err = args161.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNoteContent() (value string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error163 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error164 error
		error164, err = error163.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error164
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result162 := NewGetNoteContentResult()
	err = result162.Read(iprot)
	iprot.ReadMessageEnd()
	value = result162.Success
	if result162.UserException != nil {
		userException = result162.UserException
	}
	if result162.SystemException != nil {
		systemException = result162.SystemException
	}
	if result162.NotFoundException != nil {
		notFoundException = result162.NotFoundException
	}
	return
}

// Returns a block of the extracted plain text contents of the note with the
// provided GUID.  This text can be indexed for search purposes by a light
// client that doesn't have capabilities to extract all of the searchable
// text content from the note and its resources.
//
// If the Note is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @param noteOnly
//   If true, this will only return the text extracted from the ENML contents
//   of the note itself.  If false, this will also include the extracted text
//   from any text-bearing resources (PDF, recognized images)
//
// @param tokenizeForIndexing
//   If true, this will break the text into cleanly separated and sanitized
//   tokens.  If false, this will return the more raw text extraction, with
//   its original punctuation, capitalization, spacing, etc.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - NoteOnly
//  - TokenizeForIndexing
func (p *NoteStoreClient) GetNoteSearchText(authenticationToken string, guid Types.Guid, noteOnly bool, tokenizeForIndexing bool) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing); err != nil {
		return
	}
	return p.recvGetNoteSearchText()
}

func (p *NoteStoreClient) sendGetNoteSearchText(authenticationToken string, guid Types.Guid, noteOnly bool, tokenizeForIndexing bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNoteSearchText", thrift.CALL, p.SeqId)
	args165 := NewGetNoteSearchTextArgs()
	args165.AuthenticationToken = authenticationToken
	args165.Guid = guid
	args165.NoteOnly = noteOnly
	args165.TokenizeForIndexing = tokenizeForIndexing
	err = args165.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNoteSearchText() (value string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error168 error
		error168, err = error167.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error168
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result166 := NewGetNoteSearchTextResult()
	err = result166.Read(iprot)
	iprot.ReadMessageEnd()
	value = result166.Success
	if result166.UserException != nil {
		userException = result166.UserException
	}
	if result166.SystemException != nil {
		systemException = result166.SystemException
	}
	if result166.NotFoundException != nil {
		notFoundException = result166.NotFoundException
	}
	return
}

// Returns a block of the extracted plain text contents of the resource with
// the provided GUID.  This text can be indexed for search purposes by a light
// client that doesn't have capability to extract all of the searchable
// text content from a resource.
//
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetResourceSearchText(authenticationToken string, guid Types.Guid) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceSearchText(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceSearchText()
}

func (p *NoteStoreClient) sendGetResourceSearchText(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceSearchText", thrift.CALL, p.SeqId)
	args169 := NewGetResourceSearchTextArgs()
	args169.AuthenticationToken = authenticationToken
	args169.Guid = guid
	err = args169.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceSearchText() (value string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error171 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error172 error
		error172, err = error171.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error172
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result170 := NewGetResourceSearchTextResult()
	err = result170.Read(iprot)
	iprot.ReadMessageEnd()
	value = result170.Success
	if result170.UserException != nil {
		userException = result170.UserException
	}
	if result170.SystemException != nil {
		systemException = result170.SystemException
	}
	if result170.NotFoundException != nil {
		notFoundException = result170.NotFoundException
	}
	return
}

// Returns a list of the names of the tags for the note with the provided
// guid.  This can be used with authentication to get the tags for a
// user's own note, or can be used without valid authentication to retrieve
// the names of the tags for a note in a public notebook.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetNoteTagNames(authenticationToken string, guid Types.Guid) (r []string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNoteTagNames(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNoteTagNames()
}

func (p *NoteStoreClient) sendGetNoteTagNames(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNoteTagNames", thrift.CALL, p.SeqId)
	args173 := NewGetNoteTagNamesArgs()
	args173.AuthenticationToken = authenticationToken
	args173.Guid = guid
	err = args173.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNoteTagNames() (value []string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error175 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error176 error
		error176, err = error175.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error176
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result174 := NewGetNoteTagNamesResult()
	err = result174.Read(iprot)
	iprot.ReadMessageEnd()
	value = result174.Success
	if result174.UserException != nil {
		userException = result174.UserException
	}
	if result174.SystemException != nil {
		systemException = result174.SystemException
	}
	if result174.NotFoundException != nil {
		notFoundException = result174.NotFoundException
	}
	return
}

// Asks the service to make a note with the provided set of information.
//
// @param note
//   A Note object containing the desired fields to be populated on
//   the service.
//
// @return
//   The newly created Note from the service.  The server-side
//   GUIDs for the Note and any Resources will be saved in this object.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
//   </li>
//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
//   </li>
//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
//   </li>
//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
//   </li>
//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
//   </li>
//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
//   </li>
//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
//   </li>
//   <li> LIMIT_REACHED "Note" - at max number per account
//   </li>
//   <li> LIMIT_REACHED "Note.size" - total note size too large
//   </li>
//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
//   </li>
//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
//   </li>
//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
//   </li>
//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
//   </li>
//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
//   </li>
//   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
//   </li>
//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
//     of the specified tags had an invalid length or pattern
//   </li>
//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
//     new tags would exceed the maximum number per account
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.notebookGuid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Note
func (p *NoteStoreClient) CreateNote(authenticationToken string, note *Types.Note) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendCreateNote(authenticationToken, note); err != nil {
		return
	}
	return p.recvCreateNote()
}

func (p *NoteStoreClient) sendCreateNote(authenticationToken string, note *Types.Note) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createNote", thrift.CALL, p.SeqId)
	args177 := NewCreateNoteArgs()
	args177.AuthenticationToken = authenticationToken
	args177.Note = note
	err = args177.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCreateNote() (value *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error179 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error180 error
		error180, err = error179.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error180
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result178 := NewCreateNoteResult()
	err = result178.Read(iprot)
	iprot.ReadMessageEnd()
	value = result178.Success
	if result178.UserException != nil {
		userException = result178.UserException
	}
	if result178.SystemException != nil {
		systemException = result178.SystemException
	}
	if result178.NotFoundException != nil {
		notFoundException = result178.NotFoundException
	}
	return
}

// Submit a set of changes to a note to the service.  The provided data
// must include the note's guid field for identification. The note's
// title must also be set.
//
// @param note
//   A Note object containing the desired fields to be populated on
//   the service. With the exception of the note's title and guid, fields
//   that are not being changed do not need to be set. If the content is not
//   being modified, note.content should be left unset. If the list of
//   resources is not being modified, note.resources should be left unset.
//
// @return
//   The metadata (no contents) for the Note on the server after the update
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
//   </li>
//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
//   </li>
//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
//   </li>
//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
//   </li>
//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
//   </li>
//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
//   </li>
//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
//   </li>
//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
//   </li>
//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
//   </li>
//   <li> LIMIT_REACHED "Note.size" - total note size too large
//   </li>
//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
//   </li>
//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
//   </li>
//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
//   </li>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
//   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
//   </li>
//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
//     of the specified tags had an invalid length or pattern
//   </li>
//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
//     new tags would exceed the maximum number per account
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - note not found, by GUID
//   </li>
//   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Note
func (p *NoteStoreClient) UpdateNote(authenticationToken string, note *Types.Note) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUpdateNote(authenticationToken, note); err != nil {
		return
	}
	return p.recvUpdateNote()
}

func (p *NoteStoreClient) sendUpdateNote(authenticationToken string, note *Types.Note) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateNote", thrift.CALL, p.SeqId)
	args181 := NewUpdateNoteArgs()
	args181.AuthenticationToken = authenticationToken
	args181.Note = note
	err = args181.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateNote() (value *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error183 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error184 error
		error184, err = error183.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error184
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result182 := NewUpdateNoteResult()
	err = result182.Read(iprot)
	iprot.ReadMessageEnd()
	value = result182.Success
	if result182.UserException != nil {
		userException = result182.UserException
	}
	if result182.SystemException != nil {
		systemException = result182.SystemException
	}
	if result182.NotFoundException != nil {
		notFoundException = result182.NotFoundException
	}
	return
}

// Moves the note into the trash. The note may still be undeleted, unless it
// is expunged.  This is equivalent to calling updateNote() after setting
// Note.active = false
//
// @param guid
//   The GUID of the note to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
//          update the note.
//   </li>
// </ul>
//
// @throws EDAMUserException <ul>
//   <li> DATA_CONFLICT "Note.guid" - the note is already deleted
//   </li>
// </ul>
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) DeleteNote(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendDeleteNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvDeleteNote()
}

func (p *NoteStoreClient) sendDeleteNote(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteNote", thrift.CALL, p.SeqId)
	args185 := NewDeleteNoteArgs()
	args185.AuthenticationToken = authenticationToken
	args185.Guid = guid
	err = args185.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvDeleteNote() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error187 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error188 error
		error188, err = error187.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error188
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result186 := NewDeleteNoteResult()
	err = result186.Read(iprot)
	iprot.ReadMessageEnd()
	value = result186.Success
	if result186.UserException != nil {
		userException = result186.UserException
	}
	if result186.SystemException != nil {
		systemException = result186.SystemException
	}
	if result186.NotFoundException != nil {
		notFoundException = result186.NotFoundException
	}
	return
}

// Permanently removes a Note, and all of its Resources,
// from the service.
// <p/>
// NOTE: This function is not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the note to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) ExpungeNote(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendExpungeNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeNote()
}

func (p *NoteStoreClient) sendExpungeNote(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeNote", thrift.CALL, p.SeqId)
	args189 := NewExpungeNoteArgs()
	args189.AuthenticationToken = authenticationToken
	args189.Guid = guid
	err = args189.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeNote() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error191 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error192 error
		error192, err = error191.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error192
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result190 := NewExpungeNoteResult()
	err = result190.Read(iprot)
	iprot.ReadMessageEnd()
	value = result190.Success
	if result190.UserException != nil {
		userException = result190.UserException
	}
	if result190.SystemException != nil {
		systemException = result190.SystemException
	}
	if result190.NotFoundException != nil {
		notFoundException = result190.NotFoundException
	}
	return
}

// Permanently removes a list of Notes, and all of their Resources, from
// the service.  This should be invoked with a small number of Note GUIDs
// (e.g. 100 or less) on each call.  To expunge a larger number of notes,
// call this method multiple times.  This should also be used to reduce the
// number of Notes in a notebook before calling expungeNotebook() or
// in the trash before calling expungeInactiveNotes(), since these calls may
// be prohibitively slow if there are more than a few hundred notes.
// If an exception is thrown for any of the GUIDs, then none of the notes
// will be deleted.  I.e. this call can be treated as an atomic transaction.
// <p/>
// NOTE: This function is not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param noteGuids
//   The list of GUIDs for the Notes to remove.
//
// @return
//   The account's updateCount at the end of this operation
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuids
func (p *NoteStoreClient) ExpungeNotes(authenticationToken string, noteGuids []Types.Guid) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendExpungeNotes(authenticationToken, noteGuids); err != nil {
		return
	}
	return p.recvExpungeNotes()
}

func (p *NoteStoreClient) sendExpungeNotes(authenticationToken string, noteGuids []Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeNotes", thrift.CALL, p.SeqId)
	args193 := NewExpungeNotesArgs()
	args193.AuthenticationToken = authenticationToken
	args193.NoteGuids = noteGuids
	err = args193.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeNotes() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error195 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error196 error
		error196, err = error195.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error196
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result194 := NewExpungeNotesResult()
	err = result194.Read(iprot)
	iprot.ReadMessageEnd()
	value = result194.Success
	if result194.UserException != nil {
		userException = result194.UserException
	}
	if result194.SystemException != nil {
		systemException = result194.SystemException
	}
	if result194.NotFoundException != nil {
		notFoundException = result194.NotFoundException
	}
	return
}

// Permanently removes all of the Notes that are currently marked as
// inactive.  This is equivalent to "emptying the trash", and these Notes
// will be gone permanently.
// <p/>
// This operation may be relatively slow if the account contains a large
// number of inactive Notes.
// <p/>
// NOTE: This function is not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @return
//    The number of notes that were expunged.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ExpungeInactiveNotes(authenticationToken string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendExpungeInactiveNotes(authenticationToken); err != nil {
		return
	}
	return p.recvExpungeInactiveNotes()
}

func (p *NoteStoreClient) sendExpungeInactiveNotes(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeInactiveNotes", thrift.CALL, p.SeqId)
	args197 := NewExpungeInactiveNotesArgs()
	args197.AuthenticationToken = authenticationToken
	err = args197.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeInactiveNotes() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error199 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error200 error
		error200, err = error199.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error200
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result198 := NewExpungeInactiveNotesResult()
	err = result198.Read(iprot)
	iprot.ReadMessageEnd()
	value = result198.Success
	if result198.UserException != nil {
		userException = result198.UserException
	}
	if result198.SystemException != nil {
		systemException = result198.SystemException
	}
	return
}

// Performs a deep copy of the Note with the provided GUID 'noteGuid' into
// the Notebook with the provided GUID 'toNotebookGuid'.
// The caller must be the owner of both the Note and the Notebook.
// This creates a new Note in the destination Notebook with new content and
// Resources that match all of the content and Resources from the original
// Note, but with new GUID identifiers.
// The original Note is not modified by this operation.
// The copied note is considered as an "upload" for the purpose of upload
// transfer limit calculation, so its size is added to the upload count for
// the owner.
//
// @param noteGuid
//   The GUID of the Note to copy.
//
// @param toNotebookGuid
//   The GUID of the Notebook that should receive the new Note.
//
// @return
//   The metadata for the new Note that was created.  This will include the
//   new GUID for this Note (and any copied Resources), but will not include
//   the content body or the binary bodies of any Resources.
//
// @throws EDAMUserException <ul>
//   <li> LIMIT_REACHED "Note" - at max number per account
//   </li>
//   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
//   </li>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
//  - ToNotebookGuid
func (p *NoteStoreClient) CopyNote(authenticationToken string, noteGuid Types.Guid, toNotebookGuid Types.Guid) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendCopyNote(authenticationToken, noteGuid, toNotebookGuid); err != nil {
		return
	}
	return p.recvCopyNote()
}

func (p *NoteStoreClient) sendCopyNote(authenticationToken string, noteGuid Types.Guid, toNotebookGuid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("copyNote", thrift.CALL, p.SeqId)
	args201 := NewCopyNoteArgs()
	args201.AuthenticationToken = authenticationToken
	args201.NoteGuid = noteGuid
	args201.ToNotebookGuid = toNotebookGuid
	err = args201.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCopyNote() (value *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error203 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error204 error
		error204, err = error203.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error204
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result202 := NewCopyNoteResult()
	err = result202.Read(iprot)
	iprot.ReadMessageEnd()
	value = result202.Success
	if result202.UserException != nil {
		userException = result202.UserException
	}
	if result202.SystemException != nil {
		systemException = result202.SystemException
	}
	if result202.NotFoundException != nil {
		notFoundException = result202.NotFoundException
	}
	return
}

// Returns a list of the prior versions of a particular note that are
// saved within the service.  These prior versions are stored to provide a
// recovery from unintentional removal of content from a note. The identifiers
// that are returned by this call can be used with getNoteVersion to retrieve
// the previous note.
// The identifiers will be listed from the most recent versions to the oldest.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
func (p *NoteStoreClient) ListNoteVersions(authenticationToken string, noteGuid Types.Guid) (r []*NoteVersionId, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendListNoteVersions(authenticationToken, noteGuid); err != nil {
		return
	}
	return p.recvListNoteVersions()
}

func (p *NoteStoreClient) sendListNoteVersions(authenticationToken string, noteGuid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listNoteVersions", thrift.CALL, p.SeqId)
	args205 := NewListNoteVersionsArgs()
	args205.AuthenticationToken = authenticationToken
	args205.NoteGuid = noteGuid
	err = args205.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListNoteVersions() (value []*NoteVersionId, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error207 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error208 error
		error208, err = error207.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error208
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result206 := NewListNoteVersionsResult()
	err = result206.Read(iprot)
	iprot.ReadMessageEnd()
	value = result206.Success
	if result206.UserException != nil {
		userException = result206.UserException
	}
	if result206.SystemException != nil {
		systemException = result206.SystemException
	}
	if result206.NotFoundException != nil {
		notFoundException = result206.NotFoundException
	}
	return
}

// This can be used to retrieve a previous version of a Note after it has been
// updated within the service.  The caller must identify the note (via its
// guid) and the version (via the updateSequenceNumber of that version).
// to find a listing of the stored version USNs for a note, call
// listNoteVersions.
// This call is only available for notes in Premium accounts.  (I.e. access
// to past versions of Notes is a Premium-only feature.)
//
// @param noteGuid
//   The GUID of the note to be retrieved.
//
// @param updateSequenceNum
//   The USN of the version of the note that is being retrieved
//
// @param withResourcesData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'data' field's body.
//
// @param withResourcesRecognition
//   If true, any Resource elements will include the binary contents of the
//   'recognition' field's body if recognition data is present.
//
// @param withResourcesAlternateData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'alternateData' fields' body, if an alternate form
//   is present.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
//   <li> PERMISSION_DENIED "updateSequenceNum" -
//     The account isn't permitted to access previous versions of notes.
//     (i.e. this is a Free account.)
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
//   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
//      the corresponding USN.
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
//  - UpdateSequenceNum
//  - WithResourcesData
//  - WithResourcesRecognition
//  - WithResourcesAlternateData
func (p *NoteStoreClient) GetNoteVersion(authenticationToken string, noteGuid Types.Guid, updateSequenceNum int32, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData); err != nil {
		return
	}
	return p.recvGetNoteVersion()
}

func (p *NoteStoreClient) sendGetNoteVersion(authenticationToken string, noteGuid Types.Guid, updateSequenceNum int32, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getNoteVersion", thrift.CALL, p.SeqId)
	args209 := NewGetNoteVersionArgs()
	args209.AuthenticationToken = authenticationToken
	args209.NoteGuid = noteGuid
	args209.UpdateSequenceNum = updateSequenceNum
	args209.WithResourcesData = withResourcesData
	args209.WithResourcesRecognition = withResourcesRecognition
	args209.WithResourcesAlternateData = withResourcesAlternateData
	err = args209.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetNoteVersion() (value *Types.Note, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error211 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error212 error
		error212, err = error211.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error212
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result210 := NewGetNoteVersionResult()
	err = result210.Read(iprot)
	iprot.ReadMessageEnd()
	value = result210.Success
	if result210.UserException != nil {
		userException = result210.UserException
	}
	if result210.SystemException != nil {
		systemException = result210.SystemException
	}
	if result210.NotFoundException != nil {
		notFoundException = result210.NotFoundException
	}
	return
}

// Returns the current state of the resource in the service with the
// provided GUID.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).  Only the
// keys for the applicationData will be returned.
//
// @param guid
//   The GUID of the resource to be retrieved.
//
// @param withData
//   If true, the Resource will include the binary contents of the
//   'data' field's body.
//
// @param withRecognition
//   If true, the Resource will include the binary contents of the
//   'recognition' field's body if recognition data is present.
//
// @param withAttributes
//   If true, the Resource will include the attributes
//
// @param withAlternateData
//   If true, the Resource will include the binary contents of the
//   'alternateData' field's body, if an alternate form is present.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - WithData
//  - WithRecognition
//  - WithAttributes
//  - WithAlternateData
func (p *NoteStoreClient) GetResource(authenticationToken string, guid Types.Guid, withData bool, withRecognition bool, withAttributes bool, withAlternateData bool) (r *Types.Resource, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData); err != nil {
		return
	}
	return p.recvGetResource()
}

func (p *NoteStoreClient) sendGetResource(authenticationToken string, guid Types.Guid, withData bool, withRecognition bool, withAttributes bool, withAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResource", thrift.CALL, p.SeqId)
	args213 := NewGetResourceArgs()
	args213.AuthenticationToken = authenticationToken
	args213.Guid = guid
	args213.WithData = withData
	args213.WithRecognition = withRecognition
	args213.WithAttributes = withAttributes
	args213.WithAlternateData = withAlternateData
	err = args213.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResource() (value *Types.Resource, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error215 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error216 error
		error216, err = error215.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error216
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result214 := NewGetResourceResult()
	err = result214.Read(iprot)
	iprot.ReadMessageEnd()
	value = result214.Success
	if result214.UserException != nil {
		userException = result214.UserException
	}
	if result214.SystemException != nil {
		systemException = result214.SystemException
	}
	if result214.NotFoundException != nil {
		notFoundException = result214.NotFoundException
	}
	return
}

// Get all of the application data for the Resource identified by GUID,
// with values returned within the LazyMap fullMap field.
// If there are no applicationData entries, then a LazyMap
// with an empty fullMap will be returned. If your application
// only needs to fetch its own applicationData entry, use
// getResourceApplicationDataEntry instead.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetResourceApplicationData(authenticationToken string, guid Types.Guid) (r *Types.LazyMap, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceApplicationData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceApplicationData()
}

func (p *NoteStoreClient) sendGetResourceApplicationData(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceApplicationData", thrift.CALL, p.SeqId)
	args217 := NewGetResourceApplicationDataArgs()
	args217.AuthenticationToken = authenticationToken
	args217.Guid = guid
	err = args217.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceApplicationData() (value *Types.LazyMap, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error219 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error220 error
		error220, err = error219.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error220
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result218 := NewGetResourceApplicationDataResult()
	err = result218.Read(iprot)
	iprot.ReadMessageEnd()
	value = result218.Success
	if result218.UserException != nil {
		userException = result218.UserException
	}
	if result218.SystemException != nil {
		systemException = result218.SystemException
	}
	if result218.NotFoundException != nil {
		notFoundException = result218.NotFoundException
	}
	return
}

// Get the value of a single entry in the applicationData map
// for the Resource identified by GUID.
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - Resource not found, by GUID</li>
//   <li> "ResourceAttributes.applicationData.key" - Resource not found, by key</li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - Key
func (p *NoteStoreClient) GetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvGetResourceApplicationDataEntry()
}

func (p *NoteStoreClient) sendGetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.CALL, p.SeqId)
	args221 := NewGetResourceApplicationDataEntryArgs()
	args221.AuthenticationToken = authenticationToken
	args221.Guid = guid
	args221.Key = key
	err = args221.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceApplicationDataEntry() (value string, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error223 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error224 error
		error224, err = error223.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error224
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result222 := NewGetResourceApplicationDataEntryResult()
	err = result222.Read(iprot)
	iprot.ReadMessageEnd()
	value = result222.Success
	if result222.UserException != nil {
		userException = result222.UserException
	}
	if result222.SystemException != nil {
		systemException = result222.SystemException
	}
	if result222.NotFoundException != nil {
		notFoundException = result222.NotFoundException
	}
	return
}

// Update, or create, an entry in the applicationData map for
// the Resource identified by guid.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - Key
//  - Value
func (p *NoteStoreClient) SetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string, value string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendSetResourceApplicationDataEntry(authenticationToken, guid, key, value); err != nil {
		return
	}
	return p.recvSetResourceApplicationDataEntry()
}

func (p *NoteStoreClient) sendSetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.CALL, p.SeqId)
	args225 := NewSetResourceApplicationDataEntryArgs()
	args225.AuthenticationToken = authenticationToken
	args225.Guid = guid
	args225.Key = key
	args225.Value = value
	err = args225.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvSetResourceApplicationDataEntry() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error227 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error228 error
		error228, err = error227.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error228
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result226 := NewSetResourceApplicationDataEntryResult()
	err = result226.Read(iprot)
	iprot.ReadMessageEnd()
	value = result226.Success
	if result226.UserException != nil {
		userException = result226.UserException
	}
	if result226.SystemException != nil {
		systemException = result226.SystemException
	}
	if result226.NotFoundException != nil {
		notFoundException = result226.NotFoundException
	}
	return
}

// Remove an entry identified by 'key' from the applicationData map for
// the Resource identified by 'guid'.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
//  - Key
func (p *NoteStoreClient) UnsetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUnsetResourceApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvUnsetResourceApplicationDataEntry()
}

func (p *NoteStoreClient) sendUnsetResourceApplicationDataEntry(authenticationToken string, guid Types.Guid, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.CALL, p.SeqId)
	args229 := NewUnsetResourceApplicationDataEntryArgs()
	args229.AuthenticationToken = authenticationToken
	args229.Guid = guid
	args229.Key = key
	err = args229.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUnsetResourceApplicationDataEntry() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error231 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error232 error
		error232, err = error231.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error232
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result230 := NewUnsetResourceApplicationDataEntryResult()
	err = result230.Read(iprot)
	iprot.ReadMessageEnd()
	value = result230.Success
	if result230.UserException != nil {
		userException = result230.UserException
	}
	if result230.SystemException != nil {
		systemException = result230.SystemException
	}
	if result230.NotFoundException != nil {
		notFoundException = result230.NotFoundException
	}
	return
}

// Submit a set of changes to a resource to the service.  This can be used
// to update the meta-data about the resource, but cannot be used to change
// the binary contents of the resource (including the length and hash).  These
// cannot be changed directly without creating a new resource and removing the
// old one via updateNote.
//
// @param resource
//   A Resource object containing the desired fields to be populated on
//   the service.  The service will attempt to update the resource with the
//   following fields from the client:
//   <ul>
//      <li>guid:  must be provided to identify the resource
//      </li>
//      <li>mime
//      </li>
//      <li>width
//      </li>
//      <li>height
//      </li>
//      <li>duration
//      </li>
//      <li>attributes:  optional.  if present, the set of attributes will
//           be replaced.
//      </li>
//   </ul>
//
// @return
//   The Update Sequence Number of the resource after the changes have been
//   applied.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
//   </li>
//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
//   </li>
//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Resource
func (p *NoteStoreClient) UpdateResource(authenticationToken string, resource *Types.Resource) (r int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendUpdateResource(authenticationToken, resource); err != nil {
		return
	}
	return p.recvUpdateResource()
}

func (p *NoteStoreClient) sendUpdateResource(authenticationToken string, resource *Types.Resource) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateResource", thrift.CALL, p.SeqId)
	args233 := NewUpdateResourceArgs()
	args233.AuthenticationToken = authenticationToken
	args233.Resource = resource
	err = args233.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateResource() (value int32, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error235 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error236 error
		error236, err = error235.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error236
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result234 := NewUpdateResourceResult()
	err = result234.Read(iprot)
	iprot.ReadMessageEnd()
	value = result234.Success
	if result234.UserException != nil {
		userException = result234.UserException
	}
	if result234.SystemException != nil {
		systemException = result234.SystemException
	}
	if result234.NotFoundException != nil {
		notFoundException = result234.NotFoundException
	}
	return
}

// Returns binary data of the resource with the provided GUID.  For
// example, if this were an image resource, this would contain the
// raw bits of the image.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetResourceData(authenticationToken string, guid Types.Guid) (r []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceData()
}

func (p *NoteStoreClient) sendGetResourceData(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceData", thrift.CALL, p.SeqId)
	args237 := NewGetResourceDataArgs()
	args237.AuthenticationToken = authenticationToken
	args237.Guid = guid
	err = args237.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceData() (value []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error239 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error240 error
		error240, err = error239.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error240
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result238 := NewGetResourceDataResult()
	err = result238.Read(iprot)
	iprot.ReadMessageEnd()
	value = result238.Success
	if result238.UserException != nil {
		userException = result238.UserException
	}
	if result238.SystemException != nil {
		systemException = result238.SystemException
	}
	if result238.NotFoundException != nil {
		notFoundException = result238.NotFoundException
	}
	return
}

// Returns the current state of a resource, referenced by containing
// note GUID and resource content hash.
//
// @param noteGuid
//   The GUID of the note that holds the resource to be retrieved.
//
// @param contentHash
//   The MD5 checksum of the resource within that note. Note that
//   this is the binary checksum, for example from Resource.data.bodyHash,
//   and not the hex-encoded checksum that is used within an en-media
//   tag in a note body.
//
// @param withData
//   If true, the Resource will include the binary contents of the
//   'data' field's body.
//
// @param withRecognition
//   If true, the Resource will include the binary contents of the
//   'recognition' field's body.
//
// @param withAlternateData
//   If true, the Resource will include the binary contents of the
//   'alternateData' field's body, if an alternate form is present.
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
//   </li>
//   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note" - not found, by guid
//   </li>
//   <li> "Resource" - not found, by hash
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
//  - ContentHash
//  - WithData
//  - WithRecognition
//  - WithAlternateData
func (p *NoteStoreClient) GetResourceByHash(authenticationToken string, noteGuid Types.Guid, contentHash []byte, withData bool, withRecognition bool, withAlternateData bool) (r *Types.Resource, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData); err != nil {
		return
	}
	return p.recvGetResourceByHash()
}

func (p *NoteStoreClient) sendGetResourceByHash(authenticationToken string, noteGuid Types.Guid, contentHash []byte, withData bool, withRecognition bool, withAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceByHash", thrift.CALL, p.SeqId)
	args241 := NewGetResourceByHashArgs()
	args241.AuthenticationToken = authenticationToken
	args241.NoteGuid = noteGuid
	args241.ContentHash = contentHash
	args241.WithData = withData
	args241.WithRecognition = withRecognition
	args241.WithAlternateData = withAlternateData
	err = args241.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceByHash() (value *Types.Resource, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error243 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error244 error
		error244, err = error243.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error244
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result242 := NewGetResourceByHashResult()
	err = result242.Read(iprot)
	iprot.ReadMessageEnd()
	value = result242.Success
	if result242.UserException != nil {
		userException = result242.UserException
	}
	if result242.SystemException != nil {
		systemException = result242.SystemException
	}
	if result242.NotFoundException != nil {
		notFoundException = result242.NotFoundException
	}
	return
}

// Returns the binary contents of the recognition index for the resource
// with the provided GUID.  If the caller asks about a resource that has
// no recognition data, this will throw EDAMNotFoundException.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource whose recognition data should be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
//   <li> "Resource.recognition" - resource has no recognition
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetResourceRecognition(authenticationToken string, guid Types.Guid) (r []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceRecognition(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceRecognition()
}

func (p *NoteStoreClient) sendGetResourceRecognition(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceRecognition", thrift.CALL, p.SeqId)
	args245 := NewGetResourceRecognitionArgs()
	args245.AuthenticationToken = authenticationToken
	args245.Guid = guid
	err = args245.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceRecognition() (value []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error247 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error248 error
		error248, err = error247.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error248
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result246 := NewGetResourceRecognitionResult()
	err = result246.Read(iprot)
	iprot.ReadMessageEnd()
	value = result246.Success
	if result246.UserException != nil {
		userException = result246.UserException
	}
	if result246.SystemException != nil {
		systemException = result246.SystemException
	}
	if result246.NotFoundException != nil {
		notFoundException = result246.NotFoundException
	}
	return
}

// If the Resource with the provided GUID has an alternate data representation
// (indicated via the Resource.alternateData field), then this request can
// be used to retrieve the binary contents of that alternate data file.
// If the caller asks about a resource that has no alternate data form, this
// will throw EDAMNotFoundException.
//
// @param guid
//    The GUID of the resource whose recognition data should be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
//   <li> "Resource.alternateData" - resource has no recognition
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetResourceAlternateData(authenticationToken string, guid Types.Guid) (r []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceAlternateData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceAlternateData()
}

func (p *NoteStoreClient) sendGetResourceAlternateData(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceAlternateData", thrift.CALL, p.SeqId)
	args249 := NewGetResourceAlternateDataArgs()
	args249.AuthenticationToken = authenticationToken
	args249.Guid = guid
	err = args249.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceAlternateData() (value []byte, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error251 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error252 error
		error252, err = error251.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error252
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result250 := NewGetResourceAlternateDataResult()
	err = result250.Read(iprot)
	iprot.ReadMessageEnd()
	value = result250.Success
	if result250.UserException != nil {
		userException = result250.UserException
	}
	if result250.SystemException != nil {
		systemException = result250.SystemException
	}
	if result250.NotFoundException != nil {
		notFoundException = result250.NotFoundException
	}
	return
}

// Returns the set of attributes for the Resource with the provided GUID.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource whose attributes should be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) GetResourceAttributes(authenticationToken string, guid Types.Guid) (r *Types.ResourceAttributes, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetResourceAttributes(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceAttributes()
}

func (p *NoteStoreClient) sendGetResourceAttributes(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getResourceAttributes", thrift.CALL, p.SeqId)
	args253 := NewGetResourceAttributesArgs()
	args253.AuthenticationToken = authenticationToken
	args253.Guid = guid
	err = args253.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetResourceAttributes() (value *Types.ResourceAttributes, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error255 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error256 error
		error256, err = error255.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error256
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result254 := NewGetResourceAttributesResult()
	err = result254.Read(iprot)
	iprot.ReadMessageEnd()
	value = result254.Success
	if result254.UserException != nil {
		userException = result254.UserException
	}
	if result254.SystemException != nil {
		systemException = result254.SystemException
	}
	if result254.NotFoundException != nil {
		notFoundException = result254.NotFoundException
	}
	return
}

// <p>
// Looks for a user account with the provided userId on this NoteStore
// shard and determines whether that account contains a public notebook
// with the given URI.  If the account is not found, or no public notebook
// exists with this URI, this will throw an EDAMNotFoundException,
// otherwise this will return the information for that Notebook.
// </p>
// <p>
// If a notebook is visible on the web with a full URL like
// http://www.evernote.com/pub/sethdemo/api
// Then 'sethdemo' is the username that can be used to look up the userId,
// and 'api' is the publicUri.
// </p>
//
// @param userId
//    The numeric identifier for the user who owns the public notebook.
//    To find this value based on a username string, you can invoke
//    UserStore.getPublicUserInfo
//
// @param publicUri
//    The uri string for the public notebook, from Notebook.publishing.uri.
//
// @throws EDAMNotFoundException <ul>
//   <li>"Publishing.uri" - not found, by URI</li>
// </ul>
//
// @throws EDAMSystemException <ul>
//   <li> TAKEN_DOWN "PublicNotebook" - The specified public notebook is
//     taken down (for all requesters).</li>
//   <li> TAKEN_DOWN "Country" - The specified public notebook is taken
//     down for the requester because of an IP-based country lookup.</li>
// </ul>
//
// Parameters:
//  - UserId
//  - PublicUri
func (p *NoteStoreClient) GetPublicNotebook(userId Types.UserID, publicUri string) (r *Types.Notebook, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendGetPublicNotebook(userId, publicUri); err != nil {
		return
	}
	return p.recvGetPublicNotebook()
}

func (p *NoteStoreClient) sendGetPublicNotebook(userId Types.UserID, publicUri string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getPublicNotebook", thrift.CALL, p.SeqId)
	args257 := NewGetPublicNotebookArgs()
	args257.UserId = userId
	args257.PublicUri = publicUri
	err = args257.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetPublicNotebook() (value *Types.Notebook, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error259 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error260 error
		error260, err = error259.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error260
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result258 := NewGetPublicNotebookResult()
	err = result258.Read(iprot)
	iprot.ReadMessageEnd()
	value = result258.Success
	if result258.SystemException != nil {
		systemException = result258.SystemException
	}
	if result258.NotFoundException != nil {
		notFoundException = result258.NotFoundException
	}
	return
}

// Used to construct a shared notebook object. The constructed notebook will
// contain a "share key" which serve as a unique identifer and access token
// for a user to access the notebook of the shared notebook owner.
//
// @param sharedNotebook
//   A shared notebook object populated with the email address of the share
//   recipient, the notebook guid and the access permissions. All other
//   attributes of the shared object are ignored. The SharedNotebook.allowPreview
//   field must be explicitly set with either a true or false value.
//
// @return
//   The fully populated SharedNotebook object including the server assigned
//   share id and shareKey which can both be used to uniquely identify the
//   SharedNotebook.
//
// @throws EDAMUserException <ul>
//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid</li>
//   <li>BAD_DATA_FORMAT "requireLogin" - if the SharedNotebook.allowPreview field was
//       not set, and the SharedNotebook.requireLogin was also not set or was set to
//       false.</li>
//   <li>PERMISSION_DENIED "SharedNotebook.recipientSettings" - if
//       recipientSettings is set in the sharedNotebook.  Only the recipient
//       can set these values via the setSharedNotebookRecipientSettings
//       method.
//   </li>
//   </ul>
// @throws EDAMNotFoundException <ul>
//   <li>Notebook.guid - if the notebookGuid is not a valid GUID for the user.
//   </li>
//   </ul>
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebook
func (p *NoteStoreClient) CreateSharedNotebook(authenticationToken string, sharedNotebook *Types.SharedNotebook) (r *Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendCreateSharedNotebook(authenticationToken, sharedNotebook); err != nil {
		return
	}
	return p.recvCreateSharedNotebook()
}

func (p *NoteStoreClient) sendCreateSharedNotebook(authenticationToken string, sharedNotebook *Types.SharedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createSharedNotebook", thrift.CALL, p.SeqId)
	args261 := NewCreateSharedNotebookArgs()
	args261.AuthenticationToken = authenticationToken
	args261.SharedNotebook = sharedNotebook
	err = args261.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCreateSharedNotebook() (value *Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error263 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error264 error
		error264, err = error263.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error264
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result262 := NewCreateSharedNotebookResult()
	err = result262.Read(iprot)
	iprot.ReadMessageEnd()
	value = result262.Success
	if result262.UserException != nil {
		userException = result262.UserException
	}
	if result262.NotFoundException != nil {
		notFoundException = result262.NotFoundException
	}
	if result262.SystemException != nil {
		systemException = result262.SystemException
	}
	return
}

// Update a SharedNotebook object.
//
// @param authenticationToken
//   Must be an authentication token from the owner or a shared notebook
//   authentication token or business authentication token with sufficient
//   permissions to change invitations for a notebook.
//
// @param sharedNotebook
//  The SharedNotebook object containing the requested changes.
//  The "id" of the shared notebook must be set to allow the service
//  to identify the SharedNotebook to be updated. In addition, you MUST set
//  the email, permission, and allowPreview fields to the desired values.
//  All other fields will be ignored if set.
//
// @return
//  The Update Serial Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li>UNSUPPORTED_OPERATION "updateSharedNotebook" - if this service instance does not support shared notebooks.</li>
//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid.</li>
//   <li>DATA_REQUIRED "SharedNotebook.id" - if the id field was not set.</li>
//   <li>DATA_REQUIRED "SharedNotebook.privilege" - if the privilege field was not set.</li>
//   <li>DATA_REQUIRED "SharedNotebook.allowPreview" - if the allowPreview field was not set.</li>
//   </ul>
// @throws EDAMNotFoundException <ul>
//   <li>SharedNotebook.id - if no shared notebook with the specified ID was found.
//   </ul>
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebook
func (p *NoteStoreClient) UpdateSharedNotebook(authenticationToken string, sharedNotebook *Types.SharedNotebook) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendUpdateSharedNotebook(authenticationToken, sharedNotebook); err != nil {
		return
	}
	return p.recvUpdateSharedNotebook()
}

func (p *NoteStoreClient) sendUpdateSharedNotebook(authenticationToken string, sharedNotebook *Types.SharedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateSharedNotebook", thrift.CALL, p.SeqId)
	args265 := NewUpdateSharedNotebookArgs()
	args265.AuthenticationToken = authenticationToken
	args265.SharedNotebook = sharedNotebook
	err = args265.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateSharedNotebook() (value int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error267 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error268 error
		error268, err = error267.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error268
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result266 := NewUpdateSharedNotebookResult()
	err = result266.Read(iprot)
	iprot.ReadMessageEnd()
	value = result266.Success
	if result266.UserException != nil {
		userException = result266.UserException
	}
	if result266.NotFoundException != nil {
		notFoundException = result266.NotFoundException
	}
	if result266.SystemException != nil {
		systemException = result266.SystemException
	}
	return
}

// Set values for the recipient settings associated with a shared notebook.  Having
// update rights to the shared notebook record itself has no effect on this call;
// only the recipient of the shared notebook can can the recipient settings.
//
// If you do <i>not</i> wish to, or cannot, change one of the reminderNotifyEmail or
// reminderNotifyInApp fields, you must leave that field unset in recipientSettings.
// This method will skip that field for updates and leave the existing state as
// it is.
//
// @return The update sequence number of the account to which the shared notebook
//   belongs, which is the account from which we are sharing a notebook.
//
// @throws EDAMNotFoundException "sharedNotebookId" - Thrown if the service does not
//   have a shared notebook record for the sharedNotebookId on the given shard.  If you
//   receive this exception, it is probable that the shared notebook record has
//   been revoked or expired, or that you accessed the wrong shard.
//
// @throws EDAMUserException <ul>
//   <li>PEMISSION_DENIED "authenticationToken" - If you do not have permission to set
//       the recipient settings for the shared notebook.  Only the recipient has
//       permission to do this.
//   <li>DATA_CONFLICT "recipientSettings.reminderNotifyEmail" - Setting whether
//       or not you want to receive reminder e-mail notifications is possible on
//       a business notebook in the business to which the user belongs.  All
//       others can safely unset the reminderNotifyEmail field from the
//       recipientSettings parameter.
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebookId
//  - RecipientSettings
func (p *NoteStoreClient) SetSharedNotebookRecipientSettings(authenticationToken string, sharedNotebookId int64, recipientSettings *Types.SharedNotebookRecipientSettings) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendSetSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings); err != nil {
		return
	}
	return p.recvSetSharedNotebookRecipientSettings()
}

func (p *NoteStoreClient) sendSetSharedNotebookRecipientSettings(authenticationToken string, sharedNotebookId int64, recipientSettings *Types.SharedNotebookRecipientSettings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.CALL, p.SeqId)
	args269 := NewSetSharedNotebookRecipientSettingsArgs()
	args269.AuthenticationToken = authenticationToken
	args269.SharedNotebookId = sharedNotebookId
	args269.RecipientSettings = recipientSettings
	err = args269.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvSetSharedNotebookRecipientSettings() (value int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error271 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error272 error
		error272, err = error271.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error272
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result270 := NewSetSharedNotebookRecipientSettingsResult()
	err = result270.Read(iprot)
	iprot.ReadMessageEnd()
	value = result270.Success
	if result270.UserException != nil {
		userException = result270.UserException
	}
	if result270.NotFoundException != nil {
		notFoundException = result270.NotFoundException
	}
	if result270.SystemException != nil {
		systemException = result270.SystemException
	}
	return
}

// Send a reminder message to some or all of the email addresses that a notebook has been
// shared with. The message includes the current link to view the notebook.
// @param authenticationToken
//   The auth token of the user with permissions to share the notebook
// @param notebookGuid
//   The guid of the shared notebook
// @param messageText
//  User provided text to include in the email
// @param recipients
//  The email addresses of the recipients. If this list is empty then all of the
//  users that the notebook has been shared with are emailed.
//  If an email address doesn't correspond to share invite members then that address
//  is ignored.
// @return
//  The number of messages sent
// @throws EDAMUserException <ul>
//   <li> LIMIT_REACHED "(recipients)" -
//     The email can't be sent because this would exceed the user's daily
//     email limit.
//   </li>
//   <li> PERMISSION_DENIED "Notebook.guid" - The user doesn't have permission to
//     send a message for the specified notebook.
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NotebookGuid
//  - MessageText
//  - Recipients
func (p *NoteStoreClient) SendMessageToSharedNotebookMembers(authenticationToken string, notebookGuid Types.Guid, messageText string, recipients []string) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendSendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients); err != nil {
		return
	}
	return p.recvSendMessageToSharedNotebookMembers()
}

func (p *NoteStoreClient) sendSendMessageToSharedNotebookMembers(authenticationToken string, notebookGuid Types.Guid, messageText string, recipients []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.CALL, p.SeqId)
	args273 := NewSendMessageToSharedNotebookMembersArgs()
	args273.AuthenticationToken = authenticationToken
	args273.NotebookGuid = notebookGuid
	args273.MessageText = messageText
	args273.Recipients = recipients
	err = args273.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvSendMessageToSharedNotebookMembers() (value int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error275 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error276 error
		error276, err = error275.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error276
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result274 := NewSendMessageToSharedNotebookMembersResult()
	err = result274.Read(iprot)
	iprot.ReadMessageEnd()
	value = result274.Success
	if result274.UserException != nil {
		userException = result274.UserException
	}
	if result274.NotFoundException != nil {
		notFoundException = result274.NotFoundException
	}
	if result274.SystemException != nil {
		systemException = result274.SystemException
	}
	return
}

// Lists the collection of shared notebooks for all notebooks in the
// users account.
//
// @return
//  The list of all SharedNotebooks for the user
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListSharedNotebooks(authenticationToken string) (r []*Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendListSharedNotebooks(authenticationToken); err != nil {
		return
	}
	return p.recvListSharedNotebooks()
}

func (p *NoteStoreClient) sendListSharedNotebooks(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listSharedNotebooks", thrift.CALL, p.SeqId)
	args277 := NewListSharedNotebooksArgs()
	args277.AuthenticationToken = authenticationToken
	err = args277.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListSharedNotebooks() (value []*Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error279 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error280 error
		error280, err = error279.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error280
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result278 := NewListSharedNotebooksResult()
	err = result278.Read(iprot)
	iprot.ReadMessageEnd()
	value = result278.Success
	if result278.UserException != nil {
		userException = result278.UserException
	}
	if result278.NotFoundException != nil {
		notFoundException = result278.NotFoundException
	}
	if result278.SystemException != nil {
		systemException = result278.SystemException
	}
	return
}

// Expunges the SharedNotebooks in the user's account using the
// SharedNotebook.id as the identifier.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param
//   sharedNotebookIds - a list of ShardNotebook.id longs identifying the
//       objects to delete permanently.
//
// @return
//   The account's update sequence number.
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebookIds
func (p *NoteStoreClient) ExpungeSharedNotebooks(authenticationToken string, sharedNotebookIds []int64) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendExpungeSharedNotebooks(authenticationToken, sharedNotebookIds); err != nil {
		return
	}
	return p.recvExpungeSharedNotebooks()
}

func (p *NoteStoreClient) sendExpungeSharedNotebooks(authenticationToken string, sharedNotebookIds []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.CALL, p.SeqId)
	args281 := NewExpungeSharedNotebooksArgs()
	args281.AuthenticationToken = authenticationToken
	args281.SharedNotebookIds = sharedNotebookIds
	err = args281.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeSharedNotebooks() (value int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error283 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error284 error
		error284, err = error283.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error284
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result282 := NewExpungeSharedNotebooksResult()
	err = result282.Read(iprot)
	iprot.ReadMessageEnd()
	value = result282.Success
	if result282.UserException != nil {
		userException = result282.UserException
	}
	if result282.NotFoundException != nil {
		notFoundException = result282.NotFoundException
	}
	if result282.SystemException != nil {
		systemException = result282.SystemException
	}
	return
}

// Asks the service to make a linked notebook with the provided name, username
// of the owner and identifiers provided. A linked notebook can be either a
// link to a public notebook or to a private shared notebook.
//
// @param linkedNotebook
//   The desired fields for the linked notebook must be provided on this
//   object.  The name of the linked notebook must be set. Either a username
//   uri or a shard id and share key must be provided otherwise a
//   EDAMUserException is thrown.
//
// @return
//   The newly created LinkedNotebook.  The server-side id will be
//   saved in this object's 'id' field.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
//   </li>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
//     if public notebook set but bad uri
//   </li>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.shareKey" -
//     if private notebook set but bad shareKey
//   </li>
//   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
//     if private notebook but shard id not provided
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
func (p *NoteStoreClient) CreateLinkedNotebook(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (r *Types.LinkedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendCreateLinkedNotebook(authenticationToken, linkedNotebook); err != nil {
		return
	}
	return p.recvCreateLinkedNotebook()
}

func (p *NoteStoreClient) sendCreateLinkedNotebook(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createLinkedNotebook", thrift.CALL, p.SeqId)
	args285 := NewCreateLinkedNotebookArgs()
	args285.AuthenticationToken = authenticationToken
	args285.LinkedNotebook = linkedNotebook
	err = args285.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvCreateLinkedNotebook() (value *Types.LinkedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error287 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error288 error
		error288, err = error287.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error288
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result286 := NewCreateLinkedNotebookResult()
	err = result286.Read(iprot)
	iprot.ReadMessageEnd()
	value = result286.Success
	if result286.UserException != nil {
		userException = result286.UserException
	}
	if result286.NotFoundException != nil {
		notFoundException = result286.NotFoundException
	}
	if result286.SystemException != nil {
		systemException = result286.SystemException
	}
	return
}

// @param linkedNotebook
//   Updates the name of a linked notebook.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
func (p *NoteStoreClient) UpdateLinkedNotebook(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendUpdateLinkedNotebook(authenticationToken, linkedNotebook); err != nil {
		return
	}
	return p.recvUpdateLinkedNotebook()
}

func (p *NoteStoreClient) sendUpdateLinkedNotebook(authenticationToken string, linkedNotebook *Types.LinkedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("updateLinkedNotebook", thrift.CALL, p.SeqId)
	args289 := NewUpdateLinkedNotebookArgs()
	args289.AuthenticationToken = authenticationToken
	args289.LinkedNotebook = linkedNotebook
	err = args289.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvUpdateLinkedNotebook() (value int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error291 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error292 error
		error292, err = error291.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error292
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result290 := NewUpdateLinkedNotebookResult()
	err = result290.Read(iprot)
	iprot.ReadMessageEnd()
	value = result290.Success
	if result290.UserException != nil {
		userException = result290.UserException
	}
	if result290.NotFoundException != nil {
		notFoundException = result290.NotFoundException
	}
	if result290.SystemException != nil {
		systemException = result290.SystemException
	}
	return
}

// Returns a list of linked notebooks
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListLinkedNotebooks(authenticationToken string) (r []*Types.LinkedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendListLinkedNotebooks(authenticationToken); err != nil {
		return
	}
	return p.recvListLinkedNotebooks()
}

func (p *NoteStoreClient) sendListLinkedNotebooks(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("listLinkedNotebooks", thrift.CALL, p.SeqId)
	args293 := NewListLinkedNotebooksArgs()
	args293.AuthenticationToken = authenticationToken
	err = args293.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvListLinkedNotebooks() (value []*Types.LinkedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error295 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error296 error
		error296, err = error295.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error296
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result294 := NewListLinkedNotebooksResult()
	err = result294.Read(iprot)
	iprot.ReadMessageEnd()
	value = result294.Success
	if result294.UserException != nil {
		userException = result294.UserException
	}
	if result294.NotFoundException != nil {
		notFoundException = result294.NotFoundException
	}
	if result294.SystemException != nil {
		systemException = result294.SystemException
	}
	return
}

// Permanently expunges the linked notebook from the account.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
//   from the account.
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) ExpungeLinkedNotebook(authenticationToken string, guid Types.Guid) (r int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendExpungeLinkedNotebook(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeLinkedNotebook()
}

func (p *NoteStoreClient) sendExpungeLinkedNotebook(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.CALL, p.SeqId)
	args297 := NewExpungeLinkedNotebookArgs()
	args297.AuthenticationToken = authenticationToken
	args297.Guid = guid
	err = args297.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvExpungeLinkedNotebook() (value int32, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error299 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error300 error
		error300, err = error299.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error300
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result298 := NewExpungeLinkedNotebookResult()
	err = result298.Read(iprot)
	iprot.ReadMessageEnd()
	value = result298.Success
	if result298.UserException != nil {
		userException = result298.UserException
	}
	if result298.NotFoundException != nil {
		notFoundException = result298.NotFoundException
	}
	if result298.SystemException != nil {
		systemException = result298.SystemException
	}
	return
}

// Asks the service to produce an authentication token that can be used to
// access the contents of a shared notebook from someone else's account.
// This authenticationToken can be used with the various other NoteStore
// calls to find and retrieve notes, and if the permissions in the shared
// notebook are sufficient, to make changes to the contents of the notebook.
//
// @param shareKey
//   The 'shareKey' identifier from the SharedNotebook that was granted to
//   some recipient.  This string internally encodes the notebook identifier
//   and a security signature.
//
// @param authenticationToken
//   If a non-empty string is provided, this is the full user-based
//   authentication token that identifies the user who is currently logged in
//   and trying to access the shared notebook.  This may be required if the
//   notebook was created with 'requireLogin'.
//   If this string is empty, the service will attempt to authenticate to the
//   shared notebook without any logged in user.
//
// @throws EDAMSystemException <ul>
//   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string
//   </li>
//   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SharedNotebook.id" - the shared notebook no longer exists
//   </li>
// </ul>
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
//          no valid authentication token was provided.
//   </li>
//   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
//          and another username has already been bound to this notebook.
//   </li>
// </ul>
//
// Parameters:
//  - ShareKey
//  - AuthenticationToken
func (p *NoteStoreClient) AuthenticateToSharedNotebook(shareKey string, authenticationToken string) (r *UserStore.AuthenticationResult, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendAuthenticateToSharedNotebook(shareKey, authenticationToken); err != nil {
		return
	}
	return p.recvAuthenticateToSharedNotebook()
}

func (p *NoteStoreClient) sendAuthenticateToSharedNotebook(shareKey string, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.CALL, p.SeqId)
	args301 := NewAuthenticateToSharedNotebookArgs()
	args301.ShareKey = shareKey
	args301.AuthenticationToken = authenticationToken
	err = args301.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvAuthenticateToSharedNotebook() (value *UserStore.AuthenticationResult, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error303 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error304 error
		error304, err = error303.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error304
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result302 := NewAuthenticateToSharedNotebookResult()
	err = result302.Read(iprot)
	iprot.ReadMessageEnd()
	value = result302.Success
	if result302.UserException != nil {
		userException = result302.UserException
	}
	if result302.NotFoundException != nil {
		notFoundException = result302.NotFoundException
	}
	if result302.SystemException != nil {
		systemException = result302.SystemException
	}
	return
}

// This function is used to retrieve extended information about a shared
// notebook by a guest who has already authenticated to access that notebook.
// This requires an 'authenticationToken' parameter which should be the
// resut of a call to authenticateToSharedNotebook(...).
// I.e. this is the token that gives access to the particular shared notebook
// in someone else's account -- it's not the authenticationToken for the
// owner of the notebook itself.
//
// @param authenticationToken
//   Should be the authentication token retrieved from the reply of
//   authenticateToSharedNotebook(), proving access to a particular shared
//   notebook.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "authenticationToken" -
//          authentication token doesn't correspond to a valid shared notebook
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SharedNotebook.id" - the shared notebook no longer exists
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) GetSharedNotebookByAuth(authenticationToken string) (r *Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendGetSharedNotebookByAuth(authenticationToken); err != nil {
		return
	}
	return p.recvGetSharedNotebookByAuth()
}

func (p *NoteStoreClient) sendGetSharedNotebookByAuth(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.CALL, p.SeqId)
	args305 := NewGetSharedNotebookByAuthArgs()
	args305.AuthenticationToken = authenticationToken
	err = args305.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvGetSharedNotebookByAuth() (value *Types.SharedNotebook, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error307 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error308 error
		error308, err = error307.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error308
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result306 := NewGetSharedNotebookByAuthResult()
	err = result306.Read(iprot)
	iprot.ReadMessageEnd()
	value = result306.Success
	if result306.UserException != nil {
		userException = result306.UserException
	}
	if result306.NotFoundException != nil {
		notFoundException = result306.NotFoundException
	}
	if result306.SystemException != nil {
		systemException = result306.SystemException
	}
	return
}

// Attempts to send a single note to one or more email recipients.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param authenticationToken
//    The note will be sent as the user logged in via this token, using that
//    user's registered email address.  If the authenticated user doesn't
//    have permission to read that note, the emailing will fail.
//
// @param parameters
//    The note must be specified either by GUID (in which case it will be
//    sent using the existing data in the service), or else the full Note
//    must be passed to this call.  This also specifies the additional
//    email fields that will be used in the email.
//
// @throws EDAMUserException <ul>
//   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
//     The email can't be sent because this would exceed the user's daily
//     email limit.
//   </li>
//   <li> BAD_DATA_FORMAT "(email address)" -
//     email address malformed
//   </li>
//   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
//     if there are no To: or Cc: addresses provided.
//   </li>
//   <li> DATA_REQUIRED "Note.title" -
//     if the caller provides a Note parameter with no title
//   </li>
//   <li> DATA_REQUIRED "Note.content" -
//     if the caller provides a Note parameter with no content
//   </li>
//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
//   </li>
//   <li> DATA_REQUIRED "NoteEmailParameters.note" -
//     if no guid or note provided
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Parameters
func (p *NoteStoreClient) EmailNote(authenticationToken string, parameters *NoteEmailParameters) (userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendEmailNote(authenticationToken, parameters); err != nil {
		return
	}
	return p.recvEmailNote()
}

func (p *NoteStoreClient) sendEmailNote(authenticationToken string, parameters *NoteEmailParameters) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("emailNote", thrift.CALL, p.SeqId)
	args309 := NewEmailNoteArgs()
	args309.AuthenticationToken = authenticationToken
	args309.Parameters = parameters
	err = args309.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvEmailNote() (userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error311 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error312 error
		error312, err = error311.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error312
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result310 := NewEmailNoteResult()
	err = result310.Read(iprot)
	iprot.ReadMessageEnd()
	if result310.UserException != nil {
		userException = result310.UserException
	}
	if result310.NotFoundException != nil {
		notFoundException = result310.NotFoundException
	}
	if result310.SystemException != nil {
		systemException = result310.SystemException
	}
	return
}

// If this note is not already shared (via its own direct URL), then this
// will start sharing that note.
// This will return the secret "Note Key" for this note that
// can currently be used in conjunction with the Note's GUID to gain direct
// read-only access to the Note.
// If the note is already shared, then this won't make any changes to the
// note, and the existing "Note Key" will be returned.  The only way to change
// the Note Key for an existing note is to stopSharingNote first, and then
// call this function.
//
// @param guid
//   The GUID of the note to be shared.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) ShareNote(authenticationToken string, guid Types.Guid) (r string, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendShareNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvShareNote()
}

func (p *NoteStoreClient) sendShareNote(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("shareNote", thrift.CALL, p.SeqId)
	args313 := NewShareNoteArgs()
	args313.AuthenticationToken = authenticationToken
	args313.Guid = guid
	err = args313.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvShareNote() (value string, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error315 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error316 error
		error316, err = error315.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error316
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result314 := NewShareNoteResult()
	err = result314.Read(iprot)
	iprot.ReadMessageEnd()
	value = result314.Success
	if result314.UserException != nil {
		userException = result314.UserException
	}
	if result314.NotFoundException != nil {
		notFoundException = result314.NotFoundException
	}
	if result314.SystemException != nil {
		systemException = result314.SystemException
	}
	return
}

// If this note is not already shared then this will stop sharing that note
// and invalidate its "Note Key", so any existing URLs to access that Note
// will stop working.
// If the Note is not shared, then this function will do nothing.
//
// @param guid
//   The GUID of the note to be un-shared.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Guid
func (p *NoteStoreClient) StopSharingNote(authenticationToken string, guid Types.Guid) (userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendStopSharingNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvStopSharingNote()
}

func (p *NoteStoreClient) sendStopSharingNote(authenticationToken string, guid Types.Guid) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("stopSharingNote", thrift.CALL, p.SeqId)
	args317 := NewStopSharingNoteArgs()
	args317.AuthenticationToken = authenticationToken
	args317.Guid = guid
	err = args317.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvStopSharingNote() (userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error319 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error320 error
		error320, err = error319.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error320
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result318 := NewStopSharingNoteResult()
	err = result318.Read(iprot)
	iprot.ReadMessageEnd()
	if result318.UserException != nil {
		userException = result318.UserException
	}
	if result318.NotFoundException != nil {
		notFoundException = result318.NotFoundException
	}
	if result318.SystemException != nil {
		systemException = result318.SystemException
	}
	return
}

// Asks the service to produce an authentication token that can be used to
// access the contents of a single Note which was individually shared
// from someone's account.
// This authenticationToken can be used with the various other NoteStore
// calls to find and retrieve the Note and its directly-referenced children.
//
// @param guid
//   The GUID identifying this Note on this shard.
//
// @param noteKey
//   The 'noteKey' identifier from the Note that was originally created via
//   a call to shareNote() and then given to a recipient to access.
//
// @param authenticationToken
//   An optional authenticationToken that identifies the user accessing the
//   shared note. This parameter may be required to access some shared notes.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
//     shared, or the noteKey doesn't match the current key for this note
//   </li>
//   <li> PERMISSION_DENIED "authenticationToken" - an authentication token is
//     required to access this Note, but either no authentication token or a
//     "non-owner" authentication token was provided.
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "guid" - the note with that GUID is not found
//   </li>
// </ul>
//
// @throws EDAMSystemException <ul>
//   <li> TAKEN_DOWN "Note" - The specified shared note is taken down (for
//     all requesters).
//   </li>
//   <li> TAKEN_DOWN "Country" - The specified shared note is taken down
//     for the requester because of an IP-based country lookup.
//   </ul>
// </ul>
//
// Parameters:
//  - Guid
//  - NoteKey
//  - AuthenticationToken
func (p *NoteStoreClient) AuthenticateToSharedNote(guid string, noteKey string, authenticationToken string) (r *UserStore.AuthenticationResult, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	if err = p.sendAuthenticateToSharedNote(guid, noteKey, authenticationToken); err != nil {
		return
	}
	return p.recvAuthenticateToSharedNote()
}

func (p *NoteStoreClient) sendAuthenticateToSharedNote(guid string, noteKey string, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("authenticateToSharedNote", thrift.CALL, p.SeqId)
	args321 := NewAuthenticateToSharedNoteArgs()
	args321.Guid = guid
	args321.NoteKey = noteKey
	args321.AuthenticationToken = authenticationToken
	err = args321.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvAuthenticateToSharedNote() (value *UserStore.AuthenticationResult, userException *Errors.EDAMUserException, notFoundException *Errors.EDAMNotFoundException, systemException *Errors.EDAMSystemException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error323 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error324 error
		error324, err = error323.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error324
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result322 := NewAuthenticateToSharedNoteResult()
	err = result322.Read(iprot)
	iprot.ReadMessageEnd()
	value = result322.Success
	if result322.UserException != nil {
		userException = result322.UserException
	}
	if result322.NotFoundException != nil {
		notFoundException = result322.NotFoundException
	}
	if result322.SystemException != nil {
		systemException = result322.SystemException
	}
	return
}

// Identify related entities on the service, such as notes,
// notebooks, and tags related to notes or content.
//
// @param query
//   The information about which we are finding related entities.
//
// @param resultSpec
//   Allows the client to indicate the type and quantity of
//   information to be returned, allowing a saving of time and
//   bandwidth.
//
// @return
//   The result of the query, with information considered
//   to likely be relevantly related to the information
//   described by the query.
//
// @throws EDAMUserException <ul>
//   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
//     a zero-length plain text value.
//   </li>
//   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
//     invalid Note GUID, that is, one that does not match the constraints
//     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
//   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
//     the note identified by RelatedQuery.noteGuid.
//   </li>
//   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
//     in the result spec.
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
//     found, if that field has been set in the query.
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Query
//  - ResultSpec
func (p *NoteStoreClient) FindRelated(authenticationToken string, query *RelatedQuery, resultSpec *RelatedResultSpec) (r *RelatedResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	if err = p.sendFindRelated(authenticationToken, query, resultSpec); err != nil {
		return
	}
	return p.recvFindRelated()
}

func (p *NoteStoreClient) sendFindRelated(authenticationToken string, query *RelatedQuery, resultSpec *RelatedResultSpec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("findRelated", thrift.CALL, p.SeqId)
	args325 := NewFindRelatedArgs()
	args325.AuthenticationToken = authenticationToken
	args325.Query = query
	args325.ResultSpec = resultSpec
	err = args325.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *NoteStoreClient) recvFindRelated() (value *RelatedResult, userException *Errors.EDAMUserException, systemException *Errors.EDAMSystemException, notFoundException *Errors.EDAMNotFoundException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error327 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error328 error
		error328, err = error327.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error328
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result326 := NewFindRelatedResult()
	err = result326.Read(iprot)
	iprot.ReadMessageEnd()
	value = result326.Success
	if result326.UserException != nil {
		userException = result326.UserException
	}
	if result326.SystemException != nil {
		systemException = result326.SystemException
	}
	if result326.NotFoundException != nil {
		notFoundException = result326.NotFoundException
	}
	return
}

type NoteStoreProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      NoteStore
}

func (p *NoteStoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *NoteStoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *NoteStoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewNoteStoreProcessor(handler NoteStore) *NoteStoreProcessor {

	self329 := &NoteStoreProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self329.processorMap["getSyncState"] = &noteStoreProcessorGetSyncState{handler: handler}
	self329.processorMap["getSyncStateWithMetrics"] = &noteStoreProcessorGetSyncStateWithMetrics{handler: handler}
	self329.processorMap["getSyncChunk"] = &noteStoreProcessorGetSyncChunk{handler: handler}
	self329.processorMap["getFilteredSyncChunk"] = &noteStoreProcessorGetFilteredSyncChunk{handler: handler}
	self329.processorMap["getLinkedNotebookSyncState"] = &noteStoreProcessorGetLinkedNotebookSyncState{handler: handler}
	self329.processorMap["getLinkedNotebookSyncChunk"] = &noteStoreProcessorGetLinkedNotebookSyncChunk{handler: handler}
	self329.processorMap["listNotebooks"] = &noteStoreProcessorListNotebooks{handler: handler}
	self329.processorMap["getNotebook"] = &noteStoreProcessorGetNotebook{handler: handler}
	self329.processorMap["getDefaultNotebook"] = &noteStoreProcessorGetDefaultNotebook{handler: handler}
	self329.processorMap["createNotebook"] = &noteStoreProcessorCreateNotebook{handler: handler}
	self329.processorMap["updateNotebook"] = &noteStoreProcessorUpdateNotebook{handler: handler}
	self329.processorMap["expungeNotebook"] = &noteStoreProcessorExpungeNotebook{handler: handler}
	self329.processorMap["listTags"] = &noteStoreProcessorListTags{handler: handler}
	self329.processorMap["listTagsByNotebook"] = &noteStoreProcessorListTagsByNotebook{handler: handler}
	self329.processorMap["getTag"] = &noteStoreProcessorGetTag{handler: handler}
	self329.processorMap["createTag"] = &noteStoreProcessorCreateTag{handler: handler}
	self329.processorMap["updateTag"] = &noteStoreProcessorUpdateTag{handler: handler}
	self329.processorMap["untagAll"] = &noteStoreProcessorUntagAll{handler: handler}
	self329.processorMap["expungeTag"] = &noteStoreProcessorExpungeTag{handler: handler}
	self329.processorMap["listSearches"] = &noteStoreProcessorListSearches{handler: handler}
	self329.processorMap["getSearch"] = &noteStoreProcessorGetSearch{handler: handler}
	self329.processorMap["createSearch"] = &noteStoreProcessorCreateSearch{handler: handler}
	self329.processorMap["updateSearch"] = &noteStoreProcessorUpdateSearch{handler: handler}
	self329.processorMap["expungeSearch"] = &noteStoreProcessorExpungeSearch{handler: handler}
	self329.processorMap["findNotes"] = &noteStoreProcessorFindNotes{handler: handler}
	self329.processorMap["findNoteOffset"] = &noteStoreProcessorFindNoteOffset{handler: handler}
	self329.processorMap["findNotesMetadata"] = &noteStoreProcessorFindNotesMetadata{handler: handler}
	self329.processorMap["findNoteCounts"] = &noteStoreProcessorFindNoteCounts{handler: handler}
	self329.processorMap["getNote"] = &noteStoreProcessorGetNote{handler: handler}
	self329.processorMap["getNoteApplicationData"] = &noteStoreProcessorGetNoteApplicationData{handler: handler}
	self329.processorMap["getNoteApplicationDataEntry"] = &noteStoreProcessorGetNoteApplicationDataEntry{handler: handler}
	self329.processorMap["setNoteApplicationDataEntry"] = &noteStoreProcessorSetNoteApplicationDataEntry{handler: handler}
	self329.processorMap["unsetNoteApplicationDataEntry"] = &noteStoreProcessorUnsetNoteApplicationDataEntry{handler: handler}
	self329.processorMap["getNoteContent"] = &noteStoreProcessorGetNoteContent{handler: handler}
	self329.processorMap["getNoteSearchText"] = &noteStoreProcessorGetNoteSearchText{handler: handler}
	self329.processorMap["getResourceSearchText"] = &noteStoreProcessorGetResourceSearchText{handler: handler}
	self329.processorMap["getNoteTagNames"] = &noteStoreProcessorGetNoteTagNames{handler: handler}
	self329.processorMap["createNote"] = &noteStoreProcessorCreateNote{handler: handler}
	self329.processorMap["updateNote"] = &noteStoreProcessorUpdateNote{handler: handler}
	self329.processorMap["deleteNote"] = &noteStoreProcessorDeleteNote{handler: handler}
	self329.processorMap["expungeNote"] = &noteStoreProcessorExpungeNote{handler: handler}
	self329.processorMap["expungeNotes"] = &noteStoreProcessorExpungeNotes{handler: handler}
	self329.processorMap["expungeInactiveNotes"] = &noteStoreProcessorExpungeInactiveNotes{handler: handler}
	self329.processorMap["copyNote"] = &noteStoreProcessorCopyNote{handler: handler}
	self329.processorMap["listNoteVersions"] = &noteStoreProcessorListNoteVersions{handler: handler}
	self329.processorMap["getNoteVersion"] = &noteStoreProcessorGetNoteVersion{handler: handler}
	self329.processorMap["getResource"] = &noteStoreProcessorGetResource{handler: handler}
	self329.processorMap["getResourceApplicationData"] = &noteStoreProcessorGetResourceApplicationData{handler: handler}
	self329.processorMap["getResourceApplicationDataEntry"] = &noteStoreProcessorGetResourceApplicationDataEntry{handler: handler}
	self329.processorMap["setResourceApplicationDataEntry"] = &noteStoreProcessorSetResourceApplicationDataEntry{handler: handler}
	self329.processorMap["unsetResourceApplicationDataEntry"] = &noteStoreProcessorUnsetResourceApplicationDataEntry{handler: handler}
	self329.processorMap["updateResource"] = &noteStoreProcessorUpdateResource{handler: handler}
	self329.processorMap["getResourceData"] = &noteStoreProcessorGetResourceData{handler: handler}
	self329.processorMap["getResourceByHash"] = &noteStoreProcessorGetResourceByHash{handler: handler}
	self329.processorMap["getResourceRecognition"] = &noteStoreProcessorGetResourceRecognition{handler: handler}
	self329.processorMap["getResourceAlternateData"] = &noteStoreProcessorGetResourceAlternateData{handler: handler}
	self329.processorMap["getResourceAttributes"] = &noteStoreProcessorGetResourceAttributes{handler: handler}
	self329.processorMap["getPublicNotebook"] = &noteStoreProcessorGetPublicNotebook{handler: handler}
	self329.processorMap["createSharedNotebook"] = &noteStoreProcessorCreateSharedNotebook{handler: handler}
	self329.processorMap["updateSharedNotebook"] = &noteStoreProcessorUpdateSharedNotebook{handler: handler}
	self329.processorMap["setSharedNotebookRecipientSettings"] = &noteStoreProcessorSetSharedNotebookRecipientSettings{handler: handler}
	self329.processorMap["sendMessageToSharedNotebookMembers"] = &noteStoreProcessorSendMessageToSharedNotebookMembers{handler: handler}
	self329.processorMap["listSharedNotebooks"] = &noteStoreProcessorListSharedNotebooks{handler: handler}
	self329.processorMap["expungeSharedNotebooks"] = &noteStoreProcessorExpungeSharedNotebooks{handler: handler}
	self329.processorMap["createLinkedNotebook"] = &noteStoreProcessorCreateLinkedNotebook{handler: handler}
	self329.processorMap["updateLinkedNotebook"] = &noteStoreProcessorUpdateLinkedNotebook{handler: handler}
	self329.processorMap["listLinkedNotebooks"] = &noteStoreProcessorListLinkedNotebooks{handler: handler}
	self329.processorMap["expungeLinkedNotebook"] = &noteStoreProcessorExpungeLinkedNotebook{handler: handler}
	self329.processorMap["authenticateToSharedNotebook"] = &noteStoreProcessorAuthenticateToSharedNotebook{handler: handler}
	self329.processorMap["getSharedNotebookByAuth"] = &noteStoreProcessorGetSharedNotebookByAuth{handler: handler}
	self329.processorMap["emailNote"] = &noteStoreProcessorEmailNote{handler: handler}
	self329.processorMap["shareNote"] = &noteStoreProcessorShareNote{handler: handler}
	self329.processorMap["stopSharingNote"] = &noteStoreProcessorStopSharingNote{handler: handler}
	self329.processorMap["authenticateToSharedNote"] = &noteStoreProcessorAuthenticateToSharedNote{handler: handler}
	self329.processorMap["findRelated"] = &noteStoreProcessorFindRelated{handler: handler}
	return self329
}

func (p *NoteStoreProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x330 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x330.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x330

}

type noteStoreProcessorGetSyncState struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSyncState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSyncStateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSyncState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSyncStateResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetSyncState(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSyncState: "+err.Error())
		oprot.WriteMessageBegin("getSyncState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSyncState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSyncStateWithMetrics struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSyncStateWithMetrics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSyncStateWithMetricsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSyncStateWithMetricsResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetSyncStateWithMetrics(args.AuthenticationToken, args.ClientMetrics); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSyncStateWithMetrics: "+err.Error())
		oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSyncChunk struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSyncChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSyncChunkArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSyncChunkResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetSyncChunk(args.AuthenticationToken, args.AfterUSN, args.MaxEntries, args.FullSyncOnly); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSyncChunk: "+err.Error())
		oprot.WriteMessageBegin("getSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSyncChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetFilteredSyncChunk struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetFilteredSyncChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetFilteredSyncChunkArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetFilteredSyncChunkResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetFilteredSyncChunk(args.AuthenticationToken, args.AfterUSN, args.MaxEntries, args.Filter); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFilteredSyncChunk: "+err.Error())
		oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetLinkedNotebookSyncState struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetLinkedNotebookSyncState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetLinkedNotebookSyncStateArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetLinkedNotebookSyncStateResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetLinkedNotebookSyncState(args.AuthenticationToken, args.LinkedNotebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncState: "+err.Error())
		oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetLinkedNotebookSyncChunk struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetLinkedNotebookSyncChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetLinkedNotebookSyncChunkArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetLinkedNotebookSyncChunkResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetLinkedNotebookSyncChunk(args.AuthenticationToken, args.LinkedNotebook, args.AfterUSN, args.MaxEntries, args.FullSyncOnly); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncChunk: "+err.Error())
		oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorListNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListNotebooksArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListNotebooksResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.ListNotebooks(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listNotebooks: "+err.Error())
		oprot.WriteMessageBegin("listNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNotebookResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNotebook(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNotebook: "+err.Error())
		oprot.WriteMessageBegin("getNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetDefaultNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetDefaultNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetDefaultNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDefaultNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetDefaultNotebookResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.GetDefaultNotebook(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDefaultNotebook: "+err.Error())
		oprot.WriteMessageBegin("getDefaultNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getDefaultNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateNotebookResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.CreateNotebook(args.AuthenticationToken, args.Notebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNotebook: "+err.Error())
		oprot.WriteMessageBegin("createNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateNotebookResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UpdateNotebook(args.AuthenticationToken, args.Notebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotebook: "+err.Error())
		oprot.WriteMessageBegin("updateNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeNotebookResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ExpungeNotebook(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeNotebook: "+err.Error())
		oprot.WriteMessageBegin("expungeNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListTags struct {
	handler NoteStore
}

func (p *noteStoreProcessorListTags) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListTagsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListTagsResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.ListTags(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: "+err.Error())
		oprot.WriteMessageBegin("listTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listTags", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListTagsByNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorListTagsByNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListTagsByNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTagsByNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListTagsByNotebookResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ListTagsByNotebook(args.AuthenticationToken, args.NotebookGuid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagsByNotebook: "+err.Error())
		oprot.WriteMessageBegin("listTagsByNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listTagsByNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTagArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTagResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetTag(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: "+err.Error())
		oprot.WriteMessageBegin("getTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateTagArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateTagResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.CreateTag(args.AuthenticationToken, args.Tag); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: "+err.Error())
		oprot.WriteMessageBegin("createTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateTagArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateTagResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UpdateTag(args.AuthenticationToken, args.Tag); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTag: "+err.Error())
		oprot.WriteMessageBegin("updateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUntagAll struct {
	handler NoteStore
}

func (p *noteStoreProcessorUntagAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUntagAllArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("untagAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUntagAllResult()
	if result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UntagAll(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing untagAll: "+err.Error())
		oprot.WriteMessageBegin("untagAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("untagAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeTagArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeTagResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ExpungeTag(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeTag: "+err.Error())
		oprot.WriteMessageBegin("expungeTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListSearches struct {
	handler NoteStore
}

func (p *noteStoreProcessorListSearches) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListSearchesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listSearches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListSearchesResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.ListSearches(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSearches: "+err.Error())
		oprot.WriteMessageBegin("listSearches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listSearches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSearchArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSearchResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetSearch(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSearch: "+err.Error())
		oprot.WriteMessageBegin("getSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateSearchArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateSearchResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.CreateSearch(args.AuthenticationToken, args.Search); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSearch: "+err.Error())
		oprot.WriteMessageBegin("createSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateSearchArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateSearchResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UpdateSearch(args.AuthenticationToken, args.Search); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSearch: "+err.Error())
		oprot.WriteMessageBegin("updateSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeSearchArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeSearchResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ExpungeSearch(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeSearch: "+err.Error())
		oprot.WriteMessageBegin("expungeSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNotes struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindNotesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindNotesResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.FindNotes(args.AuthenticationToken, args.Filter, args.Offset, args.MaxNotes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNotes: "+err.Error())
		oprot.WriteMessageBegin("findNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("findNotes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNoteOffset struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNoteOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindNoteOffsetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNoteOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindNoteOffsetResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.FindNoteOffset(args.AuthenticationToken, args.Filter, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNoteOffset: "+err.Error())
		oprot.WriteMessageBegin("findNoteOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("findNoteOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNotesMetadata struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNotesMetadata) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindNotesMetadataArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNotesMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindNotesMetadataResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.FindNotesMetadata(args.AuthenticationToken, args.Filter, args.Offset, args.MaxNotes, args.ResultSpec); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNotesMetadata: "+err.Error())
		oprot.WriteMessageBegin("findNotesMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("findNotesMetadata", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNoteCounts struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNoteCounts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindNoteCountsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNoteCounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindNoteCountsResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.FindNoteCounts(args.AuthenticationToken, args.Filter, args.WithTrash); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNoteCounts: "+err.Error())
		oprot.WriteMessageBegin("findNoteCounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("findNoteCounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNote(args.AuthenticationToken, args.Guid, args.WithContent, args.WithResourcesData, args.WithResourcesRecognition, args.WithResourcesAlternateData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNote: "+err.Error())
		oprot.WriteMessageBegin("getNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteApplicationData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteApplicationData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteApplicationDataArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteApplicationData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteApplicationDataResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNoteApplicationData(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteApplicationData: "+err.Error())
		oprot.WriteMessageBegin("getNoteApplicationData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNoteApplicationData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteApplicationDataEntryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteApplicationDataEntryResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNoteApplicationDataEntry(args.AuthenticationToken, args.Guid, args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteApplicationDataEntry: "+err.Error())
		oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSetNoteApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorSetNoteApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetNoteApplicationDataEntryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetNoteApplicationDataEntryResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.SetNoteApplicationDataEntry(args.AuthenticationToken, args.Guid, args.Key, args.Value); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNoteApplicationDataEntry: "+err.Error())
		oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUnsetNoteApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorUnsetNoteApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUnsetNoteApplicationDataEntryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUnsetNoteApplicationDataEntryResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UnsetNoteApplicationDataEntry(args.AuthenticationToken, args.Guid, args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsetNoteApplicationDataEntry: "+err.Error())
		oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteContent struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteContent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteContentArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteContent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteContentResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNoteContent(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteContent: "+err.Error())
		oprot.WriteMessageBegin("getNoteContent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNoteContent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteSearchText struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteSearchText) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteSearchTextArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteSearchText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteSearchTextResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNoteSearchText(args.AuthenticationToken, args.Guid, args.NoteOnly, args.TokenizeForIndexing); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteSearchText: "+err.Error())
		oprot.WriteMessageBegin("getNoteSearchText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNoteSearchText", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceSearchText struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceSearchText) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceSearchTextArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceSearchText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceSearchTextResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceSearchText(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceSearchText: "+err.Error())
		oprot.WriteMessageBegin("getResourceSearchText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceSearchText", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteTagNames struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteTagNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteTagNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteTagNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteTagNamesResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNoteTagNames(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteTagNames: "+err.Error())
		oprot.WriteMessageBegin("getNoteTagNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNoteTagNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateNoteResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.CreateNote(args.AuthenticationToken, args.Note); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNote: "+err.Error())
		oprot.WriteMessageBegin("createNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateNoteResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UpdateNote(args.AuthenticationToken, args.Note); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNote: "+err.Error())
		oprot.WriteMessageBegin("updateNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorDeleteNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorDeleteNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteNoteResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.DeleteNote(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteNote: "+err.Error())
		oprot.WriteMessageBegin("deleteNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeNoteResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ExpungeNote(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeNote: "+err.Error())
		oprot.WriteMessageBegin("expungeNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeNotes struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeNotesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeNotesResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ExpungeNotes(args.AuthenticationToken, args.NoteGuids); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeNotes: "+err.Error())
		oprot.WriteMessageBegin("expungeNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeNotes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeInactiveNotes struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeInactiveNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeInactiveNotesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeInactiveNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeInactiveNotesResult()
	if result.Success, result.UserException, result.SystemException, err = p.handler.ExpungeInactiveNotes(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeInactiveNotes: "+err.Error())
		oprot.WriteMessageBegin("expungeInactiveNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeInactiveNotes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCopyNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorCopyNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCopyNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("copyNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCopyNoteResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.CopyNote(args.AuthenticationToken, args.NoteGuid, args.ToNotebookGuid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing copyNote: "+err.Error())
		oprot.WriteMessageBegin("copyNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("copyNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListNoteVersions struct {
	handler NoteStore
}

func (p *noteStoreProcessorListNoteVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListNoteVersionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listNoteVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListNoteVersionsResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.ListNoteVersions(args.AuthenticationToken, args.NoteGuid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listNoteVersions: "+err.Error())
		oprot.WriteMessageBegin("listNoteVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listNoteVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteVersion struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetNoteVersionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetNoteVersionResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetNoteVersion(args.AuthenticationToken, args.NoteGuid, args.UpdateSequenceNum, args.WithResourcesData, args.WithResourcesRecognition, args.WithResourcesAlternateData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteVersion: "+err.Error())
		oprot.WriteMessageBegin("getNoteVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getNoteVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResource struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResource) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResource(args.AuthenticationToken, args.Guid, args.WithData, args.WithRecognition, args.WithAttributes, args.WithAlternateData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResource: "+err.Error())
		oprot.WriteMessageBegin("getResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceApplicationData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceApplicationData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceApplicationDataArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceApplicationData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceApplicationDataResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceApplicationData(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceApplicationData: "+err.Error())
		oprot.WriteMessageBegin("getResourceApplicationData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceApplicationData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceApplicationDataEntryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceApplicationDataEntryResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceApplicationDataEntry(args.AuthenticationToken, args.Guid, args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceApplicationDataEntry: "+err.Error())
		oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSetResourceApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorSetResourceApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetResourceApplicationDataEntryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetResourceApplicationDataEntryResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.SetResourceApplicationDataEntry(args.AuthenticationToken, args.Guid, args.Key, args.Value); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setResourceApplicationDataEntry: "+err.Error())
		oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUnsetResourceApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorUnsetResourceApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUnsetResourceApplicationDataEntryArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUnsetResourceApplicationDataEntryResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UnsetResourceApplicationDataEntry(args.AuthenticationToken, args.Guid, args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsetResourceApplicationDataEntry: "+err.Error())
		oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateResource struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateResource) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateResourceArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateResourceResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.UpdateResource(args.AuthenticationToken, args.Resource); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateResource: "+err.Error())
		oprot.WriteMessageBegin("updateResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceDataArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceDataResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceData(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceData: "+err.Error())
		oprot.WriteMessageBegin("getResourceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceByHash struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceByHash) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceByHashArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceByHash", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceByHashResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceByHash(args.AuthenticationToken, args.NoteGuid, args.ContentHash, args.WithData, args.WithRecognition, args.WithAlternateData); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceByHash: "+err.Error())
		oprot.WriteMessageBegin("getResourceByHash", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceByHash", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceRecognition struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceRecognition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceRecognitionArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceRecognition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceRecognitionResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceRecognition(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceRecognition: "+err.Error())
		oprot.WriteMessageBegin("getResourceRecognition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceRecognition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceAlternateData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceAlternateData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceAlternateDataArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceAlternateData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceAlternateDataResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceAlternateData(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceAlternateData: "+err.Error())
		oprot.WriteMessageBegin("getResourceAlternateData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceAlternateData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceAttributes struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetResourceAttributesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResourceAttributesResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.GetResourceAttributes(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceAttributes: "+err.Error())
		oprot.WriteMessageBegin("getResourceAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getResourceAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetPublicNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetPublicNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetPublicNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPublicNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetPublicNotebookResult()
	if result.Success, result.SystemException, result.NotFoundException, err = p.handler.GetPublicNotebook(args.UserId, args.PublicUri); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPublicNotebook: "+err.Error())
		oprot.WriteMessageBegin("getPublicNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getPublicNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateSharedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateSharedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateSharedNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateSharedNotebookResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.CreateSharedNotebook(args.AuthenticationToken, args.SharedNotebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSharedNotebook: "+err.Error())
		oprot.WriteMessageBegin("createSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createSharedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateSharedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateSharedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateSharedNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateSharedNotebookResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.UpdateSharedNotebook(args.AuthenticationToken, args.SharedNotebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSharedNotebook: "+err.Error())
		oprot.WriteMessageBegin("updateSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateSharedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSetSharedNotebookRecipientSettings struct {
	handler NoteStore
}

func (p *noteStoreProcessorSetSharedNotebookRecipientSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSetSharedNotebookRecipientSettingsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSetSharedNotebookRecipientSettingsResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.SetSharedNotebookRecipientSettings(args.AuthenticationToken, args.SharedNotebookId, args.RecipientSettings); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setSharedNotebookRecipientSettings: "+err.Error())
		oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSendMessageToSharedNotebookMembers struct {
	handler NoteStore
}

func (p *noteStoreProcessorSendMessageToSharedNotebookMembers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewSendMessageToSharedNotebookMembersArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewSendMessageToSharedNotebookMembersResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.SendMessageToSharedNotebookMembers(args.AuthenticationToken, args.NotebookGuid, args.MessageText, args.Recipients); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageToSharedNotebookMembers: "+err.Error())
		oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListSharedNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorListSharedNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListSharedNotebooksArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listSharedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListSharedNotebooksResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.ListSharedNotebooks(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSharedNotebooks: "+err.Error())
		oprot.WriteMessageBegin("listSharedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listSharedNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeSharedNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeSharedNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeSharedNotebooksArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeSharedNotebooksResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.ExpungeSharedNotebooks(args.AuthenticationToken, args.SharedNotebookIds); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeSharedNotebooks: "+err.Error())
		oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateLinkedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateLinkedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateLinkedNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateLinkedNotebookResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.CreateLinkedNotebook(args.AuthenticationToken, args.LinkedNotebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createLinkedNotebook: "+err.Error())
		oprot.WriteMessageBegin("createLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createLinkedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateLinkedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateLinkedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewUpdateLinkedNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewUpdateLinkedNotebookResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.UpdateLinkedNotebook(args.AuthenticationToken, args.LinkedNotebook); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLinkedNotebook: "+err.Error())
		oprot.WriteMessageBegin("updateLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("updateLinkedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListLinkedNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorListLinkedNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewListLinkedNotebooksArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listLinkedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewListLinkedNotebooksResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.ListLinkedNotebooks(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listLinkedNotebooks: "+err.Error())
		oprot.WriteMessageBegin("listLinkedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("listLinkedNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeLinkedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeLinkedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewExpungeLinkedNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewExpungeLinkedNotebookResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.ExpungeLinkedNotebook(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeLinkedNotebook: "+err.Error())
		oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorAuthenticateToSharedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorAuthenticateToSharedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAuthenticateToSharedNotebookArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAuthenticateToSharedNotebookResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.AuthenticateToSharedNotebook(args.ShareKey, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateToSharedNotebook: "+err.Error())
		oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSharedNotebookByAuth struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSharedNotebookByAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetSharedNotebookByAuthArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetSharedNotebookByAuthResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.GetSharedNotebookByAuth(args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSharedNotebookByAuth: "+err.Error())
		oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorEmailNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorEmailNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewEmailNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("emailNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewEmailNoteResult()
	if result.UserException, result.NotFoundException, result.SystemException, err = p.handler.EmailNote(args.AuthenticationToken, args.Parameters); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing emailNote: "+err.Error())
		oprot.WriteMessageBegin("emailNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("emailNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorShareNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorShareNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewShareNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("shareNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewShareNoteResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.ShareNote(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing shareNote: "+err.Error())
		oprot.WriteMessageBegin("shareNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("shareNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorStopSharingNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorStopSharingNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewStopSharingNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("stopSharingNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewStopSharingNoteResult()
	if result.UserException, result.NotFoundException, result.SystemException, err = p.handler.StopSharingNote(args.AuthenticationToken, args.Guid); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stopSharingNote: "+err.Error())
		oprot.WriteMessageBegin("stopSharingNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("stopSharingNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorAuthenticateToSharedNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorAuthenticateToSharedNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAuthenticateToSharedNoteArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authenticateToSharedNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAuthenticateToSharedNoteResult()
	if result.Success, result.UserException, result.NotFoundException, result.SystemException, err = p.handler.AuthenticateToSharedNote(args.Guid, args.NoteKey, args.AuthenticationToken); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateToSharedNote: "+err.Error())
		oprot.WriteMessageBegin("authenticateToSharedNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("authenticateToSharedNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindRelated struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindRelated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindRelatedArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findRelated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindRelatedResult()
	if result.Success, result.UserException, result.SystemException, result.NotFoundException, err = p.handler.FindRelated(args.AuthenticationToken, args.Query, args.ResultSpec); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findRelated: "+err.Error())
		oprot.WriteMessageBegin("findRelated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("findRelated", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetSyncStateArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewGetSyncStateArgs() *GetSyncStateArgs {
	return &GetSyncStateArgs{}
}

func (p *GetSyncStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSyncStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetSyncStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncState_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSyncStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetSyncStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSyncStateArgs(%+v)", *p)
}

type GetSyncStateResult struct {
	Success         *SyncState                  `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetSyncStateResult() *GetSyncStateResult {
	return &GetSyncStateResult{}
}

func (p *GetSyncStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSyncStateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncState()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetSyncStateResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetSyncStateResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetSyncStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncState_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSyncStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSyncStateResult(%+v)", *p)
}

type GetSyncStateWithMetricsArgs struct {
	AuthenticationToken string              `thrift:"authenticationToken,1"`
	ClientMetrics       *ClientUsageMetrics `thrift:"clientMetrics,2"`
}

func NewGetSyncStateWithMetricsArgs() *GetSyncStateWithMetricsArgs {
	return &GetSyncStateWithMetricsArgs{}
}

func (p *GetSyncStateWithMetricsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSyncStateWithMetricsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetSyncStateWithMetricsArgs) readField2(iprot thrift.TProtocol) error {
	p.ClientMetrics = NewClientUsageMetrics()
	if err := p.ClientMetrics.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ClientMetrics)
	}
	return nil
}

func (p *GetSyncStateWithMetricsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncStateWithMetrics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSyncStateWithMetricsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetSyncStateWithMetricsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ClientMetrics != nil {
		if err := oprot.WriteFieldBegin("clientMetrics", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:clientMetrics: %s", p, err)
		}
		if err := p.ClientMetrics.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ClientMetrics)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:clientMetrics: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateWithMetricsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSyncStateWithMetricsArgs(%+v)", *p)
}

type GetSyncStateWithMetricsResult struct {
	Success         *SyncState                  `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetSyncStateWithMetricsResult() *GetSyncStateWithMetricsResult {
	return &GetSyncStateWithMetricsResult{}
}

func (p *GetSyncStateWithMetricsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSyncStateWithMetricsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncState()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetSyncStateWithMetricsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetSyncStateWithMetricsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetSyncStateWithMetricsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncStateWithMetrics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSyncStateWithMetricsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateWithMetricsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateWithMetricsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncStateWithMetricsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSyncStateWithMetricsResult(%+v)", *p)
}

type GetSyncChunkArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
	AfterUSN            int32  `thrift:"afterUSN,2"`
	MaxEntries          int32  `thrift:"maxEntries,3"`
	FullSyncOnly        bool   `thrift:"fullSyncOnly,4"`
}

func NewGetSyncChunkArgs() *GetSyncChunkArgs {
	return &GetSyncChunkArgs{}
}

func (p *GetSyncChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSyncChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetSyncChunkArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.AfterUSN = v
	}
	return nil
}

func (p *GetSyncChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxEntries = v
	}
	return nil
}

func (p *GetSyncChunkArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.FullSyncOnly = v
	}
	return nil
}

func (p *GetSyncChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncChunk_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSyncChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetSyncChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("afterUSN", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:afterUSN: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AfterUSN)); err != nil {
		return fmt.Errorf("%T.afterUSN (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:afterUSN: %s", p, err)
	}
	return err
}

func (p *GetSyncChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxEntries", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:maxEntries: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxEntries)); err != nil {
		return fmt.Errorf("%T.maxEntries (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:maxEntries: %s", p, err)
	}
	return err
}

func (p *GetSyncChunkArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncOnly", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:fullSyncOnly: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.FullSyncOnly)); err != nil {
		return fmt.Errorf("%T.fullSyncOnly (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:fullSyncOnly: %s", p, err)
	}
	return err
}

func (p *GetSyncChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSyncChunkArgs(%+v)", *p)
}

type GetSyncChunkResult struct {
	Success         *SyncChunk                  `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetSyncChunkResult() *GetSyncChunkResult {
	return &GetSyncChunkResult{}
}

func (p *GetSyncChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSyncChunkResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncChunk()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetSyncChunkResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetSyncChunkResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetSyncChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncChunk_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSyncChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncChunkResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetSyncChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSyncChunkResult(%+v)", *p)
}

type GetFilteredSyncChunkArgs struct {
	AuthenticationToken string           `thrift:"authenticationToken,1"`
	AfterUSN            int32            `thrift:"afterUSN,2"`
	MaxEntries          int32            `thrift:"maxEntries,3"`
	Filter              *SyncChunkFilter `thrift:"filter,4"`
}

func NewGetFilteredSyncChunkArgs() *GetFilteredSyncChunkArgs {
	return &GetFilteredSyncChunkArgs{}
}

func (p *GetFilteredSyncChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFilteredSyncChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetFilteredSyncChunkArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.AfterUSN = v
	}
	return nil
}

func (p *GetFilteredSyncChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxEntries = v
	}
	return nil
}

func (p *GetFilteredSyncChunkArgs) readField4(iprot thrift.TProtocol) error {
	p.Filter = NewSyncChunkFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *GetFilteredSyncChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFilteredSyncChunk_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFilteredSyncChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetFilteredSyncChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("afterUSN", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:afterUSN: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AfterUSN)); err != nil {
		return fmt.Errorf("%T.afterUSN (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:afterUSN: %s", p, err)
	}
	return err
}

func (p *GetFilteredSyncChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxEntries", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:maxEntries: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxEntries)); err != nil {
		return fmt.Errorf("%T.maxEntries (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:maxEntries: %s", p, err)
	}
	return err
}

func (p *GetFilteredSyncChunkArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:filter: %s", p, err)
		}
		if err := p.Filter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Filter)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:filter: %s", p, err)
		}
	}
	return err
}

func (p *GetFilteredSyncChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFilteredSyncChunkArgs(%+v)", *p)
}

type GetFilteredSyncChunkResult struct {
	Success         *SyncChunk                  `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetFilteredSyncChunkResult() *GetFilteredSyncChunkResult {
	return &GetFilteredSyncChunkResult{}
}

func (p *GetFilteredSyncChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFilteredSyncChunkResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncChunk()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetFilteredSyncChunkResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetFilteredSyncChunkResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetFilteredSyncChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFilteredSyncChunk_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFilteredSyncChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFilteredSyncChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetFilteredSyncChunkResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetFilteredSyncChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFilteredSyncChunkResult(%+v)", *p)
}

type GetLinkedNotebookSyncStateArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1"`
	LinkedNotebook      *Types.LinkedNotebook `thrift:"linkedNotebook,2"`
}

func NewGetLinkedNotebookSyncStateArgs() *GetLinkedNotebookSyncStateArgs {
	return &GetLinkedNotebookSyncStateArgs{}
}

func (p *GetLinkedNotebookSyncStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = Types.NewLinkedNotebook()
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LinkedNotebook)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncState_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetLinkedNotebookSyncStateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.LinkedNotebook != nil {
		if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:linkedNotebook: %s", p, err)
		}
		if err := p.LinkedNotebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LinkedNotebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:linkedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLinkedNotebookSyncStateArgs(%+v)", *p)
}

type GetLinkedNotebookSyncStateResult struct {
	Success           *SyncState                    `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetLinkedNotebookSyncStateResult() *GetLinkedNotebookSyncStateResult {
	return &GetLinkedNotebookSyncStateResult{}
}

func (p *GetLinkedNotebookSyncStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncState()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncState_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncStateResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncStateResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLinkedNotebookSyncStateResult(%+v)", *p)
}

type GetLinkedNotebookSyncChunkArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1"`
	LinkedNotebook      *Types.LinkedNotebook `thrift:"linkedNotebook,2"`
	AfterUSN            int32                 `thrift:"afterUSN,3"`
	MaxEntries          int32                 `thrift:"maxEntries,4"`
	FullSyncOnly        bool                  `thrift:"fullSyncOnly,5"`
}

func NewGetLinkedNotebookSyncChunkArgs() *GetLinkedNotebookSyncChunkArgs {
	return &GetLinkedNotebookSyncChunkArgs{}
}

func (p *GetLinkedNotebookSyncChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = Types.NewLinkedNotebook()
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LinkedNotebook)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.AfterUSN = v
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxEntries = v
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.FullSyncOnly = v
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncChunk_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.LinkedNotebook != nil {
		if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:linkedNotebook: %s", p, err)
		}
		if err := p.LinkedNotebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LinkedNotebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:linkedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("afterUSN", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:afterUSN: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.AfterUSN)); err != nil {
		return fmt.Errorf("%T.afterUSN (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:afterUSN: %s", p, err)
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxEntries", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:maxEntries: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxEntries)); err != nil {
		return fmt.Errorf("%T.maxEntries (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:maxEntries: %s", p, err)
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncOnly", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:fullSyncOnly: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.FullSyncOnly)); err != nil {
		return fmt.Errorf("%T.fullSyncOnly (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:fullSyncOnly: %s", p, err)
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLinkedNotebookSyncChunkArgs(%+v)", *p)
}

type GetLinkedNotebookSyncChunkResult struct {
	Success           *SyncChunk                    `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetLinkedNotebookSyncChunkResult() *GetLinkedNotebookSyncChunkResult {
	return &GetLinkedNotebookSyncChunkResult{}
}

func (p *GetLinkedNotebookSyncChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncChunk()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncChunk_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLinkedNotebookSyncChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetLinkedNotebookSyncChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLinkedNotebookSyncChunkResult(%+v)", *p)
}

type ListNotebooksArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewListNotebooksArgs() *ListNotebooksArgs {
	return &ListNotebooksArgs{}
}

func (p *ListNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNotebooks_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNotebooksArgs(%+v)", *p)
}

type ListNotebooksResult struct {
	Success         []*Types.Notebook           `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewListNotebooksResult() *ListNotebooksResult {
	return &ListNotebooksResult{}
}

func (p *ListNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListNotebooksResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Types.Notebook, 0, size)
	for i := 0; i < size; i++ {
		_elem331 := Types.NewNotebook()
		if err := _elem331.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem331)
		}
		p.Success = append(p.Success, _elem331)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNotebooks_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNotebooksResult(%+v)", *p)
}

type GetNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetNotebookArgs() *GetNotebookArgs {
	return &GetNotebookArgs{}
}

func (p *GetNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotebookArgs(%+v)", *p)
}

type GetNotebookResult struct {
	Success           *Types.Notebook               `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNotebookResult() *GetNotebookResult {
	return &GetNotebookResult{}
}

func (p *GetNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotebookResult(%+v)", *p)
}

type GetDefaultNotebookArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewGetDefaultNotebookArgs() *GetDefaultNotebookArgs {
	return &GetDefaultNotebookArgs{}
}

func (p *GetDefaultNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDefaultNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetDefaultNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDefaultNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDefaultNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetDefaultNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDefaultNotebookArgs(%+v)", *p)
}

type GetDefaultNotebookResult struct {
	Success         *Types.Notebook             `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewGetDefaultNotebookResult() *GetDefaultNotebookResult {
	return &GetDefaultNotebookResult{}
}

func (p *GetDefaultNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDefaultNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetDefaultNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetDefaultNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetDefaultNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDefaultNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDefaultNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDefaultNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetDefaultNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetDefaultNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDefaultNotebookResult(%+v)", *p)
}

type CreateNotebookArgs struct {
	AuthenticationToken string          `thrift:"authenticationToken,1"`
	Notebook            *Types.Notebook `thrift:"notebook,2"`
}

func NewCreateNotebookArgs() *CreateNotebookArgs {
	return &CreateNotebookArgs{}
}

func (p *CreateNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CreateNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.Notebook = Types.NewNotebook()
	if err := p.Notebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Notebook)
	}
	return nil
}

func (p *CreateNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CreateNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Notebook != nil {
		if err := oprot.WriteFieldBegin("notebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notebook: %s", p, err)
		}
		if err := p.Notebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Notebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notebook: %s", p, err)
		}
	}
	return err
}

func (p *CreateNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNotebookArgs(%+v)", *p)
}

type CreateNotebookResult struct {
	Success         *Types.Notebook             `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewCreateNotebookResult() *CreateNotebookResult {
	return &CreateNotebookResult{}
}

func (p *CreateNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CreateNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CreateNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CreateNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CreateNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CreateNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNotebookResult(%+v)", *p)
}

type UpdateNotebookArgs struct {
	AuthenticationToken string          `thrift:"authenticationToken,1"`
	Notebook            *Types.Notebook `thrift:"notebook,2"`
}

func NewUpdateNotebookArgs() *UpdateNotebookArgs {
	return &UpdateNotebookArgs{}
}

func (p *UpdateNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.Notebook = Types.NewNotebook()
	if err := p.Notebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Notebook)
	}
	return nil
}

func (p *UpdateNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Notebook != nil {
		if err := oprot.WriteFieldBegin("notebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notebook: %s", p, err)
		}
		if err := p.Notebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Notebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notebook: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNotebookArgs(%+v)", *p)
}

type UpdateNotebookResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUpdateNotebookResult() *UpdateNotebookResult {
	return &UpdateNotebookResult{}
}

func (p *UpdateNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UpdateNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNotebookResult(%+v)", *p)
}

type ExpungeNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewExpungeNotebookArgs() *ExpungeNotebookArgs {
	return &ExpungeNotebookArgs{}
}

func (p *ExpungeNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *ExpungeNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *ExpungeNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeNotebookArgs(%+v)", *p)
}

type ExpungeNotebookResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewExpungeNotebookResult() *ExpungeNotebookResult {
	return &ExpungeNotebookResult{}
}

func (p *ExpungeNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeNotebookResult(%+v)", *p)
}

type ListTagsArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewListTagsArgs() *ListTagsArgs {
	return &ListTagsArgs{}
}

func (p *ListTagsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListTagsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTags_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagsArgs(%+v)", *p)
}

type ListTagsResult struct {
	Success         []*Types.Tag                `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewListTagsResult() *ListTagsResult {
	return &ListTagsResult{}
}

func (p *ListTagsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Types.Tag, 0, size)
	for i := 0; i < size; i++ {
		_elem332 := Types.NewTag()
		if err := _elem332.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem332)
		}
		p.Success = append(p.Success, _elem332)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListTagsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListTagsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListTagsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTags_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagsResult(%+v)", *p)
}

type ListTagsByNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	NotebookGuid        Types.Guid `thrift:"notebookGuid,2"`
}

func NewListTagsByNotebookArgs() *ListTagsByNotebookArgs {
	return &ListTagsByNotebookArgs{}
}

func (p *ListTagsByNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagsByNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListTagsByNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NotebookGuid = Types.Guid(v)
	}
	return nil
}

func (p *ListTagsByNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTagsByNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagsByNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListTagsByNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:notebookGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
		return fmt.Errorf("%T.notebookGuid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:notebookGuid: %s", p, err)
	}
	return err
}

func (p *ListTagsByNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagsByNotebookArgs(%+v)", *p)
}

type ListTagsByNotebookResult struct {
	Success           []*Types.Tag                  `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewListTagsByNotebookResult() *ListTagsByNotebookResult {
	return &ListTagsByNotebookResult{}
}

func (p *ListTagsByNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTagsByNotebookResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Types.Tag, 0, size)
	for i := 0; i < size; i++ {
		_elem333 := Types.NewTag()
		if err := _elem333.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem333)
		}
		p.Success = append(p.Success, _elem333)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListTagsByNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListTagsByNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListTagsByNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ListTagsByNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTagsByNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTagsByNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsByNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsByNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsByNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ListTagsByNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTagsByNotebookResult(%+v)", *p)
}

type GetTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetTagArgs() *GetTagArgs {
	return &GetTagArgs{}
}

func (p *GetTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetTagArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagArgs(%+v)", *p)
}

type GetTagResult struct {
	Success           *Types.Tag                    `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetTagResult() *GetTagResult {
	return &GetTagResult{}
}

func (p *GetTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTagResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewTag()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagResult(%+v)", *p)
}

type CreateTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Tag                 *Types.Tag `thrift:"tag,2"`
}

func NewCreateTagArgs() *CreateTagArgs {
	return &CreateTagArgs{}
}

func (p *CreateTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CreateTagArgs) readField2(iprot thrift.TProtocol) error {
	p.Tag = Types.NewTag()
	if err := p.Tag.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Tag)
	}
	return nil
}

func (p *CreateTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CreateTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Tag != nil {
		if err := oprot.WriteFieldBegin("tag", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tag: %s", p, err)
		}
		if err := p.Tag.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Tag)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tag: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagArgs(%+v)", *p)
}

type CreateTagResult struct {
	Success           *Types.Tag                    `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewCreateTagResult() *CreateTagResult {
	return &CreateTagResult{}
}

func (p *CreateTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTagResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewTag()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CreateTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CreateTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CreateTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *CreateTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *CreateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagResult(%+v)", *p)
}

type UpdateTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Tag                 *Types.Tag `thrift:"tag,2"`
}

func NewUpdateTagArgs() *UpdateTagArgs {
	return &UpdateTagArgs{}
}

func (p *UpdateTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateTagArgs) readField2(iprot thrift.TProtocol) error {
	p.Tag = Types.NewTag()
	if err := p.Tag.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Tag)
	}
	return nil
}

func (p *UpdateTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Tag != nil {
		if err := oprot.WriteFieldBegin("tag", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:tag: %s", p, err)
		}
		if err := p.Tag.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Tag)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:tag: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTagArgs(%+v)", *p)
}

type UpdateTagResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUpdateTagResult() *UpdateTagResult {
	return &UpdateTagResult{}
}

func (p *UpdateTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTagResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UpdateTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTagResult(%+v)", *p)
}

type UntagAllArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewUntagAllArgs() *UntagAllArgs {
	return &UntagAllArgs{}
}

func (p *UntagAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UntagAllArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UntagAllArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *UntagAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("untagAll_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UntagAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UntagAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *UntagAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UntagAllArgs(%+v)", *p)
}

type UntagAllResult struct {
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUntagAllResult() *UntagAllResult {
	return &UntagAllResult{}
}

func (p *UntagAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UntagAllResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UntagAllResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UntagAllResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UntagAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("untagAll_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UntagAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UntagAllResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UntagAllResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UntagAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UntagAllResult(%+v)", *p)
}

type ExpungeTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewExpungeTagArgs() *ExpungeTagArgs {
	return &ExpungeTagArgs{}
}

func (p *ExpungeTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeTagArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *ExpungeTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeTag_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *ExpungeTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeTagArgs(%+v)", *p)
}

type ExpungeTagResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewExpungeTagResult() *ExpungeTagResult {
	return &ExpungeTagResult{}
}

func (p *ExpungeTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeTagResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeTag_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeTagResult(%+v)", *p)
}

type ListSearchesArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewListSearchesArgs() *ListSearchesArgs {
	return &ListSearchesArgs{}
}

func (p *ListSearchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListSearchesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListSearchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSearches_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListSearchesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListSearchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSearchesArgs(%+v)", *p)
}

type ListSearchesResult struct {
	Success         []*Types.SavedSearch        `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewListSearchesResult() *ListSearchesResult {
	return &ListSearchesResult{}
}

func (p *ListSearchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListSearchesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Types.SavedSearch, 0, size)
	for i := 0; i < size; i++ {
		_elem334 := Types.NewSavedSearch()
		if err := _elem334.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem334)
		}
		p.Success = append(p.Success, _elem334)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListSearchesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListSearchesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListSearchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSearches_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListSearchesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListSearchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListSearchesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListSearchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSearchesResult(%+v)", *p)
}

type GetSearchArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetSearchArgs() *GetSearchArgs {
	return &GetSearchArgs{}
}

func (p *GetSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetSearchArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSearch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSearchArgs(%+v)", *p)
}

type GetSearchResult struct {
	Success           *Types.SavedSearch            `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetSearchResult() *GetSearchResult {
	return &GetSearchResult{}
}

func (p *GetSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSearchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewSavedSearch()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetSearchResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSearch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSearchResult(%+v)", *p)
}

type CreateSearchArgs struct {
	AuthenticationToken string             `thrift:"authenticationToken,1"`
	Search              *Types.SavedSearch `thrift:"search,2"`
}

func NewCreateSearchArgs() *CreateSearchArgs {
	return &CreateSearchArgs{}
}

func (p *CreateSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CreateSearchArgs) readField2(iprot thrift.TProtocol) error {
	p.Search = Types.NewSavedSearch()
	if err := p.Search.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Search)
	}
	return nil
}

func (p *CreateSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSearch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CreateSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Search != nil {
		if err := oprot.WriteFieldBegin("search", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:search: %s", p, err)
		}
		if err := p.Search.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Search)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:search: %s", p, err)
		}
	}
	return err
}

func (p *CreateSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSearchArgs(%+v)", *p)
}

type CreateSearchResult struct {
	Success         *Types.SavedSearch          `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewCreateSearchResult() *CreateSearchResult {
	return &CreateSearchResult{}
}

func (p *CreateSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSearchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewSavedSearch()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CreateSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CreateSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CreateSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSearch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CreateSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CreateSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSearchResult(%+v)", *p)
}

type UpdateSearchArgs struct {
	AuthenticationToken string             `thrift:"authenticationToken,1"`
	Search              *Types.SavedSearch `thrift:"search,2"`
}

func NewUpdateSearchArgs() *UpdateSearchArgs {
	return &UpdateSearchArgs{}
}

func (p *UpdateSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateSearchArgs) readField2(iprot thrift.TProtocol) error {
	p.Search = Types.NewSavedSearch()
	if err := p.Search.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Search)
	}
	return nil
}

func (p *UpdateSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSearch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Search != nil {
		if err := oprot.WriteFieldBegin("search", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:search: %s", p, err)
		}
		if err := p.Search.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Search)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:search: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSearchArgs(%+v)", *p)
}

type UpdateSearchResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUpdateSearchResult() *UpdateSearchResult {
	return &UpdateSearchResult{}
}

func (p *UpdateSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSearchResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateSearchResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSearch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UpdateSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSearchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSearchResult(%+v)", *p)
}

type ExpungeSearchArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewExpungeSearchArgs() *ExpungeSearchArgs {
	return &ExpungeSearchArgs{}
}

func (p *ExpungeSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeSearchArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *ExpungeSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSearch_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *ExpungeSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeSearchArgs(%+v)", *p)
}

type ExpungeSearchResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewExpungeSearchResult() *ExpungeSearchResult {
	return &ExpungeSearchResult{}
}

func (p *ExpungeSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeSearchResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeSearchResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSearch_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSearchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeSearchResult(%+v)", *p)
}

type FindNotesArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1"`
	Filter              *NoteFilter `thrift:"filter,2"`
	Offset              int32       `thrift:"offset,3"`
	MaxNotes            int32       `thrift:"maxNotes,4"`
}

func NewFindNotesArgs() *FindNotesArgs {
	return &FindNotesArgs{}
}

func (p *FindNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNotesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *FindNotesArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = NewNoteFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *FindNotesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindNotesArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxNotes = v
	}
	return nil
}

func (p *FindNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *FindNotesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:filter: %s", p, err)
		}
		if err := p.Filter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Filter)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:filter: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offset: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offset: %s", p, err)
	}
	return err
}

func (p *FindNotesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:maxNotes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxNotes)); err != nil {
		return fmt.Errorf("%T.maxNotes (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:maxNotes: %s", p, err)
	}
	return err
}

func (p *FindNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNotesArgs(%+v)", *p)
}

type FindNotesResult struct {
	Success           *NoteList                     `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewFindNotesResult() *FindNotesResult {
	return &FindNotesResult{}
}

func (p *FindNotesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNotesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewNoteList()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *FindNotesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *FindNotesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *FindNotesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *FindNotesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNotesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNotesResult(%+v)", *p)
}

type FindNoteOffsetArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1"`
	Filter              *NoteFilter `thrift:"filter,2"`
	Guid                Types.Guid  `thrift:"guid,3"`
}

func NewFindNoteOffsetArgs() *FindNoteOffsetArgs {
	return &FindNoteOffsetArgs{}
}

func (p *FindNoteOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNoteOffsetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *FindNoteOffsetArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = NewNoteFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *FindNoteOffsetArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *FindNoteOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNoteOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *FindNoteOffsetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:filter: %s", p, err)
		}
		if err := p.Filter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Filter)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:filter: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteOffsetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:guid: %s", p, err)
	}
	return err
}

func (p *FindNoteOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNoteOffsetArgs(%+v)", *p)
}

type FindNoteOffsetResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewFindNoteOffsetResult() *FindNoteOffsetResult {
	return &FindNoteOffsetResult{}
}

func (p *FindNoteOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNoteOffsetResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *FindNoteOffsetResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *FindNoteOffsetResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *FindNoteOffsetResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *FindNoteOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNoteOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *FindNoteOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteOffsetResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteOffsetResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNoteOffsetResult(%+v)", *p)
}

type FindNotesMetadataArgs struct {
	AuthenticationToken string                   `thrift:"authenticationToken,1"`
	Filter              *NoteFilter              `thrift:"filter,2"`
	Offset              int32                    `thrift:"offset,3"`
	MaxNotes            int32                    `thrift:"maxNotes,4"`
	ResultSpec          *NotesMetadataResultSpec `thrift:"resultSpec,5"`
}

func NewFindNotesMetadataArgs() *FindNotesMetadataArgs {
	return &FindNotesMetadataArgs{}
}

func (p *FindNotesMetadataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNotesMetadataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *FindNotesMetadataArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = NewNoteFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *FindNotesMetadataArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FindNotesMetadataArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.MaxNotes = v
	}
	return nil
}

func (p *FindNotesMetadataArgs) readField5(iprot thrift.TProtocol) error {
	p.ResultSpec = NewNotesMetadataResultSpec()
	if err := p.ResultSpec.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ResultSpec)
	}
	return nil
}

func (p *FindNotesMetadataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotesMetadata_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNotesMetadataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *FindNotesMetadataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:filter: %s", p, err)
		}
		if err := p.Filter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Filter)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:filter: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesMetadataArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:offset: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return fmt.Errorf("%T.offset (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:offset: %s", p, err)
	}
	return err
}

func (p *FindNotesMetadataArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:maxNotes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxNotes)); err != nil {
		return fmt.Errorf("%T.maxNotes (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:maxNotes: %s", p, err)
	}
	return err
}

func (p *FindNotesMetadataArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if p.ResultSpec != nil {
		if err := oprot.WriteFieldBegin("resultSpec", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:resultSpec: %s", p, err)
		}
		if err := p.ResultSpec.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ResultSpec)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:resultSpec: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesMetadataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNotesMetadataArgs(%+v)", *p)
}

type FindNotesMetadataResult struct {
	Success           *NotesMetadataList            `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewFindNotesMetadataResult() *FindNotesMetadataResult {
	return &FindNotesMetadataResult{}
}

func (p *FindNotesMetadataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNotesMetadataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewNotesMetadataList()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *FindNotesMetadataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *FindNotesMetadataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *FindNotesMetadataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *FindNotesMetadataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotesMetadata_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNotesMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesMetadataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesMetadataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesMetadataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *FindNotesMetadataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNotesMetadataResult(%+v)", *p)
}

type FindNoteCountsArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1"`
	Filter              *NoteFilter `thrift:"filter,2"`
	WithTrash           bool        `thrift:"withTrash,3"`
}

func NewFindNoteCountsArgs() *FindNoteCountsArgs {
	return &FindNoteCountsArgs{}
}

func (p *FindNoteCountsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNoteCountsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *FindNoteCountsArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = NewNoteFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *FindNoteCountsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.WithTrash = v
	}
	return nil
}

func (p *FindNoteCountsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteCounts_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNoteCountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *FindNoteCountsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:filter: %s", p, err)
		}
		if err := p.Filter.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Filter)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:filter: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteCountsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withTrash", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:withTrash: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithTrash)); err != nil {
		return fmt.Errorf("%T.withTrash (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:withTrash: %s", p, err)
	}
	return err
}

func (p *FindNoteCountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNoteCountsArgs(%+v)", *p)
}

type FindNoteCountsResult struct {
	Success           *NoteCollectionCounts         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewFindNoteCountsResult() *FindNoteCountsResult {
	return &FindNoteCountsResult{}
}

func (p *FindNoteCountsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindNoteCountsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewNoteCollectionCounts()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *FindNoteCountsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *FindNoteCountsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *FindNoteCountsResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *FindNoteCountsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteCounts_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindNoteCountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteCountsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteCountsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteCountsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *FindNoteCountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindNoteCountsResult(%+v)", *p)
}

type GetNoteArgs struct {
	AuthenticationToken        string     `thrift:"authenticationToken,1"`
	Guid                       Types.Guid `thrift:"guid,2"`
	WithContent                bool       `thrift:"withContent,3"`
	WithResourcesData          bool       `thrift:"withResourcesData,4"`
	WithResourcesRecognition   bool       `thrift:"withResourcesRecognition,5"`
	WithResourcesAlternateData bool       `thrift:"withResourcesAlternateData,6"`
}

func NewGetNoteArgs() *GetNoteArgs {
	return &GetNoteArgs{}
}

func (p *GetNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.WithContent = v
	}
	return nil
}

func (p *GetNoteArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WithResourcesData = v
	}
	return nil
}

func (p *GetNoteArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.WithResourcesRecognition = v
	}
	return nil
}

func (p *GetNoteArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WithResourcesAlternateData = v
	}
	return nil
}

func (p *GetNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withContent", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:withContent: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithContent)); err != nil {
		return fmt.Errorf("%T.withContent (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:withContent: %s", p, err)
	}
	return err
}

func (p *GetNoteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:withResourcesData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesData)); err != nil {
		return fmt.Errorf("%T.withResourcesData (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:withResourcesData: %s", p, err)
	}
	return err
}

func (p *GetNoteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesRecognition", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:withResourcesRecognition: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesRecognition)); err != nil {
		return fmt.Errorf("%T.withResourcesRecognition (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:withResourcesRecognition: %s", p, err)
	}
	return err
}

func (p *GetNoteArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesAlternateData", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:withResourcesAlternateData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesAlternateData)); err != nil {
		return fmt.Errorf("%T.withResourcesAlternateData (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:withResourcesAlternateData: %s", p, err)
	}
	return err
}

func (p *GetNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteArgs(%+v)", *p)
}

type GetNoteResult struct {
	Success           *Types.Note                   `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteResult() *GetNoteResult {
	return &GetNoteResult{}
}

func (p *GetNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNote()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteResult(%+v)", *p)
}

type GetNoteApplicationDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetNoteApplicationDataArgs() *GetNoteApplicationDataArgs {
	return &GetNoteApplicationDataArgs{}
}

func (p *GetNoteApplicationDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteApplicationDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteApplicationDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteApplicationDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationData_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteApplicationDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteApplicationDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNoteApplicationDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteApplicationDataArgs(%+v)", *p)
}

type GetNoteApplicationDataResult struct {
	Success           *Types.LazyMap                `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteApplicationDataResult() *GetNoteApplicationDataResult {
	return &GetNoteApplicationDataResult{}
}

func (p *GetNoteApplicationDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteApplicationDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewLazyMap()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetNoteApplicationDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteApplicationDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteApplicationDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteApplicationDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationData_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteApplicationDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteApplicationDataResult(%+v)", *p)
}

type GetNoteApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	Key                 string     `thrift:"key,3"`
}

func NewGetNoteApplicationDataEntryArgs() *GetNoteApplicationDataEntryArgs {
	return &GetNoteApplicationDataEntryArgs{}
}

func (p *GetNoteApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetNoteApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationDataEntry_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNoteApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *GetNoteApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteApplicationDataEntryArgs(%+v)", *p)
}

type GetNoteApplicationDataEntryResult struct {
	Success           string                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteApplicationDataEntryResult() *GetNoteApplicationDataEntryResult {
	return &GetNoteApplicationDataEntryResult{}
}

func (p *GetNoteApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetNoteApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationDataEntry_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetNoteApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteApplicationDataEntryResult(%+v)", *p)
}

type SetNoteApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	Key                 string     `thrift:"key,3"`
	Value               string     `thrift:"value,4"`
}

func NewSetNoteApplicationDataEntryArgs() *SetNoteApplicationDataEntryArgs {
	return &SetNoteApplicationDataEntryArgs{}
}

func (p *SetNoteApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *SetNoteApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *SetNoteApplicationDataEntryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *SetNoteApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNoteApplicationDataEntry_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *SetNoteApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *SetNoteApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *SetNoteApplicationDataEntryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:value: %s", p, err)
	}
	return err
}

func (p *SetNoteApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetNoteApplicationDataEntryArgs(%+v)", *p)
}

type SetNoteApplicationDataEntryResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewSetNoteApplicationDataEntryResult() *SetNoteApplicationDataEntryResult {
	return &SetNoteApplicationDataEntryResult{}
}

func (p *SetNoteApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *SetNoteApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNoteApplicationDataEntry_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetNoteApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *SetNoteApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *SetNoteApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *SetNoteApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *SetNoteApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetNoteApplicationDataEntryResult(%+v)", *p)
}

type UnsetNoteApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	Key                 string     `thrift:"key,3"`
}

func NewUnsetNoteApplicationDataEntryArgs() *UnsetNoteApplicationDataEntryArgs {
	return &UnsetNoteApplicationDataEntryArgs{}
}

func (p *UnsetNoteApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetNoteApplicationDataEntry_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnsetNoteApplicationDataEntryArgs(%+v)", *p)
}

type UnsetNoteApplicationDataEntryResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUnsetNoteApplicationDataEntryResult() *UnsetNoteApplicationDataEntryResult {
	return &UnsetNoteApplicationDataEntryResult{}
}

func (p *UnsetNoteApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetNoteApplicationDataEntry_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UnsetNoteApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UnsetNoteApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnsetNoteApplicationDataEntryResult(%+v)", *p)
}

type GetNoteContentArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetNoteContentArgs() *GetNoteContentArgs {
	return &GetNoteContentArgs{}
}

func (p *GetNoteContentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteContentArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteContentArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteContentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteContent_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteContentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteContentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNoteContentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteContentArgs(%+v)", *p)
}

type GetNoteContentResult struct {
	Success           string                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteContentResult() *GetNoteContentResult {
	return &GetNoteContentResult{}
}

func (p *GetNoteContentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteContentResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetNoteContentResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteContentResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteContentResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteContentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteContent_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteContentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetNoteContentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteContentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteContentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteContentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteContentResult(%+v)", *p)
}

type GetNoteSearchTextArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	NoteOnly            bool       `thrift:"noteOnly,3"`
	TokenizeForIndexing bool       `thrift:"tokenizeForIndexing,4"`
}

func NewGetNoteSearchTextArgs() *GetNoteSearchTextArgs {
	return &GetNoteSearchTextArgs{}
}

func (p *GetNoteSearchTextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteSearchTextArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteSearchTextArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteSearchTextArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NoteOnly = v
	}
	return nil
}

func (p *GetNoteSearchTextArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.TokenizeForIndexing = v
	}
	return nil
}

func (p *GetNoteSearchTextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteSearchText_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteSearchTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteSearchTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNoteSearchTextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteOnly", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:noteOnly: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NoteOnly)); err != nil {
		return fmt.Errorf("%T.noteOnly (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:noteOnly: %s", p, err)
	}
	return err
}

func (p *GetNoteSearchTextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenizeForIndexing", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:tokenizeForIndexing: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.TokenizeForIndexing)); err != nil {
		return fmt.Errorf("%T.tokenizeForIndexing (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:tokenizeForIndexing: %s", p, err)
	}
	return err
}

func (p *GetNoteSearchTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteSearchTextArgs(%+v)", *p)
}

type GetNoteSearchTextResult struct {
	Success           string                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteSearchTextResult() *GetNoteSearchTextResult {
	return &GetNoteSearchTextResult{}
}

func (p *GetNoteSearchTextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteSearchTextResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetNoteSearchTextResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteSearchTextResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteSearchTextResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteSearchTextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteSearchText_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteSearchTextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetNoteSearchTextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteSearchTextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteSearchTextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteSearchTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteSearchTextResult(%+v)", *p)
}

type GetResourceSearchTextArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetResourceSearchTextArgs() *GetResourceSearchTextArgs {
	return &GetResourceSearchTextArgs{}
}

func (p *GetResourceSearchTextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceSearchTextArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceSearchTextArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceSearchTextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceSearchText_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceSearchTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceSearchTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceSearchTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceSearchTextArgs(%+v)", *p)
}

type GetResourceSearchTextResult struct {
	Success           string                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceSearchTextResult() *GetResourceSearchTextResult {
	return &GetResourceSearchTextResult{}
}

func (p *GetResourceSearchTextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceSearchTextResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetResourceSearchTextResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceSearchTextResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceSearchTextResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceSearchTextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceSearchText_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceSearchTextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetResourceSearchTextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceSearchTextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceSearchTextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceSearchTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceSearchTextResult(%+v)", *p)
}

type GetNoteTagNamesArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetNoteTagNamesArgs() *GetNoteTagNamesArgs {
	return &GetNoteTagNamesArgs{}
}

func (p *GetNoteTagNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteTagNamesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteTagNamesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteTagNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteTagNames_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteTagNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteTagNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetNoteTagNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteTagNamesArgs(%+v)", *p)
}

type GetNoteTagNamesResult struct {
	Success           []string                      `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteTagNamesResult() *GetNoteTagNamesResult {
	return &GetNoteTagNamesResult{}
}

func (p *GetNoteTagNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteTagNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem335 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem335 = v
		}
		p.Success = append(p.Success, _elem335)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *GetNoteTagNamesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteTagNamesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteTagNamesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteTagNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteTagNames_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteTagNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteTagNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteTagNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteTagNamesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteTagNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteTagNamesResult(%+v)", *p)
}

type CreateNoteArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1"`
	Note                *Types.Note `thrift:"note,2"`
}

func NewCreateNoteArgs() *CreateNoteArgs {
	return &CreateNoteArgs{}
}

func (p *CreateNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CreateNoteArgs) readField2(iprot thrift.TProtocol) error {
	p.Note = Types.NewNote()
	if err := p.Note.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Note)
	}
	return nil
}

func (p *CreateNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CreateNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Note != nil {
		if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:note: %s", p, err)
		}
		if err := p.Note.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Note)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:note: %s", p, err)
		}
	}
	return err
}

func (p *CreateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNoteArgs(%+v)", *p)
}

type CreateNoteResult struct {
	Success           *Types.Note                   `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewCreateNoteResult() *CreateNoteResult {
	return &CreateNoteResult{}
}

func (p *CreateNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNote()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CreateNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CreateNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CreateNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *CreateNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CreateNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CreateNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *CreateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNoteResult(%+v)", *p)
}

type UpdateNoteArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1"`
	Note                *Types.Note `thrift:"note,2"`
}

func NewUpdateNoteArgs() *UpdateNoteArgs {
	return &UpdateNoteArgs{}
}

func (p *UpdateNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateNoteArgs) readField2(iprot thrift.TProtocol) error {
	p.Note = Types.NewNote()
	if err := p.Note.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Note)
	}
	return nil
}

func (p *UpdateNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Note != nil {
		if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:note: %s", p, err)
		}
		if err := p.Note.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Note)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:note: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNoteArgs(%+v)", *p)
}

type UpdateNoteResult struct {
	Success           *Types.Note                   `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUpdateNoteResult() *UpdateNoteResult {
	return &UpdateNoteResult{}
}

func (p *UpdateNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNote()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *UpdateNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNoteResult(%+v)", *p)
}

type DeleteNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewDeleteNoteArgs() *DeleteNoteArgs {
	return &DeleteNoteArgs{}
}

func (p *DeleteNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *DeleteNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *DeleteNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *DeleteNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *DeleteNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNoteArgs(%+v)", *p)
}

type DeleteNoteResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewDeleteNoteResult() *DeleteNoteResult {
	return &DeleteNoteResult{}
}

func (p *DeleteNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteNoteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DeleteNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *DeleteNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *DeleteNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *DeleteNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DeleteNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *DeleteNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *DeleteNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *DeleteNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNoteResult(%+v)", *p)
}

type ExpungeNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewExpungeNoteArgs() *ExpungeNoteArgs {
	return &ExpungeNoteArgs{}
}

func (p *ExpungeNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *ExpungeNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *ExpungeNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeNoteArgs(%+v)", *p)
}

type ExpungeNoteResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewExpungeNoteResult() *ExpungeNoteResult {
	return &ExpungeNoteResult{}
}

func (p *ExpungeNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeNoteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeNoteResult(%+v)", *p)
}

type ExpungeNotesArgs struct {
	AuthenticationToken string       `thrift:"authenticationToken,1"`
	NoteGuids           []Types.Guid `thrift:"noteGuids,2"`
}

func NewExpungeNotesArgs() *ExpungeNotesArgs {
	return &ExpungeNotesArgs{}
}

func (p *ExpungeNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeNotesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeNotesArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.NoteGuids = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem336 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem336 = Types.Guid(v)
		}
		p.NoteGuids = append(p.NoteGuids, _elem336)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ExpungeNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeNotesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NoteGuids != nil {
		if err := oprot.WriteFieldBegin("noteGuids", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:noteGuids: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.NoteGuids)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.NoteGuids {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:noteGuids: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeNotesArgs(%+v)", *p)
}

type ExpungeNotesResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewExpungeNotesResult() *ExpungeNotesResult {
	return &ExpungeNotesResult{}
}

func (p *ExpungeNotesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeNotesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeNotesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeNotesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeNotesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeNotesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeNotesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeNotesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeNotesResult(%+v)", *p)
}

type ExpungeInactiveNotesArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewExpungeInactiveNotesArgs() *ExpungeInactiveNotesArgs {
	return &ExpungeInactiveNotesArgs{}
}

func (p *ExpungeInactiveNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeInactiveNotesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeInactiveNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeInactiveNotes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeInactiveNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeInactiveNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeInactiveNotesArgs(%+v)", *p)
}

type ExpungeInactiveNotesResult struct {
	Success         int32                       `thrift:"success,0"`
	UserException   *Errors.EDAMUserException   `thrift:"userException,1"`
	SystemException *Errors.EDAMSystemException `thrift:"systemException,2"`
}

func NewExpungeInactiveNotesResult() *ExpungeInactiveNotesResult {
	return &ExpungeInactiveNotesResult{}
}

func (p *ExpungeInactiveNotesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeInactiveNotesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeInactiveNotesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeInactiveNotesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeInactiveNotesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeInactiveNotes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeInactiveNotesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeInactiveNotesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeInactiveNotesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeInactiveNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeInactiveNotesResult(%+v)", *p)
}

type CopyNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	NoteGuid            Types.Guid `thrift:"noteGuid,2"`
	ToNotebookGuid      Types.Guid `thrift:"toNotebookGuid,3"`
}

func NewCopyNoteArgs() *CopyNoteArgs {
	return &CopyNoteArgs{}
}

func (p *CopyNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CopyNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CopyNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoteGuid = Types.Guid(v)
	}
	return nil
}

func (p *CopyNoteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ToNotebookGuid = Types.Guid(v)
	}
	return nil
}

func (p *CopyNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("copyNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CopyNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CopyNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:noteGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return fmt.Errorf("%T.noteGuid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:noteGuid: %s", p, err)
	}
	return err
}

func (p *CopyNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toNotebookGuid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:toNotebookGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ToNotebookGuid)); err != nil {
		return fmt.Errorf("%T.toNotebookGuid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:toNotebookGuid: %s", p, err)
	}
	return err
}

func (p *CopyNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CopyNoteArgs(%+v)", *p)
}

type CopyNoteResult struct {
	Success           *Types.Note                   `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewCopyNoteResult() *CopyNoteResult {
	return &CopyNoteResult{}
}

func (p *CopyNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CopyNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNote()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CopyNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CopyNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CopyNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *CopyNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("copyNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CopyNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CopyNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CopyNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CopyNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *CopyNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CopyNoteResult(%+v)", *p)
}

type ListNoteVersionsArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	NoteGuid            Types.Guid `thrift:"noteGuid,2"`
}

func NewListNoteVersionsArgs() *ListNoteVersionsArgs {
	return &ListNoteVersionsArgs{}
}

func (p *ListNoteVersionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListNoteVersionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListNoteVersionsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoteGuid = Types.Guid(v)
	}
	return nil
}

func (p *ListNoteVersionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNoteVersions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListNoteVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListNoteVersionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:noteGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return fmt.Errorf("%T.noteGuid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:noteGuid: %s", p, err)
	}
	return err
}

func (p *ListNoteVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNoteVersionsArgs(%+v)", *p)
}

type ListNoteVersionsResult struct {
	Success           []*NoteVersionId              `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewListNoteVersionsResult() *ListNoteVersionsResult {
	return &ListNoteVersionsResult{}
}

func (p *ListNoteVersionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListNoteVersionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*NoteVersionId, 0, size)
	for i := 0; i < size; i++ {
		_elem337 := NewNoteVersionId()
		if err := _elem337.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem337)
		}
		p.Success = append(p.Success, _elem337)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListNoteVersionsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListNoteVersionsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListNoteVersionsResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ListNoteVersionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNoteVersions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListNoteVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListNoteVersionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListNoteVersionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListNoteVersionsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ListNoteVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNoteVersionsResult(%+v)", *p)
}

type GetNoteVersionArgs struct {
	AuthenticationToken        string     `thrift:"authenticationToken,1"`
	NoteGuid                   Types.Guid `thrift:"noteGuid,2"`
	UpdateSequenceNum          int32      `thrift:"updateSequenceNum,3"`
	WithResourcesData          bool       `thrift:"withResourcesData,4"`
	WithResourcesRecognition   bool       `thrift:"withResourcesRecognition,5"`
	WithResourcesAlternateData bool       `thrift:"withResourcesAlternateData,6"`
}

func NewGetNoteVersionArgs() *GetNoteVersionArgs {
	return &GetNoteVersionArgs{}
}

func (p *GetNoteVersionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteVersionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetNoteVersionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoteGuid = Types.Guid(v)
	}
	return nil
}

func (p *GetNoteVersionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *GetNoteVersionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WithResourcesData = v
	}
	return nil
}

func (p *GetNoteVersionArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.WithResourcesRecognition = v
	}
	return nil
}

func (p *GetNoteVersionArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WithResourcesAlternateData = v
	}
	return nil
}

func (p *GetNoteVersionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteVersion_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetNoteVersionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:noteGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return fmt.Errorf("%T.noteGuid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:noteGuid: %s", p, err)
	}
	return err
}

func (p *GetNoteVersionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:updateSequenceNum: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
		return fmt.Errorf("%T.updateSequenceNum (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:updateSequenceNum: %s", p, err)
	}
	return err
}

func (p *GetNoteVersionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:withResourcesData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesData)); err != nil {
		return fmt.Errorf("%T.withResourcesData (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:withResourcesData: %s", p, err)
	}
	return err
}

func (p *GetNoteVersionArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesRecognition", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:withResourcesRecognition: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesRecognition)); err != nil {
		return fmt.Errorf("%T.withResourcesRecognition (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:withResourcesRecognition: %s", p, err)
	}
	return err
}

func (p *GetNoteVersionArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesAlternateData", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:withResourcesAlternateData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesAlternateData)); err != nil {
		return fmt.Errorf("%T.withResourcesAlternateData (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:withResourcesAlternateData: %s", p, err)
	}
	return err
}

func (p *GetNoteVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteVersionArgs(%+v)", *p)
}

type GetNoteVersionResult struct {
	Success           *Types.Note                   `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetNoteVersionResult() *GetNoteVersionResult {
	return &GetNoteVersionResult{}
}

func (p *GetNoteVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetNoteVersionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNote()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetNoteVersionResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetNoteVersionResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetNoteVersionResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetNoteVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteVersion_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetNoteVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteVersionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteVersionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetNoteVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNoteVersionResult(%+v)", *p)
}

type GetResourceArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	WithData            bool       `thrift:"withData,3"`
	WithRecognition     bool       `thrift:"withRecognition,4"`
	WithAttributes      bool       `thrift:"withAttributes,5"`
	WithAlternateData   bool       `thrift:"withAlternateData,6"`
}

func NewGetResourceArgs() *GetResourceArgs {
	return &GetResourceArgs{}
}

func (p *GetResourceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.WithData = v
	}
	return nil
}

func (p *GetResourceArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WithRecognition = v
	}
	return nil
}

func (p *GetResourceArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.WithAttributes = v
	}
	return nil
}

func (p *GetResourceArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WithAlternateData = v
	}
	return nil
}

func (p *GetResourceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResource_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withData", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:withData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithData)); err != nil {
		return fmt.Errorf("%T.withData (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:withData: %s", p, err)
	}
	return err
}

func (p *GetResourceArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withRecognition", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:withRecognition: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithRecognition)); err != nil {
		return fmt.Errorf("%T.withRecognition (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:withRecognition: %s", p, err)
	}
	return err
}

func (p *GetResourceArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withAttributes", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:withAttributes: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithAttributes)); err != nil {
		return fmt.Errorf("%T.withAttributes (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:withAttributes: %s", p, err)
	}
	return err
}

func (p *GetResourceArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withAlternateData", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:withAlternateData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithAlternateData)); err != nil {
		return fmt.Errorf("%T.withAlternateData (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:withAlternateData: %s", p, err)
	}
	return err
}

func (p *GetResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceArgs(%+v)", *p)
}

type GetResourceResult struct {
	Success           *Types.Resource               `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceResult() *GetResourceResult {
	return &GetResourceResult{}
}

func (p *GetResourceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewResource()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetResourceResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResource_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceResult(%+v)", *p)
}

type GetResourceApplicationDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetResourceApplicationDataArgs() *GetResourceApplicationDataArgs {
	return &GetResourceApplicationDataArgs{}
}

func (p *GetResourceApplicationDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceApplicationDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceApplicationDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceApplicationDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationData_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceApplicationDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceApplicationDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceApplicationDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceApplicationDataArgs(%+v)", *p)
}

type GetResourceApplicationDataResult struct {
	Success           *Types.LazyMap                `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceApplicationDataResult() *GetResourceApplicationDataResult {
	return &GetResourceApplicationDataResult{}
}

func (p *GetResourceApplicationDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceApplicationDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewLazyMap()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetResourceApplicationDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceApplicationDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceApplicationDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceApplicationDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationData_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceApplicationDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceApplicationDataResult(%+v)", *p)
}

type GetResourceApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	Key                 string     `thrift:"key,3"`
}

func NewGetResourceApplicationDataEntryArgs() *GetResourceApplicationDataEntryArgs {
	return &GetResourceApplicationDataEntryArgs{}
}

func (p *GetResourceApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetResourceApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationDataEntry_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *GetResourceApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceApplicationDataEntryArgs(%+v)", *p)
}

type GetResourceApplicationDataEntryResult struct {
	Success           string                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceApplicationDataEntryResult() *GetResourceApplicationDataEntryResult {
	return &GetResourceApplicationDataEntryResult{}
}

func (p *GetResourceApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetResourceApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationDataEntry_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetResourceApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceApplicationDataEntryResult(%+v)", *p)
}

type SetResourceApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	Key                 string     `thrift:"key,3"`
	Value               string     `thrift:"value,4"`
}

func NewSetResourceApplicationDataEntryArgs() *SetResourceApplicationDataEntryArgs {
	return &SetResourceApplicationDataEntryArgs{}
}

func (p *SetResourceApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *SetResourceApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *SetResourceApplicationDataEntryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *SetResourceApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setResourceApplicationDataEntry_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *SetResourceApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *SetResourceApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *SetResourceApplicationDataEntryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:value: %s", p, err)
	}
	return err
}

func (p *SetResourceApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetResourceApplicationDataEntryArgs(%+v)", *p)
}

type SetResourceApplicationDataEntryResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewSetResourceApplicationDataEntryResult() *SetResourceApplicationDataEntryResult {
	return &SetResourceApplicationDataEntryResult{}
}

func (p *SetResourceApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *SetResourceApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setResourceApplicationDataEntry_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetResourceApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *SetResourceApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *SetResourceApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *SetResourceApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *SetResourceApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetResourceApplicationDataEntryResult(%+v)", *p)
}

type UnsetResourceApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
	Key                 string     `thrift:"key,3"`
}

func NewUnsetResourceApplicationDataEntryArgs() *UnsetResourceApplicationDataEntryArgs {
	return &UnsetResourceApplicationDataEntryArgs{}
}

func (p *UnsetResourceApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetResourceApplicationDataEntry_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnsetResourceApplicationDataEntryArgs(%+v)", *p)
}

type UnsetResourceApplicationDataEntryResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUnsetResourceApplicationDataEntryResult() *UnsetResourceApplicationDataEntryResult {
	return &UnsetResourceApplicationDataEntryResult{}
}

func (p *UnsetResourceApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetResourceApplicationDataEntry_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UnsetResourceApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UnsetResourceApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnsetResourceApplicationDataEntryResult(%+v)", *p)
}

type UpdateResourceArgs struct {
	AuthenticationToken string          `thrift:"authenticationToken,1"`
	Resource            *Types.Resource `thrift:"resource,2"`
}

func NewUpdateResourceArgs() *UpdateResourceArgs {
	return &UpdateResourceArgs{}
}

func (p *UpdateResourceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateResourceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateResourceArgs) readField2(iprot thrift.TProtocol) error {
	p.Resource = Types.NewResource()
	if err := p.Resource.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Resource)
	}
	return nil
}

func (p *UpdateResourceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateResource_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Resource != nil {
		if err := oprot.WriteFieldBegin("resource", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:resource: %s", p, err)
		}
		if err := p.Resource.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Resource)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:resource: %s", p, err)
		}
	}
	return err
}

func (p *UpdateResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResourceArgs(%+v)", *p)
}

type UpdateResourceResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewUpdateResourceResult() *UpdateResourceResult {
	return &UpdateResourceResult{}
}

func (p *UpdateResourceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateResourceResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateResourceResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateResourceResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateResourceResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateResourceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateResource_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UpdateResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResourceResult(%+v)", *p)
}

type GetResourceDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetResourceDataArgs() *GetResourceDataArgs {
	return &GetResourceDataArgs{}
}

func (p *GetResourceDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceData_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceDataArgs(%+v)", *p)
}

type GetResourceDataResult struct {
	Success           []byte                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceDataResult() *GetResourceDataResult {
	return &GetResourceDataResult{}
}

func (p *GetResourceDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceDataResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetResourceDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceData_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.BINARY, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceDataResult(%+v)", *p)
}

type GetResourceByHashArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	NoteGuid            Types.Guid `thrift:"noteGuid,2"`
	ContentHash         []byte     `thrift:"contentHash,3"`
	WithData            bool       `thrift:"withData,4"`
	WithRecognition     bool       `thrift:"withRecognition,5"`
	WithAlternateData   bool       `thrift:"withAlternateData,6"`
}

func NewGetResourceByHashArgs() *GetResourceByHashArgs {
	return &GetResourceByHashArgs{}
}

func (p *GetResourceByHashArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceByHashArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceByHashArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoteGuid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceByHashArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ContentHash = v
	}
	return nil
}

func (p *GetResourceByHashArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WithData = v
	}
	return nil
}

func (p *GetResourceByHashArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.WithRecognition = v
	}
	return nil
}

func (p *GetResourceByHashArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WithAlternateData = v
	}
	return nil
}

func (p *GetResourceByHashArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceByHash_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceByHashArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceByHashArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:noteGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return fmt.Errorf("%T.noteGuid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:noteGuid: %s", p, err)
	}
	return err
}

func (p *GetResourceByHashArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ContentHash != nil {
		if err := oprot.WriteFieldBegin("contentHash", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:contentHash: %s", p, err)
		}
		if err := oprot.WriteBinary(p.ContentHash); err != nil {
			return fmt.Errorf("%T.contentHash (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:contentHash: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceByHashArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:withData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithData)); err != nil {
		return fmt.Errorf("%T.withData (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:withData: %s", p, err)
	}
	return err
}

func (p *GetResourceByHashArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withRecognition", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:withRecognition: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithRecognition)); err != nil {
		return fmt.Errorf("%T.withRecognition (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:withRecognition: %s", p, err)
	}
	return err
}

func (p *GetResourceByHashArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withAlternateData", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:withAlternateData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WithAlternateData)); err != nil {
		return fmt.Errorf("%T.withAlternateData (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:withAlternateData: %s", p, err)
	}
	return err
}

func (p *GetResourceByHashArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceByHashArgs(%+v)", *p)
}

type GetResourceByHashResult struct {
	Success           *Types.Resource               `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceByHashResult() *GetResourceByHashResult {
	return &GetResourceByHashResult{}
}

func (p *GetResourceByHashResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceByHashResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewResource()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetResourceByHashResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceByHashResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceByHashResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceByHashResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceByHash_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceByHashResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceByHashResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceByHashResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceByHashResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceByHashResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceByHashResult(%+v)", *p)
}

type GetResourceRecognitionArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetResourceRecognitionArgs() *GetResourceRecognitionArgs {
	return &GetResourceRecognitionArgs{}
}

func (p *GetResourceRecognitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceRecognitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceRecognitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceRecognitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceRecognition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceRecognitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceRecognitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceRecognitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceRecognitionArgs(%+v)", *p)
}

type GetResourceRecognitionResult struct {
	Success           []byte                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceRecognitionResult() *GetResourceRecognitionResult {
	return &GetResourceRecognitionResult{}
}

func (p *GetResourceRecognitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceRecognitionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetResourceRecognitionResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceRecognitionResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceRecognitionResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceRecognitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceRecognition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceRecognitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.BINARY, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceRecognitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceRecognitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceRecognitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceRecognitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceRecognitionResult(%+v)", *p)
}

type GetResourceAlternateDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetResourceAlternateDataArgs() *GetResourceAlternateDataArgs {
	return &GetResourceAlternateDataArgs{}
}

func (p *GetResourceAlternateDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceAlternateDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceAlternateDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceAlternateDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAlternateData_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceAlternateDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceAlternateDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceAlternateDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceAlternateDataArgs(%+v)", *p)
}

type GetResourceAlternateDataResult struct {
	Success           []byte                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceAlternateDataResult() *GetResourceAlternateDataResult {
	return &GetResourceAlternateDataResult{}
}

func (p *GetResourceAlternateDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceAlternateDataResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetResourceAlternateDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceAlternateDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceAlternateDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceAlternateDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAlternateData_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceAlternateDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.BINARY, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAlternateDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAlternateDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAlternateDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAlternateDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceAlternateDataResult(%+v)", *p)
}

type GetResourceAttributesArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewGetResourceAttributesArgs() *GetResourceAttributesArgs {
	return &GetResourceAttributesArgs{}
}

func (p *GetResourceAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceAttributesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetResourceAttributesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *GetResourceAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAttributes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetResourceAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *GetResourceAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceAttributesArgs(%+v)", *p)
}

type GetResourceAttributesResult struct {
	Success           *Types.ResourceAttributes     `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewGetResourceAttributesResult() *GetResourceAttributesResult {
	return &GetResourceAttributesResult{}
}

func (p *GetResourceAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResourceAttributesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewResourceAttributes()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetResourceAttributesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetResourceAttributesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetResourceAttributesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetResourceAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAttributes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResourceAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAttributesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAttributesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetResourceAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResourceAttributesResult(%+v)", *p)
}

type GetPublicNotebookArgs struct {
	UserId    Types.UserID `thrift:"userId,1"`
	PublicUri string       `thrift:"publicUri,2"`
}

func NewGetPublicNotebookArgs() *GetPublicNotebookArgs {
	return &GetPublicNotebookArgs{}
}

func (p *GetPublicNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPublicNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UserId = Types.UserID(v)
	}
	return nil
}

func (p *GetPublicNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PublicUri = v
	}
	return nil
}

func (p *GetPublicNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublicNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPublicNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return fmt.Errorf("%T.userId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userId: %s", p, err)
	}
	return err
}

func (p *GetPublicNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publicUri", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:publicUri: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PublicUri)); err != nil {
		return fmt.Errorf("%T.publicUri (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:publicUri: %s", p, err)
	}
	return err
}

func (p *GetPublicNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublicNotebookArgs(%+v)", *p)
}

type GetPublicNotebookResult struct {
	Success           *Types.Notebook               `thrift:"success,0"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
}

func NewGetPublicNotebookResult() *GetPublicNotebookResult {
	return &GetPublicNotebookResult{}
}

func (p *GetPublicNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPublicNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetPublicNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetPublicNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetPublicNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublicNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPublicNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetPublicNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublicNotebookResult(%+v)", *p)
}

type CreateSharedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1"`
	SharedNotebook      *Types.SharedNotebook `thrift:"sharedNotebook,2"`
}

func NewCreateSharedNotebookArgs() *CreateSharedNotebookArgs {
	return &CreateSharedNotebookArgs{}
}

func (p *CreateSharedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSharedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CreateSharedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.SharedNotebook = Types.NewSharedNotebook()
	if err := p.SharedNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SharedNotebook)
	}
	return nil
}

func (p *CreateSharedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSharedNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSharedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CreateSharedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SharedNotebook != nil {
		if err := oprot.WriteFieldBegin("sharedNotebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:sharedNotebook: %s", p, err)
		}
		if err := p.SharedNotebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SharedNotebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:sharedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *CreateSharedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSharedNotebookArgs(%+v)", *p)
}

type CreateSharedNotebookResult struct {
	Success           *Types.SharedNotebook         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewCreateSharedNotebookResult() *CreateSharedNotebookResult {
	return &CreateSharedNotebookResult{}
}

func (p *CreateSharedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateSharedNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewSharedNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CreateSharedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CreateSharedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *CreateSharedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CreateSharedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSharedNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateSharedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateSharedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CreateSharedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *CreateSharedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CreateSharedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSharedNotebookResult(%+v)", *p)
}

type UpdateSharedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1"`
	SharedNotebook      *Types.SharedNotebook `thrift:"sharedNotebook,2"`
}

func NewUpdateSharedNotebookArgs() *UpdateSharedNotebookArgs {
	return &UpdateSharedNotebookArgs{}
}

func (p *UpdateSharedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSharedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateSharedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.SharedNotebook = Types.NewSharedNotebook()
	if err := p.SharedNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SharedNotebook)
	}
	return nil
}

func (p *UpdateSharedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSharedNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSharedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateSharedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SharedNotebook != nil {
		if err := oprot.WriteFieldBegin("sharedNotebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:sharedNotebook: %s", p, err)
		}
		if err := p.SharedNotebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SharedNotebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:sharedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSharedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSharedNotebookArgs(%+v)", *p)
}

type UpdateSharedNotebookResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewUpdateSharedNotebookResult() *UpdateSharedNotebookResult {
	return &UpdateSharedNotebookResult{}
}

func (p *UpdateSharedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSharedNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateSharedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateSharedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateSharedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateSharedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSharedNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSharedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UpdateSharedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSharedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSharedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSharedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSharedNotebookResult(%+v)", *p)
}

type SetSharedNotebookRecipientSettingsArgs struct {
	AuthenticationToken string                                 `thrift:"authenticationToken,1"`
	SharedNotebookId    int64                                  `thrift:"sharedNotebookId,2"`
	RecipientSettings   *Types.SharedNotebookRecipientSettings `thrift:"recipientSettings,3"`
}

func NewSetSharedNotebookRecipientSettingsArgs() *SetSharedNotebookRecipientSettingsArgs {
	return &SetSharedNotebookRecipientSettingsArgs{}
}

func (p *SetSharedNotebookRecipientSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.SharedNotebookId = v
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsArgs) readField3(iprot thrift.TProtocol) error {
	p.RecipientSettings = Types.NewSharedNotebookRecipientSettings()
	if err := p.RecipientSettings.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RecipientSettings)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setSharedNotebookRecipientSettings_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sharedNotebookId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sharedNotebookId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SharedNotebookId)); err != nil {
		return fmt.Errorf("%T.sharedNotebookId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sharedNotebookId: %s", p, err)
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.RecipientSettings != nil {
		if err := oprot.WriteFieldBegin("recipientSettings", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:recipientSettings: %s", p, err)
		}
		if err := p.RecipientSettings.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.RecipientSettings)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:recipientSettings: %s", p, err)
		}
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetSharedNotebookRecipientSettingsArgs(%+v)", *p)
}

type SetSharedNotebookRecipientSettingsResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewSetSharedNotebookRecipientSettingsResult() *SetSharedNotebookRecipientSettingsResult {
	return &SetSharedNotebookRecipientSettingsResult{}
}

func (p *SetSharedNotebookRecipientSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setSharedNotebookRecipientSettings_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SetSharedNotebookRecipientSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *SetSharedNotebookRecipientSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetSharedNotebookRecipientSettingsResult(%+v)", *p)
}

type SendMessageToSharedNotebookMembersArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	NotebookGuid        Types.Guid `thrift:"notebookGuid,2"`
	MessageText         string     `thrift:"messageText,3"`
	Recipients          []string   `thrift:"recipients,4"`
}

func NewSendMessageToSharedNotebookMembersArgs() *SendMessageToSharedNotebookMembersArgs {
	return &SendMessageToSharedNotebookMembersArgs{}
}

func (p *SendMessageToSharedNotebookMembersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NotebookGuid = Types.Guid(v)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MessageText = v
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Recipients = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem338 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem338 = v
		}
		p.Recipients = append(p.Recipients, _elem338)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToSharedNotebookMembers_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:notebookGuid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
		return fmt.Errorf("%T.notebookGuid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:notebookGuid: %s", p, err)
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageText", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MessageText)); err != nil {
		return fmt.Errorf("%T.messageText (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageText: %s", p, err)
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Recipients != nil {
		if err := oprot.WriteFieldBegin("recipients", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:recipients: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Recipients)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Recipients {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:recipients: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageToSharedNotebookMembersArgs(%+v)", *p)
}

type SendMessageToSharedNotebookMembersResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewSendMessageToSharedNotebookMembersResult() *SendMessageToSharedNotebookMembersResult {
	return &SendMessageToSharedNotebookMembersResult{}
}

func (p *SendMessageToSharedNotebookMembersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToSharedNotebookMembers_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMessageToSharedNotebookMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *SendMessageToSharedNotebookMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageToSharedNotebookMembersResult(%+v)", *p)
}

type ListSharedNotebooksArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewListSharedNotebooksArgs() *ListSharedNotebooksArgs {
	return &ListSharedNotebooksArgs{}
}

func (p *ListSharedNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListSharedNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListSharedNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSharedNotebooks_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListSharedNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListSharedNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSharedNotebooksArgs(%+v)", *p)
}

type ListSharedNotebooksResult struct {
	Success           []*Types.SharedNotebook       `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewListSharedNotebooksResult() *ListSharedNotebooksResult {
	return &ListSharedNotebooksResult{}
}

func (p *ListSharedNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListSharedNotebooksResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Types.SharedNotebook, 0, size)
	for i := 0; i < size; i++ {
		_elem339 := Types.NewSharedNotebook()
		if err := _elem339.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem339)
		}
		p.Success = append(p.Success, _elem339)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListSharedNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListSharedNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ListSharedNotebooksResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListSharedNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSharedNotebooks_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListSharedNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListSharedNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListSharedNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ListSharedNotebooksResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListSharedNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSharedNotebooksResult(%+v)", *p)
}

type ExpungeSharedNotebooksArgs struct {
	AuthenticationToken string  `thrift:"authenticationToken,1"`
	SharedNotebookIds   []int64 `thrift:"sharedNotebookIds,2"`
}

func NewExpungeSharedNotebooksArgs() *ExpungeSharedNotebooksArgs {
	return &ExpungeSharedNotebooksArgs{}
}

func (p *ExpungeSharedNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeSharedNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeSharedNotebooksArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SharedNotebookIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem340 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem340 = v
		}
		p.SharedNotebookIds = append(p.SharedNotebookIds, _elem340)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ExpungeSharedNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSharedNotebooks_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeSharedNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeSharedNotebooksArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SharedNotebookIds != nil {
		if err := oprot.WriteFieldBegin("sharedNotebookIds", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:sharedNotebookIds: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.SharedNotebookIds)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.SharedNotebookIds {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:sharedNotebookIds: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSharedNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeSharedNotebooksArgs(%+v)", *p)
}

type ExpungeSharedNotebooksResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewExpungeSharedNotebooksResult() *ExpungeSharedNotebooksResult {
	return &ExpungeSharedNotebooksResult{}
}

func (p *ExpungeSharedNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeSharedNotebooksResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeSharedNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeSharedNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeSharedNotebooksResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeSharedNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSharedNotebooks_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeSharedNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeSharedNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSharedNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSharedNotebooksResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeSharedNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeSharedNotebooksResult(%+v)", *p)
}

type CreateLinkedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1"`
	LinkedNotebook      *Types.LinkedNotebook `thrift:"linkedNotebook,2"`
}

func NewCreateLinkedNotebookArgs() *CreateLinkedNotebookArgs {
	return &CreateLinkedNotebookArgs{}
}

func (p *CreateLinkedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateLinkedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *CreateLinkedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = Types.NewLinkedNotebook()
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LinkedNotebook)
	}
	return nil
}

func (p *CreateLinkedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLinkedNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateLinkedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *CreateLinkedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.LinkedNotebook != nil {
		if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:linkedNotebook: %s", p, err)
		}
		if err := p.LinkedNotebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LinkedNotebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:linkedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *CreateLinkedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLinkedNotebookArgs(%+v)", *p)
}

type CreateLinkedNotebookResult struct {
	Success           *Types.LinkedNotebook         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewCreateLinkedNotebookResult() *CreateLinkedNotebookResult {
	return &CreateLinkedNotebookResult{}
}

func (p *CreateLinkedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateLinkedNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewLinkedNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *CreateLinkedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *CreateLinkedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *CreateLinkedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *CreateLinkedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLinkedNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateLinkedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateLinkedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *CreateLinkedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *CreateLinkedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *CreateLinkedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLinkedNotebookResult(%+v)", *p)
}

type UpdateLinkedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1"`
	LinkedNotebook      *Types.LinkedNotebook `thrift:"linkedNotebook,2"`
}

func NewUpdateLinkedNotebookArgs() *UpdateLinkedNotebookArgs {
	return &UpdateLinkedNotebookArgs{}
}

func (p *UpdateLinkedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateLinkedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *UpdateLinkedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = Types.NewLinkedNotebook()
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LinkedNotebook)
	}
	return nil
}

func (p *UpdateLinkedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateLinkedNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateLinkedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *UpdateLinkedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.LinkedNotebook != nil {
		if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:linkedNotebook: %s", p, err)
		}
		if err := p.LinkedNotebook.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.LinkedNotebook)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:linkedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *UpdateLinkedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLinkedNotebookArgs(%+v)", *p)
}

type UpdateLinkedNotebookResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewUpdateLinkedNotebookResult() *UpdateLinkedNotebookResult {
	return &UpdateLinkedNotebookResult{}
}

func (p *UpdateLinkedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateLinkedNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateLinkedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *UpdateLinkedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *UpdateLinkedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *UpdateLinkedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateLinkedNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateLinkedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *UpdateLinkedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateLinkedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateLinkedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *UpdateLinkedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLinkedNotebookResult(%+v)", *p)
}

type ListLinkedNotebooksArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewListLinkedNotebooksArgs() *ListLinkedNotebooksArgs {
	return &ListLinkedNotebooksArgs{}
}

func (p *ListLinkedNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListLinkedNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ListLinkedNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listLinkedNotebooks_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListLinkedNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ListLinkedNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListLinkedNotebooksArgs(%+v)", *p)
}

type ListLinkedNotebooksResult struct {
	Success           []*Types.LinkedNotebook       `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewListLinkedNotebooksResult() *ListLinkedNotebooksResult {
	return &ListLinkedNotebooksResult{}
}

func (p *ListLinkedNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListLinkedNotebooksResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*Types.LinkedNotebook, 0, size)
	for i := 0; i < size; i++ {
		_elem341 := Types.NewLinkedNotebook()
		if err := _elem341.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem341)
		}
		p.Success = append(p.Success, _elem341)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ListLinkedNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ListLinkedNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ListLinkedNotebooksResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ListLinkedNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listLinkedNotebooks_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ListLinkedNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListLinkedNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ListLinkedNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ListLinkedNotebooksResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ListLinkedNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListLinkedNotebooksResult(%+v)", *p)
}

type ExpungeLinkedNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewExpungeLinkedNotebookArgs() *ExpungeLinkedNotebookArgs {
	return &ExpungeLinkedNotebookArgs{}
}

func (p *ExpungeLinkedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeLinkedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ExpungeLinkedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *ExpungeLinkedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeLinkedNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeLinkedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ExpungeLinkedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *ExpungeLinkedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeLinkedNotebookArgs(%+v)", *p)
}

type ExpungeLinkedNotebookResult struct {
	Success           int32                         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewExpungeLinkedNotebookResult() *ExpungeLinkedNotebookResult {
	return &ExpungeLinkedNotebookResult{}
}

func (p *ExpungeLinkedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExpungeLinkedNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ExpungeLinkedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ExpungeLinkedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ExpungeLinkedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ExpungeLinkedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeLinkedNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ExpungeLinkedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ExpungeLinkedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeLinkedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeLinkedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ExpungeLinkedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExpungeLinkedNotebookResult(%+v)", *p)
}

type AuthenticateToSharedNotebookArgs struct {
	ShareKey            string `thrift:"shareKey,1"`
	AuthenticationToken string `thrift:"authenticationToken,2"`
}

func NewAuthenticateToSharedNotebookArgs() *AuthenticateToSharedNotebookArgs {
	return &AuthenticateToSharedNotebookArgs{}
}

func (p *AuthenticateToSharedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ShareKey = v
	}
	return nil
}

func (p *AuthenticateToSharedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *AuthenticateToSharedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNotebook_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:shareKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ShareKey)); err != nil {
		return fmt.Errorf("%T.shareKey (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:shareKey: %s", p, err)
	}
	return err
}

func (p *AuthenticateToSharedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:authenticationToken: %s", p, err)
	}
	return err
}

func (p *AuthenticateToSharedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateToSharedNotebookArgs(%+v)", *p)
}

type AuthenticateToSharedNotebookResult struct {
	Success           *UserStore.AuthenticationResult `thrift:"success,0"`
	UserException     *Errors.EDAMUserException       `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException   `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException     `thrift:"systemException,3"`
}

func NewAuthenticateToSharedNotebookResult() *AuthenticateToSharedNotebookResult {
	return &AuthenticateToSharedNotebookResult{}
}

func (p *AuthenticateToSharedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = UserStore.NewAuthenticationResult()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNotebook_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateToSharedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateToSharedNotebookResult(%+v)", *p)
}

type GetSharedNotebookByAuthArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1"`
}

func NewGetSharedNotebookByAuthArgs() *GetSharedNotebookByAuthArgs {
	return &GetSharedNotebookByAuthArgs{}
}

func (p *GetSharedNotebookByAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSharedNotebookByAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *GetSharedNotebookByAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSharedNotebookByAuth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSharedNotebookByAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *GetSharedNotebookByAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSharedNotebookByAuthArgs(%+v)", *p)
}

type GetSharedNotebookByAuthResult struct {
	Success           *Types.SharedNotebook         `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewGetSharedNotebookByAuthResult() *GetSharedNotebookByAuthResult {
	return &GetSharedNotebookByAuthResult{}
}

func (p *GetSharedNotebookByAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSharedNotebookByAuthResult) readField0(iprot thrift.TProtocol) error {
	p.Success = Types.NewSharedNotebook()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetSharedNotebookByAuthResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *GetSharedNotebookByAuthResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *GetSharedNotebookByAuthResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *GetSharedNotebookByAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSharedNotebookByAuth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSharedNotebookByAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSharedNotebookByAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *GetSharedNotebookByAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *GetSharedNotebookByAuthResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *GetSharedNotebookByAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSharedNotebookByAuthResult(%+v)", *p)
}

type EmailNoteArgs struct {
	AuthenticationToken string               `thrift:"authenticationToken,1"`
	Parameters          *NoteEmailParameters `thrift:"parameters,2"`
}

func NewEmailNoteArgs() *EmailNoteArgs {
	return &EmailNoteArgs{}
}

func (p *EmailNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmailNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *EmailNoteArgs) readField2(iprot thrift.TProtocol) error {
	p.Parameters = NewNoteEmailParameters()
	if err := p.Parameters.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Parameters)
	}
	return nil
}

func (p *EmailNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("emailNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *EmailNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *EmailNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Parameters != nil {
		if err := oprot.WriteFieldBegin("parameters", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:parameters: %s", p, err)
		}
		if err := p.Parameters.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Parameters)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:parameters: %s", p, err)
		}
	}
	return err
}

func (p *EmailNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailNoteArgs(%+v)", *p)
}

type EmailNoteResult struct {
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewEmailNoteResult() *EmailNoteResult {
	return &EmailNoteResult{}
}

func (p *EmailNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EmailNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *EmailNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *EmailNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *EmailNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("emailNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *EmailNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *EmailNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *EmailNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *EmailNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailNoteResult(%+v)", *p)
}

type ShareNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewShareNoteArgs() *ShareNoteArgs {
	return &ShareNoteArgs{}
}

func (p *ShareNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShareNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *ShareNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *ShareNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shareNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShareNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *ShareNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *ShareNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareNoteArgs(%+v)", *p)
}

type ShareNoteResult struct {
	Success           string                        `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewShareNoteResult() *ShareNoteResult {
	return &ShareNoteResult{}
}

func (p *ShareNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShareNoteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *ShareNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *ShareNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *ShareNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *ShareNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shareNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShareNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *ShareNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *ShareNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *ShareNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *ShareNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareNoteResult(%+v)", *p)
}

type StopSharingNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1"`
	Guid                Types.Guid `thrift:"guid,2"`
}

func NewStopSharingNoteArgs() *StopSharingNoteArgs {
	return &StopSharingNoteArgs{}
}

func (p *StopSharingNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StopSharingNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *StopSharingNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *StopSharingNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stopSharingNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *StopSharingNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *StopSharingNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:guid: %s", p, err)
	}
	return err
}

func (p *StopSharingNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StopSharingNoteArgs(%+v)", *p)
}

type StopSharingNoteResult struct {
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,3"`
}

func NewStopSharingNoteResult() *StopSharingNoteResult {
	return &StopSharingNoteResult{}
}

func (p *StopSharingNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StopSharingNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *StopSharingNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *StopSharingNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *StopSharingNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stopSharingNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *StopSharingNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *StopSharingNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *StopSharingNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *StopSharingNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StopSharingNoteResult(%+v)", *p)
}

type AuthenticateToSharedNoteArgs struct {
	Guid                string `thrift:"guid,1"`
	NoteKey             string `thrift:"noteKey,2"`
	AuthenticationToken string `thrift:"authenticationToken,3"`
}

func NewAuthenticateToSharedNoteArgs() *AuthenticateToSharedNoteArgs {
	return &AuthenticateToSharedNoteArgs{}
}

func (p *AuthenticateToSharedNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateToSharedNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = v
	}
	return nil
}

func (p *AuthenticateToSharedNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoteKey = v
	}
	return nil
}

func (p *AuthenticateToSharedNoteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *AuthenticateToSharedNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNote_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateToSharedNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
	}
	return err
}

func (p *AuthenticateToSharedNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteKey", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:noteKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NoteKey)); err != nil {
		return fmt.Errorf("%T.noteKey (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:noteKey: %s", p, err)
	}
	return err
}

func (p *AuthenticateToSharedNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:authenticationToken: %s", p, err)
	}
	return err
}

func (p *AuthenticateToSharedNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateToSharedNoteArgs(%+v)", *p)
}

type AuthenticateToSharedNoteResult struct {
	Success           *UserStore.AuthenticationResult `thrift:"success,0"`
	UserException     *Errors.EDAMUserException       `thrift:"userException,1"`
	NotFoundException *Errors.EDAMNotFoundException   `thrift:"notFoundException,2"`
	SystemException   *Errors.EDAMSystemException     `thrift:"systemException,3"`
}

func NewAuthenticateToSharedNoteResult() *AuthenticateToSharedNoteResult {
	return &AuthenticateToSharedNoteResult{}
}

func (p *AuthenticateToSharedNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthenticateToSharedNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = UserStore.NewAuthenticationResult()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AuthenticateToSharedNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *AuthenticateToSharedNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *AuthenticateToSharedNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *AuthenticateToSharedNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNote_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.SystemException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.NotFoundException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthenticateToSharedNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:systemException: %s", p, err)
		}
	}
	return err
}

func (p *AuthenticateToSharedNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticateToSharedNoteResult(%+v)", *p)
}

type FindRelatedArgs struct {
	AuthenticationToken string             `thrift:"authenticationToken,1"`
	Query               *RelatedQuery      `thrift:"query,2"`
	ResultSpec          *RelatedResultSpec `thrift:"resultSpec,3"`
}

func NewFindRelatedArgs() *FindRelatedArgs {
	return &FindRelatedArgs{}
}

func (p *FindRelatedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindRelatedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *FindRelatedArgs) readField2(iprot thrift.TProtocol) error {
	p.Query = NewRelatedQuery()
	if err := p.Query.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Query)
	}
	return nil
}

func (p *FindRelatedArgs) readField3(iprot thrift.TProtocol) error {
	p.ResultSpec = NewRelatedResultSpec()
	if err := p.ResultSpec.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ResultSpec)
	}
	return nil
}

func (p *FindRelatedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findRelated_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindRelatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:authenticationToken: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return fmt.Errorf("%T.authenticationToken (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:authenticationToken: %s", p, err)
	}
	return err
}

func (p *FindRelatedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Query != nil {
		if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:query: %s", p, err)
		}
		if err := p.Query.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Query)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:query: %s", p, err)
		}
	}
	return err
}

func (p *FindRelatedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ResultSpec != nil {
		if err := oprot.WriteFieldBegin("resultSpec", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:resultSpec: %s", p, err)
		}
		if err := p.ResultSpec.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ResultSpec)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:resultSpec: %s", p, err)
		}
	}
	return err
}

func (p *FindRelatedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindRelatedArgs(%+v)", *p)
}

type FindRelatedResult struct {
	Success           *RelatedResult                `thrift:"success,0"`
	UserException     *Errors.EDAMUserException     `thrift:"userException,1"`
	SystemException   *Errors.EDAMSystemException   `thrift:"systemException,2"`
	NotFoundException *Errors.EDAMNotFoundException `thrift:"notFoundException,3"`
}

func NewFindRelatedResult() *FindRelatedResult {
	return &FindRelatedResult{}
}

func (p *FindRelatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindRelatedResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewRelatedResult()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *FindRelatedResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = Errors.NewEDAMUserException()
	if err := p.UserException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserException)
	}
	return nil
}

func (p *FindRelatedResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = Errors.NewEDAMSystemException()
	if err := p.SystemException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SystemException)
	}
	return nil
}

func (p *FindRelatedResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = Errors.NewEDAMNotFoundException()
	if err := p.NotFoundException.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NotFoundException)
	}
	return nil
}

func (p *FindRelatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findRelated_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.NotFoundException != nil:
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	case p.SystemException != nil:
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	case p.UserException != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindRelatedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindRelatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.UserException != nil {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:userException: %s", p, err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.UserException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:userException: %s", p, err)
		}
	}
	return err
}

func (p *FindRelatedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.SystemException != nil {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:systemException: %s", p, err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SystemException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:systemException: %s", p, err)
		}
	}
	return err
}

func (p *FindRelatedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.NotFoundException != nil {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notFoundException: %s", p, err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.NotFoundException)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notFoundException: %s", p, err)
		}
	}
	return err
}

func (p *FindRelatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindRelatedResult(%+v)", *p)
}
