// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package Types

import (
	"github.com/quekshuy/evernote-golang-sdk/Limits"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = Limits.GoUnusedProtection__
var GoUnusedProtection__ int

//This enumeration defines the possible permission levels for a user.
//Free accounts will have a level of NORMAL and paid Premium accounts
//will have a level of PREMIUM.
type PrivilegeLevel int64

const (
	PrivilegeLevel_NORMAL  PrivilegeLevel = 1
	PrivilegeLevel_PREMIUM PrivilegeLevel = 3
	PrivilegeLevel_VIP     PrivilegeLevel = 5
	PrivilegeLevel_MANAGER PrivilegeLevel = 7
	PrivilegeLevel_SUPPORT PrivilegeLevel = 8
	PrivilegeLevel_ADMIN   PrivilegeLevel = 9
)

func (p PrivilegeLevel) String() string {
	switch p {
	case PrivilegeLevel_NORMAL:
		return "PrivilegeLevel_NORMAL"
	case PrivilegeLevel_PREMIUM:
		return "PrivilegeLevel_PREMIUM"
	case PrivilegeLevel_VIP:
		return "PrivilegeLevel_VIP"
	case PrivilegeLevel_MANAGER:
		return "PrivilegeLevel_MANAGER"
	case PrivilegeLevel_SUPPORT:
		return "PrivilegeLevel_SUPPORT"
	case PrivilegeLevel_ADMIN:
		return "PrivilegeLevel_ADMIN"
	}
	return "<UNSET>"
}

func PrivilegeLevelFromString(s string) (PrivilegeLevel, error) {
	switch s {
	case "PrivilegeLevel_NORMAL":
		return PrivilegeLevel_NORMAL, nil
	case "PrivilegeLevel_PREMIUM":
		return PrivilegeLevel_PREMIUM, nil
	case "PrivilegeLevel_VIP":
		return PrivilegeLevel_VIP, nil
	case "PrivilegeLevel_MANAGER":
		return PrivilegeLevel_MANAGER, nil
	case "PrivilegeLevel_SUPPORT":
		return PrivilegeLevel_SUPPORT, nil
	case "PrivilegeLevel_ADMIN":
		return PrivilegeLevel_ADMIN, nil
	}
	return PrivilegeLevel(math.MinInt32 - 1), fmt.Errorf("not a valid PrivilegeLevel string")
}

//Every search query is specified as a sequence of characters.
//Currently, only the USER query format is supported.
type QueryFormat int64

const (
	QueryFormat_USER QueryFormat = 1
	QueryFormat_SEXP QueryFormat = 2
)

func (p QueryFormat) String() string {
	switch p {
	case QueryFormat_USER:
		return "QueryFormat_USER"
	case QueryFormat_SEXP:
		return "QueryFormat_SEXP"
	}
	return "<UNSET>"
}

func QueryFormatFromString(s string) (QueryFormat, error) {
	switch s {
	case "QueryFormat_USER":
		return QueryFormat_USER, nil
	case "QueryFormat_SEXP":
		return QueryFormat_SEXP, nil
	}
	return QueryFormat(math.MinInt32 - 1), fmt.Errorf("not a valid QueryFormat string")
}

//This enumeration defines the possible sort ordering for notes when
//they are returned from a search result.
type NoteSortOrder int64

const (
	NoteSortOrder_CREATED                NoteSortOrder = 1
	NoteSortOrder_UPDATED                NoteSortOrder = 2
	NoteSortOrder_RELEVANCE              NoteSortOrder = 3
	NoteSortOrder_UPDATE_SEQUENCE_NUMBER NoteSortOrder = 4
	NoteSortOrder_TITLE                  NoteSortOrder = 5
)

func (p NoteSortOrder) String() string {
	switch p {
	case NoteSortOrder_CREATED:
		return "NoteSortOrder_CREATED"
	case NoteSortOrder_UPDATED:
		return "NoteSortOrder_UPDATED"
	case NoteSortOrder_RELEVANCE:
		return "NoteSortOrder_RELEVANCE"
	case NoteSortOrder_UPDATE_SEQUENCE_NUMBER:
		return "NoteSortOrder_UPDATE_SEQUENCE_NUMBER"
	case NoteSortOrder_TITLE:
		return "NoteSortOrder_TITLE"
	}
	return "<UNSET>"
}

func NoteSortOrderFromString(s string) (NoteSortOrder, error) {
	switch s {
	case "NoteSortOrder_CREATED":
		return NoteSortOrder_CREATED, nil
	case "NoteSortOrder_UPDATED":
		return NoteSortOrder_UPDATED, nil
	case "NoteSortOrder_RELEVANCE":
		return NoteSortOrder_RELEVANCE, nil
	case "NoteSortOrder_UPDATE_SEQUENCE_NUMBER":
		return NoteSortOrder_UPDATE_SEQUENCE_NUMBER, nil
	case "NoteSortOrder_TITLE":
		return NoteSortOrder_TITLE, nil
	}
	return NoteSortOrder(math.MinInt32 - 1), fmt.Errorf("not a valid NoteSortOrder string")
}

//This enumeration defines the possible states of a premium account
//
//NONE:    the user has never attempted to become a premium subscriber
//
//PENDING: the user has requested a premium account but their charge has not
//  been confirmed
//
//ACTIVE:  the user has been charged and their premium account is in good
// standing
//
//FAILED:  the system attempted to charge the was denied. Their premium
//  privileges have been revoked. We will periodically attempt to re-validate
//  their order.
//
//CANCELLATION_PENDING: the user has requested that no further charges be made
//  but the current account is still active.
//
//CANCELED: the premium account was canceled either because of failure to pay
//  or user cancelation. No more attempts will be made to activate the account.
type PremiumOrderStatus int64

const (
	PremiumOrderStatus_NONE                 PremiumOrderStatus = 0
	PremiumOrderStatus_PENDING              PremiumOrderStatus = 1
	PremiumOrderStatus_ACTIVE               PremiumOrderStatus = 2
	PremiumOrderStatus_FAILED               PremiumOrderStatus = 3
	PremiumOrderStatus_CANCELLATION_PENDING PremiumOrderStatus = 4
	PremiumOrderStatus_CANCELED             PremiumOrderStatus = 5
)

func (p PremiumOrderStatus) String() string {
	switch p {
	case PremiumOrderStatus_NONE:
		return "PremiumOrderStatus_NONE"
	case PremiumOrderStatus_PENDING:
		return "PremiumOrderStatus_PENDING"
	case PremiumOrderStatus_ACTIVE:
		return "PremiumOrderStatus_ACTIVE"
	case PremiumOrderStatus_FAILED:
		return "PremiumOrderStatus_FAILED"
	case PremiumOrderStatus_CANCELLATION_PENDING:
		return "PremiumOrderStatus_CANCELLATION_PENDING"
	case PremiumOrderStatus_CANCELED:
		return "PremiumOrderStatus_CANCELED"
	}
	return "<UNSET>"
}

func PremiumOrderStatusFromString(s string) (PremiumOrderStatus, error) {
	switch s {
	case "PremiumOrderStatus_NONE":
		return PremiumOrderStatus_NONE, nil
	case "PremiumOrderStatus_PENDING":
		return PremiumOrderStatus_PENDING, nil
	case "PremiumOrderStatus_ACTIVE":
		return PremiumOrderStatus_ACTIVE, nil
	case "PremiumOrderStatus_FAILED":
		return PremiumOrderStatus_FAILED, nil
	case "PremiumOrderStatus_CANCELLATION_PENDING":
		return PremiumOrderStatus_CANCELLATION_PENDING, nil
	case "PremiumOrderStatus_CANCELED":
		return PremiumOrderStatus_CANCELED, nil
	}
	return PremiumOrderStatus(math.MinInt32 - 1), fmt.Errorf("not a valid PremiumOrderStatus string")
}

//Privilege levels for accessing shared notebooks.
//
//READ_NOTEBOOK: Recipient is able to read the contents of the shared notebook
//  but does to have access to information about other recipients of the
//  notebook or the activity stream information.
//
//MODIFY_NOTEBOOK_PLUS_ACTIVITY: Recipient has rights to read and modify the contents
//  of the shared notebook, including the right to move notes to the trash and to create
//  notes in the notebook.  The recipient can also access information about other
//  recipients and the activity stream.
//
//READ_NOTEBOOK_PLUS_ACTIVITY: Recipient has READ_NOTEBOOK rights and can also
//  access information about other recipients and the activity stream.
//
//GROUP: If the user belongs to a group, such as a Business, that has a defined
//  privilege level, use the privilege level of the group as the privilege for
//  the individual.
//
//FULL_ACCESS: Recipient has full rights to the shared notebook and recipient lists,
//  including privilege to revoke and create invitations and to change privilege
//  levels on invitations for individuals.  This privilege level is primarily intended
//  for use by individual shares.
//
//BUSINESS_FULL_ACCESS: Intended for use with Business Notebooks, a
//BUSINESS_FULL_ACCESS level is FULL_ACCESS with the additional rights to
//change how the notebook will appear in the business library, including the
//rights to publish and unpublish the notebook from the library.
type SharedNotebookPrivilegeLevel int64

const (
	SharedNotebookPrivilegeLevel_READ_NOTEBOOK                 SharedNotebookPrivilegeLevel = 0
	SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY SharedNotebookPrivilegeLevel = 1
	SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY   SharedNotebookPrivilegeLevel = 2
	SharedNotebookPrivilegeLevel_GROUP                         SharedNotebookPrivilegeLevel = 3
	SharedNotebookPrivilegeLevel_FULL_ACCESS                   SharedNotebookPrivilegeLevel = 4
	SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS          SharedNotebookPrivilegeLevel = 5
)

func (p SharedNotebookPrivilegeLevel) String() string {
	switch p {
	case SharedNotebookPrivilegeLevel_READ_NOTEBOOK:
		return "SharedNotebookPrivilegeLevel_READ_NOTEBOOK"
	case SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY:
		return "SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY"
	case SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY:
		return "SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY"
	case SharedNotebookPrivilegeLevel_GROUP:
		return "SharedNotebookPrivilegeLevel_GROUP"
	case SharedNotebookPrivilegeLevel_FULL_ACCESS:
		return "SharedNotebookPrivilegeLevel_FULL_ACCESS"
	case SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS:
		return "SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS"
	}
	return "<UNSET>"
}

func SharedNotebookPrivilegeLevelFromString(s string) (SharedNotebookPrivilegeLevel, error) {
	switch s {
	case "SharedNotebookPrivilegeLevel_READ_NOTEBOOK":
		return SharedNotebookPrivilegeLevel_READ_NOTEBOOK, nil
	case "SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY":
		return SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY, nil
	case "SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY":
		return SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY, nil
	case "SharedNotebookPrivilegeLevel_GROUP":
		return SharedNotebookPrivilegeLevel_GROUP, nil
	case "SharedNotebookPrivilegeLevel_FULL_ACCESS":
		return SharedNotebookPrivilegeLevel_FULL_ACCESS, nil
	case "SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS":
		return SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS, nil
	}
	return SharedNotebookPrivilegeLevel(math.MinInt32 - 1), fmt.Errorf("not a valid SharedNotebookPrivilegeLevel string")
}

//Enumeration of the roles that a User can have within a sponsored group.
//
//GROUP_MEMBER: The user is a member of the group with no special privileges.
//
//GROUP_ADMIN: The user is an administrator within the group.
//
//GROUP_OWNER: The user is the owner of the group.
type SponsoredGroupRole int64

const (
	SponsoredGroupRole_GROUP_MEMBER SponsoredGroupRole = 1
	SponsoredGroupRole_GROUP_ADMIN  SponsoredGroupRole = 2
	SponsoredGroupRole_GROUP_OWNER  SponsoredGroupRole = 3
)

func (p SponsoredGroupRole) String() string {
	switch p {
	case SponsoredGroupRole_GROUP_MEMBER:
		return "SponsoredGroupRole_GROUP_MEMBER"
	case SponsoredGroupRole_GROUP_ADMIN:
		return "SponsoredGroupRole_GROUP_ADMIN"
	case SponsoredGroupRole_GROUP_OWNER:
		return "SponsoredGroupRole_GROUP_OWNER"
	}
	return "<UNSET>"
}

func SponsoredGroupRoleFromString(s string) (SponsoredGroupRole, error) {
	switch s {
	case "SponsoredGroupRole_GROUP_MEMBER":
		return SponsoredGroupRole_GROUP_MEMBER, nil
	case "SponsoredGroupRole_GROUP_ADMIN":
		return SponsoredGroupRole_GROUP_ADMIN, nil
	case "SponsoredGroupRole_GROUP_OWNER":
		return SponsoredGroupRole_GROUP_OWNER, nil
	}
	return SponsoredGroupRole(math.MinInt32 - 1), fmt.Errorf("not a valid SponsoredGroupRole string")
}

//Enumeration of the roles that a User can have within an Evernote Business account.
//
//ADMIN: The user is an administrator of the Evernote Business account.
//
//NORMAL: The user is a regular user within the Evernote Business account.
type BusinessUserRole int64

const (
	BusinessUserRole_ADMIN  BusinessUserRole = 1
	BusinessUserRole_NORMAL BusinessUserRole = 2
)

func (p BusinessUserRole) String() string {
	switch p {
	case BusinessUserRole_ADMIN:
		return "BusinessUserRole_ADMIN"
	case BusinessUserRole_NORMAL:
		return "BusinessUserRole_NORMAL"
	}
	return "<UNSET>"
}

func BusinessUserRoleFromString(s string) (BusinessUserRole, error) {
	switch s {
	case "BusinessUserRole_ADMIN":
		return BusinessUserRole_ADMIN, nil
	case "BusinessUserRole_NORMAL":
		return BusinessUserRole_NORMAL, nil
	}
	return BusinessUserRole(math.MinInt32 - 1), fmt.Errorf("not a valid BusinessUserRole string")
}

//An enumeration describing restrictions on the domain of shared notebook
//instances that are valid for a given operation, as used, for example, in
//NotebookRestrictions.
//
//ONLY_JOINED_OR_PREVIEW: The domain consists of shared notebooks that
//  "belong" to the recipient or still available for preview by any recipient.
//  Shared notebooks that the recipient has joined (the username has already been
//  assigned to our user) are in the domain.  Additionally, shared notebooks
//  that allow preview and have not yet been joined are in the domain.
//
//NO_SHARED_NOTEBOOKS: No shared notebooks are applicable to the operation.
type SharedNotebookInstanceRestrictions int64

const (
	SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW SharedNotebookInstanceRestrictions = 1
	SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS    SharedNotebookInstanceRestrictions = 2
)

func (p SharedNotebookInstanceRestrictions) String() string {
	switch p {
	case SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW:
		return "SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW"
	case SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS:
		return "SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS"
	}
	return "<UNSET>"
}

func SharedNotebookInstanceRestrictionsFromString(s string) (SharedNotebookInstanceRestrictions, error) {
	switch s {
	case "SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW":
		return SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW, nil
	case "SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS":
		return SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS, nil
	}
	return SharedNotebookInstanceRestrictions(math.MinInt32 - 1), fmt.Errorf("not a valid SharedNotebookInstanceRestrictions string")
}

//An enumeration describing the configuration state related to receiving
//reminder e-mails from the service.  Reminder e-mails summarize notes
//based on their Note.attributes.reminderTime values.
//
//DO_NOT_SEND: The user has selected to not receive reminder e-mail.
//
//SEND_DAILY_EMAIL: The user has selected to receive reminder e-mail for those
//  days when there is a reminder.
type ReminderEmailConfig int64

const (
	ReminderEmailConfig_DO_NOT_SEND      ReminderEmailConfig = 1
	ReminderEmailConfig_SEND_DAILY_EMAIL ReminderEmailConfig = 2
)

func (p ReminderEmailConfig) String() string {
	switch p {
	case ReminderEmailConfig_DO_NOT_SEND:
		return "ReminderEmailConfig_DO_NOT_SEND"
	case ReminderEmailConfig_SEND_DAILY_EMAIL:
		return "ReminderEmailConfig_SEND_DAILY_EMAIL"
	}
	return "<UNSET>"
}

func ReminderEmailConfigFromString(s string) (ReminderEmailConfig, error) {
	switch s {
	case "ReminderEmailConfig_DO_NOT_SEND":
		return ReminderEmailConfig_DO_NOT_SEND, nil
	case "ReminderEmailConfig_SEND_DAILY_EMAIL":
		return ReminderEmailConfig_SEND_DAILY_EMAIL, nil
	}
	return ReminderEmailConfig(math.MinInt32 - 1), fmt.Errorf("not a valid ReminderEmailConfig string")
}

//Every Evernote account is assigned a unique numeric identifier which
//will not change for the life of the account.  This is independent of
//the (string-based) "username" which is known by the user for login
//purposes.  The user should have no reason to know their UserID.
type UserID int32

//Most data elements within a user's account (e.g. notebooks, notes, tags,
//resources, etc.) are internally referred to using a globally unique
//identifier that is written in a standard string format.  For example:
//
//   "8743428c-ef91-4d05-9e7c-4a2e856e813a"
//
//The internal components of the GUID are not given any particular meaning:
//only the entire string is relevant as a unique identifier.
type Guid string

//An Evernote Timestamp is the date and time of an event in UTC time.
//This is expressed as a specific number of milliseconds since the
//standard base "epoch" of:
//
//   January 1, 1970, 00:00:00 GMT
//
//NOTE:  the time is expressed at the resolution of milliseconds, but
//the value is only precise to the level of seconds.   This means that
//the last three (decimal) digits of the timestamp will be '000'.
//
//The Thrift IDL specification does not include a native date/time type,
//so this value is used instead.
//
//The service will accept timestamp values (e.g. for Note created and update
//times) between 1000-01-01 and 9999-12-31
type Timestamp int64

type Data struct {
	BodyHash []byte `thrift:"bodyHash,1"`
	Size     int32  `thrift:"size,2"`
	Body     []byte `thrift:"body,3"`
}

func NewData() *Data {
	return &Data{}
}

func (p *Data) IsSetBodyHash() bool {
	return p.BodyHash != nil
}

func (p *Data) IsSetSize() bool {
	return p.Size != 0
}

func (p *Data) IsSetBody() bool {
	return p.Body != nil
}

func (p *Data) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Data) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.BodyHash = v
	}
	return nil
}

func (p *Data) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *Data) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Body = v
	}
	return nil
}

func (p *Data) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Data"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Data) writeField1(oprot thrift.TProtocol) (err error) {
	if p.BodyHash != nil {
		if p.IsSetBodyHash() {
			if err := oprot.WriteFieldBegin("bodyHash", thrift.BINARY, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:bodyHash: %s", p, err)
			}
			if err := oprot.WriteBinary(p.BodyHash); err != nil {
				return fmt.Errorf("%T.bodyHash (1) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:bodyHash: %s", p, err)
			}
		}
	}
	return err
}

func (p *Data) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:size: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Size)); err != nil {
			return fmt.Errorf("%T.size (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:size: %s", p, err)
		}
	}
	return err
}

func (p *Data) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Body != nil {
		if p.IsSetBody() {
			if err := oprot.WriteFieldBegin("body", thrift.BINARY, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:body: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Body); err != nil {
				return fmt.Errorf("%T.body (3) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:body: %s", p, err)
			}
		}
	}
	return err
}

func (p *Data) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Data(%+v)", *p)
}

type UserAttributes struct {
	DefaultLocationName   string   `thrift:"defaultLocationName,1"`
	DefaultLatitude       float64  `thrift:"defaultLatitude,2"`
	DefaultLongitude      float64  `thrift:"defaultLongitude,3"`
	Preactivation         bool     `thrift:"preactivation,4"`
	ViewedPromotions      []string `thrift:"viewedPromotions,5"`
	IncomingEmailAddress  string   `thrift:"incomingEmailAddress,6"`
	RecentMailedAddresses []string `thrift:"recentMailedAddresses,7"`
	// unused field # 8
	Comments string `thrift:"comments,9"`
	// unused field # 10
	DateAgreedToTermsOfService Timestamp `thrift:"dateAgreedToTermsOfService,11"`
	MaxReferrals               int32     `thrift:"maxReferrals,12"`
	ReferralCount              int32     `thrift:"referralCount,13"`
	RefererCode                string    `thrift:"refererCode,14"`
	SentEmailDate              Timestamp `thrift:"sentEmailDate,15"`
	SentEmailCount             int32     `thrift:"sentEmailCount,16"`
	DailyEmailLimit            int32     `thrift:"dailyEmailLimit,17"`
	EmailOptOutDate            Timestamp `thrift:"emailOptOutDate,18"`
	PartnerEmailOptInDate      Timestamp `thrift:"partnerEmailOptInDate,19"`
	PreferredLanguage          string    `thrift:"preferredLanguage,20"`
	PreferredCountry           string    `thrift:"preferredCountry,21"`
	ClipFullPage               bool      `thrift:"clipFullPage,22"`
	TwitterUserName            string    `thrift:"twitterUserName,23"`
	TwitterId                  string    `thrift:"twitterId,24"`
	GroupName                  string    `thrift:"groupName,25"`
	RecognitionLanguage        string    `thrift:"recognitionLanguage,26"`
	// unused field # 27
	ReferralProof       string              `thrift:"referralProof,28"`
	EducationalDiscount bool                `thrift:"educationalDiscount,29"`
	BusinessAddress     string              `thrift:"businessAddress,30"`
	HideSponsorBilling  bool                `thrift:"hideSponsorBilling,31"`
	TaxExempt           bool                `thrift:"taxExempt,32"`
	UseEmailAutoFiling  bool                `thrift:"useEmailAutoFiling,33"`
	ReminderEmailConfig ReminderEmailConfig `thrift:"reminderEmailConfig,34"`
}

func NewUserAttributes() *UserAttributes {
	return &UserAttributes{
		ReminderEmailConfig: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *UserAttributes) IsSetDefaultLocationName() bool {
	return p.DefaultLocationName != ""
}

func (p *UserAttributes) IsSetDefaultLatitude() bool {
	return p.DefaultLatitude != 0
}

func (p *UserAttributes) IsSetDefaultLongitude() bool {
	return p.DefaultLongitude != 0
}

func (p *UserAttributes) IsSetPreactivation() bool {
	return p.Preactivation != false
}

func (p *UserAttributes) IsSetViewedPromotions() bool {
	return p.ViewedPromotions != nil && len(p.ViewedPromotions) > 0
}

func (p *UserAttributes) IsSetIncomingEmailAddress() bool {
	return p.IncomingEmailAddress != ""
}

func (p *UserAttributes) IsSetRecentMailedAddresses() bool {
	return p.RecentMailedAddresses != nil && len(p.RecentMailedAddresses) > 0
}

func (p *UserAttributes) IsSetComments() bool {
	return p.Comments != ""
}

func (p *UserAttributes) IsSetDateAgreedToTermsOfService() bool {
	return p.DateAgreedToTermsOfService != 0
}

func (p *UserAttributes) IsSetMaxReferrals() bool {
	return p.MaxReferrals != 0
}

func (p *UserAttributes) IsSetReferralCount() bool {
	return p.ReferralCount != 0
}

func (p *UserAttributes) IsSetRefererCode() bool {
	return p.RefererCode != ""
}

func (p *UserAttributes) IsSetSentEmailDate() bool {
	return p.SentEmailDate != 0
}

func (p *UserAttributes) IsSetSentEmailCount() bool {
	return p.SentEmailCount != 0
}

func (p *UserAttributes) IsSetDailyEmailLimit() bool {
	return p.DailyEmailLimit != 0
}

func (p *UserAttributes) IsSetEmailOptOutDate() bool {
	return p.EmailOptOutDate != 0
}

func (p *UserAttributes) IsSetPartnerEmailOptInDate() bool {
	return p.PartnerEmailOptInDate != 0
}

func (p *UserAttributes) IsSetPreferredLanguage() bool {
	return p.PreferredLanguage != ""
}

func (p *UserAttributes) IsSetPreferredCountry() bool {
	return p.PreferredCountry != ""
}

func (p *UserAttributes) IsSetClipFullPage() bool {
	return p.ClipFullPage != false
}

func (p *UserAttributes) IsSetTwitterUserName() bool {
	return p.TwitterUserName != ""
}

func (p *UserAttributes) IsSetTwitterId() bool {
	return p.TwitterId != ""
}

func (p *UserAttributes) IsSetGroupName() bool {
	return p.GroupName != ""
}

func (p *UserAttributes) IsSetRecognitionLanguage() bool {
	return p.RecognitionLanguage != ""
}

func (p *UserAttributes) IsSetReferralProof() bool {
	return p.ReferralProof != ""
}

func (p *UserAttributes) IsSetEducationalDiscount() bool {
	return p.EducationalDiscount != false
}

func (p *UserAttributes) IsSetBusinessAddress() bool {
	return p.BusinessAddress != ""
}

func (p *UserAttributes) IsSetHideSponsorBilling() bool {
	return p.HideSponsorBilling != false
}

func (p *UserAttributes) IsSetTaxExempt() bool {
	return p.TaxExempt != false
}

func (p *UserAttributes) IsSetUseEmailAutoFiling() bool {
	return p.UseEmailAutoFiling != false
}

func (p *UserAttributes) IsSetReminderEmailConfig() bool {
	return int64(p.ReminderEmailConfig) != math.MinInt32-1
}

func (p *UserAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.DefaultLocationName = v
	}
	return nil
}

func (p *UserAttributes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.DefaultLatitude = v
	}
	return nil
}

func (p *UserAttributes) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.DefaultLongitude = v
	}
	return nil
}

func (p *UserAttributes) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Preactivation = v
	}
	return nil
}

func (p *UserAttributes) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ViewedPromotions = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.ViewedPromotions = append(p.ViewedPromotions, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *UserAttributes) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IncomingEmailAddress = v
	}
	return nil
}

func (p *UserAttributes) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.RecentMailedAddresses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem1 = v
		}
		p.RecentMailedAddresses = append(p.RecentMailedAddresses, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *UserAttributes) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Comments = v
	}
	return nil
}

func (p *UserAttributes) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.DateAgreedToTermsOfService = Timestamp(v)
	}
	return nil
}

func (p *UserAttributes) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.MaxReferrals = v
	}
	return nil
}

func (p *UserAttributes) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.ReferralCount = v
	}
	return nil
}

func (p *UserAttributes) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.RefererCode = v
	}
	return nil
}

func (p *UserAttributes) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.SentEmailDate = Timestamp(v)
	}
	return nil
}

func (p *UserAttributes) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.SentEmailCount = v
	}
	return nil
}

func (p *UserAttributes) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.DailyEmailLimit = v
	}
	return nil
}

func (p *UserAttributes) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 18: %s")
	} else {
		p.EmailOptOutDate = Timestamp(v)
	}
	return nil
}

func (p *UserAttributes) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 19: %s")
	} else {
		p.PartnerEmailOptInDate = Timestamp(v)
	}
	return nil
}

func (p *UserAttributes) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.PreferredLanguage = v
	}
	return nil
}

func (p *UserAttributes) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.PreferredCountry = v
	}
	return nil
}

func (p *UserAttributes) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 22: %s")
	} else {
		p.ClipFullPage = v
	}
	return nil
}

func (p *UserAttributes) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 23: %s")
	} else {
		p.TwitterUserName = v
	}
	return nil
}

func (p *UserAttributes) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s")
	} else {
		p.TwitterId = v
	}
	return nil
}

func (p *UserAttributes) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 25: %s")
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *UserAttributes) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 26: %s")
	} else {
		p.RecognitionLanguage = v
	}
	return nil
}

func (p *UserAttributes) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 28: %s")
	} else {
		p.ReferralProof = v
	}
	return nil
}

func (p *UserAttributes) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 29: %s")
	} else {
		p.EducationalDiscount = v
	}
	return nil
}

func (p *UserAttributes) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 30: %s")
	} else {
		p.BusinessAddress = v
	}
	return nil
}

func (p *UserAttributes) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 31: %s")
	} else {
		p.HideSponsorBilling = v
	}
	return nil
}

func (p *UserAttributes) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 32: %s")
	} else {
		p.TaxExempt = v
	}
	return nil
}

func (p *UserAttributes) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 33: %s")
	} else {
		p.UseEmailAutoFiling = v
	}
	return nil
}

func (p *UserAttributes) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 34: %s")
	} else {
		p.ReminderEmailConfig = ReminderEmailConfig(v)
	}
	return nil
}

func (p *UserAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAttributes"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UserAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultLocationName() {
		if err := oprot.WriteFieldBegin("defaultLocationName", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:defaultLocationName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.DefaultLocationName)); err != nil {
			return fmt.Errorf("%T.defaultLocationName (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:defaultLocationName: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultLatitude() {
		if err := oprot.WriteFieldBegin("defaultLatitude", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:defaultLatitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.DefaultLatitude)); err != nil {
			return fmt.Errorf("%T.defaultLatitude (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:defaultLatitude: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultLongitude() {
		if err := oprot.WriteFieldBegin("defaultLongitude", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:defaultLongitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.DefaultLongitude)); err != nil {
			return fmt.Errorf("%T.defaultLongitude (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:defaultLongitude: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreactivation() {
		if err := oprot.WriteFieldBegin("preactivation", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:preactivation: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Preactivation)); err != nil {
			return fmt.Errorf("%T.preactivation (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:preactivation: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField5(oprot thrift.TProtocol) (err error) {
	if p.ViewedPromotions != nil {
		if p.IsSetViewedPromotions() {
			if err := oprot.WriteFieldBegin("viewedPromotions", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:viewedPromotions: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewedPromotions)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ViewedPromotions {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:viewedPromotions: %s", p, err)
			}
		}
	}
	return err
}

func (p *UserAttributes) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingEmailAddress() {
		if err := oprot.WriteFieldBegin("incomingEmailAddress", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:incomingEmailAddress: %s", p, err)
		}
		if err := oprot.WriteString(string(p.IncomingEmailAddress)); err != nil {
			return fmt.Errorf("%T.incomingEmailAddress (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:incomingEmailAddress: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField7(oprot thrift.TProtocol) (err error) {
	if p.RecentMailedAddresses != nil {
		if p.IsSetRecentMailedAddresses() {
			if err := oprot.WriteFieldBegin("recentMailedAddresses", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:recentMailedAddresses: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.RecentMailedAddresses)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.RecentMailedAddresses {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:recentMailedAddresses: %s", p, err)
			}
		}
	}
	return err
}

func (p *UserAttributes) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetComments() {
		if err := oprot.WriteFieldBegin("comments", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:comments: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Comments)); err != nil {
			return fmt.Errorf("%T.comments (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:comments: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDateAgreedToTermsOfService() {
		if err := oprot.WriteFieldBegin("dateAgreedToTermsOfService", thrift.I64, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:dateAgreedToTermsOfService: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.DateAgreedToTermsOfService)); err != nil {
			return fmt.Errorf("%T.dateAgreedToTermsOfService (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:dateAgreedToTermsOfService: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxReferrals() {
		if err := oprot.WriteFieldBegin("maxReferrals", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:maxReferrals: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxReferrals)); err != nil {
			return fmt.Errorf("%T.maxReferrals (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:maxReferrals: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferralCount() {
		if err := oprot.WriteFieldBegin("referralCount", thrift.I32, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:referralCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ReferralCount)); err != nil {
			return fmt.Errorf("%T.referralCount (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:referralCount: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefererCode() {
		if err := oprot.WriteFieldBegin("refererCode", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:refererCode: %s", p, err)
		}
		if err := oprot.WriteString(string(p.RefererCode)); err != nil {
			return fmt.Errorf("%T.refererCode (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:refererCode: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSentEmailDate() {
		if err := oprot.WriteFieldBegin("sentEmailDate", thrift.I64, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:sentEmailDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.SentEmailDate)); err != nil {
			return fmt.Errorf("%T.sentEmailDate (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:sentEmailDate: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSentEmailCount() {
		if err := oprot.WriteFieldBegin("sentEmailCount", thrift.I32, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:sentEmailCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SentEmailCount)); err != nil {
			return fmt.Errorf("%T.sentEmailCount (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:sentEmailCount: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetDailyEmailLimit() {
		if err := oprot.WriteFieldBegin("dailyEmailLimit", thrift.I32, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:dailyEmailLimit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.DailyEmailLimit)); err != nil {
			return fmt.Errorf("%T.dailyEmailLimit (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:dailyEmailLimit: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmailOptOutDate() {
		if err := oprot.WriteFieldBegin("emailOptOutDate", thrift.I64, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:emailOptOutDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.EmailOptOutDate)); err != nil {
			return fmt.Errorf("%T.emailOptOutDate (18) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:emailOptOutDate: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartnerEmailOptInDate() {
		if err := oprot.WriteFieldBegin("partnerEmailOptInDate", thrift.I64, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:partnerEmailOptInDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.PartnerEmailOptInDate)); err != nil {
			return fmt.Errorf("%T.partnerEmailOptInDate (19) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:partnerEmailOptInDate: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredLanguage() {
		if err := oprot.WriteFieldBegin("preferredLanguage", thrift.STRING, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:preferredLanguage: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PreferredLanguage)); err != nil {
			return fmt.Errorf("%T.preferredLanguage (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:preferredLanguage: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredCountry() {
		if err := oprot.WriteFieldBegin("preferredCountry", thrift.STRING, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:preferredCountry: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PreferredCountry)); err != nil {
			return fmt.Errorf("%T.preferredCountry (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:preferredCountry: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetClipFullPage() {
		if err := oprot.WriteFieldBegin("clipFullPage", thrift.BOOL, 22); err != nil {
			return fmt.Errorf("%T write field begin error 22:clipFullPage: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ClipFullPage)); err != nil {
			return fmt.Errorf("%T.clipFullPage (22) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 22:clipFullPage: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwitterUserName() {
		if err := oprot.WriteFieldBegin("twitterUserName", thrift.STRING, 23); err != nil {
			return fmt.Errorf("%T write field begin error 23:twitterUserName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.TwitterUserName)); err != nil {
			return fmt.Errorf("%T.twitterUserName (23) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 23:twitterUserName: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwitterId() {
		if err := oprot.WriteFieldBegin("twitterId", thrift.STRING, 24); err != nil {
			return fmt.Errorf("%T write field begin error 24:twitterId: %s", p, err)
		}
		if err := oprot.WriteString(string(p.TwitterId)); err != nil {
			return fmt.Errorf("%T.twitterId (24) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 24:twitterId: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 25); err != nil {
			return fmt.Errorf("%T write field begin error 25:groupName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.GroupName)); err != nil {
			return fmt.Errorf("%T.groupName (25) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 25:groupName: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecognitionLanguage() {
		if err := oprot.WriteFieldBegin("recognitionLanguage", thrift.STRING, 26); err != nil {
			return fmt.Errorf("%T write field begin error 26:recognitionLanguage: %s", p, err)
		}
		if err := oprot.WriteString(string(p.RecognitionLanguage)); err != nil {
			return fmt.Errorf("%T.recognitionLanguage (26) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 26:recognitionLanguage: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferralProof() {
		if err := oprot.WriteFieldBegin("referralProof", thrift.STRING, 28); err != nil {
			return fmt.Errorf("%T write field begin error 28:referralProof: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ReferralProof)); err != nil {
			return fmt.Errorf("%T.referralProof (28) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 28:referralProof: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetEducationalDiscount() {
		if err := oprot.WriteFieldBegin("educationalDiscount", thrift.BOOL, 29); err != nil {
			return fmt.Errorf("%T write field begin error 29:educationalDiscount: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.EducationalDiscount)); err != nil {
			return fmt.Errorf("%T.educationalDiscount (29) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 29:educationalDiscount: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessAddress() {
		if err := oprot.WriteFieldBegin("businessAddress", thrift.STRING, 30); err != nil {
			return fmt.Errorf("%T write field begin error 30:businessAddress: %s", p, err)
		}
		if err := oprot.WriteString(string(p.BusinessAddress)); err != nil {
			return fmt.Errorf("%T.businessAddress (30) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 30:businessAddress: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetHideSponsorBilling() {
		if err := oprot.WriteFieldBegin("hideSponsorBilling", thrift.BOOL, 31); err != nil {
			return fmt.Errorf("%T write field begin error 31:hideSponsorBilling: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.HideSponsorBilling)); err != nil {
			return fmt.Errorf("%T.hideSponsorBilling (31) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 31:hideSponsorBilling: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaxExempt() {
		if err := oprot.WriteFieldBegin("taxExempt", thrift.BOOL, 32); err != nil {
			return fmt.Errorf("%T write field begin error 32:taxExempt: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.TaxExempt)); err != nil {
			return fmt.Errorf("%T.taxExempt (32) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 32:taxExempt: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseEmailAutoFiling() {
		if err := oprot.WriteFieldBegin("useEmailAutoFiling", thrift.BOOL, 33); err != nil {
			return fmt.Errorf("%T write field begin error 33:useEmailAutoFiling: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.UseEmailAutoFiling)); err != nil {
			return fmt.Errorf("%T.useEmailAutoFiling (33) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 33:useEmailAutoFiling: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderEmailConfig() {
		if err := oprot.WriteFieldBegin("reminderEmailConfig", thrift.I32, 34); err != nil {
			return fmt.Errorf("%T write field begin error 34:reminderEmailConfig: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ReminderEmailConfig)); err != nil {
			return fmt.Errorf("%T.reminderEmailConfig (34) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 34:reminderEmailConfig: %s", p, err)
		}
	}
	return err
}

func (p *UserAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAttributes(%+v)", *p)
}

type Accounting struct {
	UploadLimit            int64              `thrift:"uploadLimit,1"`
	UploadLimitEnd         Timestamp          `thrift:"uploadLimitEnd,2"`
	UploadLimitNextMonth   int64              `thrift:"uploadLimitNextMonth,3"`
	PremiumServiceStatus   PremiumOrderStatus `thrift:"premiumServiceStatus,4"`
	PremiumOrderNumber     string             `thrift:"premiumOrderNumber,5"`
	PremiumCommerceService string             `thrift:"premiumCommerceService,6"`
	PremiumServiceStart    Timestamp          `thrift:"premiumServiceStart,7"`
	PremiumServiceSKU      string             `thrift:"premiumServiceSKU,8"`
	LastSuccessfulCharge   Timestamp          `thrift:"lastSuccessfulCharge,9"`
	LastFailedCharge       Timestamp          `thrift:"lastFailedCharge,10"`
	LastFailedChargeReason string             `thrift:"lastFailedChargeReason,11"`
	NextPaymentDue         Timestamp          `thrift:"nextPaymentDue,12"`
	PremiumLockUntil       Timestamp          `thrift:"premiumLockUntil,13"`
	Updated                Timestamp          `thrift:"updated,14"`
	// unused field # 15
	PremiumSubscriptionNumber string           `thrift:"premiumSubscriptionNumber,16"`
	LastRequestedCharge       Timestamp        `thrift:"lastRequestedCharge,17"`
	Currency                  string           `thrift:"currency,18"`
	UnitPrice                 int32            `thrift:"unitPrice,19"`
	BusinessId                int32            `thrift:"businessId,20"`
	BusinessName              string           `thrift:"businessName,21"`
	BusinessRole              BusinessUserRole `thrift:"businessRole,22"`
	UnitDiscount              int32            `thrift:"unitDiscount,23"`
	NextChargeDate            Timestamp        `thrift:"nextChargeDate,24"`
}

func NewAccounting() *Accounting {
	return &Accounting{
		PremiumServiceStatus: math.MinInt32 - 1, // unset sentinal value

		BusinessRole: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Accounting) IsSetUploadLimit() bool {
	return p.UploadLimit != 0
}

func (p *Accounting) IsSetUploadLimitEnd() bool {
	return p.UploadLimitEnd != 0
}

func (p *Accounting) IsSetUploadLimitNextMonth() bool {
	return p.UploadLimitNextMonth != 0
}

func (p *Accounting) IsSetPremiumServiceStatus() bool {
	return int64(p.PremiumServiceStatus) != math.MinInt32-1
}

func (p *Accounting) IsSetPremiumOrderNumber() bool {
	return p.PremiumOrderNumber != ""
}

func (p *Accounting) IsSetPremiumCommerceService() bool {
	return p.PremiumCommerceService != ""
}

func (p *Accounting) IsSetPremiumServiceStart() bool {
	return p.PremiumServiceStart != 0
}

func (p *Accounting) IsSetPremiumServiceSKU() bool {
	return p.PremiumServiceSKU != ""
}

func (p *Accounting) IsSetLastSuccessfulCharge() bool {
	return p.LastSuccessfulCharge != 0
}

func (p *Accounting) IsSetLastFailedCharge() bool {
	return p.LastFailedCharge != 0
}

func (p *Accounting) IsSetLastFailedChargeReason() bool {
	return p.LastFailedChargeReason != ""
}

func (p *Accounting) IsSetNextPaymentDue() bool {
	return p.NextPaymentDue != 0
}

func (p *Accounting) IsSetPremiumLockUntil() bool {
	return p.PremiumLockUntil != 0
}

func (p *Accounting) IsSetUpdated() bool {
	return p.Updated != 0
}

func (p *Accounting) IsSetPremiumSubscriptionNumber() bool {
	return p.PremiumSubscriptionNumber != ""
}

func (p *Accounting) IsSetLastRequestedCharge() bool {
	return p.LastRequestedCharge != 0
}

func (p *Accounting) IsSetCurrency() bool {
	return p.Currency != ""
}

func (p *Accounting) IsSetUnitPrice() bool {
	return p.UnitPrice != 0
}

func (p *Accounting) IsSetBusinessId() bool {
	return p.BusinessId != 0
}

func (p *Accounting) IsSetBusinessName() bool {
	return p.BusinessName != ""
}

func (p *Accounting) IsSetBusinessRole() bool {
	return int64(p.BusinessRole) != math.MinInt32-1
}

func (p *Accounting) IsSetUnitDiscount() bool {
	return p.UnitDiscount != 0
}

func (p *Accounting) IsSetNextChargeDate() bool {
	return p.NextChargeDate != 0
}

func (p *Accounting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Accounting) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UploadLimit = v
	}
	return nil
}

func (p *Accounting) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UploadLimitEnd = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.UploadLimitNextMonth = v
	}
	return nil
}

func (p *Accounting) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.PremiumServiceStatus = PremiumOrderStatus(v)
	}
	return nil
}

func (p *Accounting) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.PremiumOrderNumber = v
	}
	return nil
}

func (p *Accounting) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.PremiumCommerceService = v
	}
	return nil
}

func (p *Accounting) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.PremiumServiceStart = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.PremiumServiceSKU = v
	}
	return nil
}

func (p *Accounting) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.LastSuccessfulCharge = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.LastFailedCharge = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.LastFailedChargeReason = v
	}
	return nil
}

func (p *Accounting) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.NextPaymentDue = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.PremiumLockUntil = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.Updated = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.PremiumSubscriptionNumber = v
	}
	return nil
}

func (p *Accounting) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.LastRequestedCharge = Timestamp(v)
	}
	return nil
}

func (p *Accounting) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 18: %s")
	} else {
		p.Currency = v
	}
	return nil
}

func (p *Accounting) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 19: %s")
	} else {
		p.UnitPrice = v
	}
	return nil
}

func (p *Accounting) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.BusinessId = v
	}
	return nil
}

func (p *Accounting) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.BusinessName = v
	}
	return nil
}

func (p *Accounting) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 22: %s")
	} else {
		p.BusinessRole = BusinessUserRole(v)
	}
	return nil
}

func (p *Accounting) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 23: %s")
	} else {
		p.UnitDiscount = v
	}
	return nil
}

func (p *Accounting) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 24: %s")
	} else {
		p.NextChargeDate = Timestamp(v)
	}
	return nil
}

func (p *Accounting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Accounting"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Accounting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadLimit() {
		if err := oprot.WriteFieldBegin("uploadLimit", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uploadLimit: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.UploadLimit)); err != nil {
			return fmt.Errorf("%T.uploadLimit (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uploadLimit: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadLimitEnd() {
		if err := oprot.WriteFieldBegin("uploadLimitEnd", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:uploadLimitEnd: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.UploadLimitEnd)); err != nil {
			return fmt.Errorf("%T.uploadLimitEnd (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:uploadLimitEnd: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadLimitNextMonth() {
		if err := oprot.WriteFieldBegin("uploadLimitNextMonth", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:uploadLimitNextMonth: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.UploadLimitNextMonth)); err != nil {
			return fmt.Errorf("%T.uploadLimitNextMonth (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:uploadLimitNextMonth: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumServiceStatus() {
		if err := oprot.WriteFieldBegin("premiumServiceStatus", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:premiumServiceStatus: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.PremiumServiceStatus)); err != nil {
			return fmt.Errorf("%T.premiumServiceStatus (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:premiumServiceStatus: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumOrderNumber() {
		if err := oprot.WriteFieldBegin("premiumOrderNumber", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:premiumOrderNumber: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PremiumOrderNumber)); err != nil {
			return fmt.Errorf("%T.premiumOrderNumber (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:premiumOrderNumber: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumCommerceService() {
		if err := oprot.WriteFieldBegin("premiumCommerceService", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:premiumCommerceService: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PremiumCommerceService)); err != nil {
			return fmt.Errorf("%T.premiumCommerceService (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:premiumCommerceService: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumServiceStart() {
		if err := oprot.WriteFieldBegin("premiumServiceStart", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:premiumServiceStart: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.PremiumServiceStart)); err != nil {
			return fmt.Errorf("%T.premiumServiceStart (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:premiumServiceStart: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumServiceSKU() {
		if err := oprot.WriteFieldBegin("premiumServiceSKU", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:premiumServiceSKU: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PremiumServiceSKU)); err != nil {
			return fmt.Errorf("%T.premiumServiceSKU (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:premiumServiceSKU: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastSuccessfulCharge() {
		if err := oprot.WriteFieldBegin("lastSuccessfulCharge", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:lastSuccessfulCharge: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.LastSuccessfulCharge)); err != nil {
			return fmt.Errorf("%T.lastSuccessfulCharge (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:lastSuccessfulCharge: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastFailedCharge() {
		if err := oprot.WriteFieldBegin("lastFailedCharge", thrift.I64, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:lastFailedCharge: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.LastFailedCharge)); err != nil {
			return fmt.Errorf("%T.lastFailedCharge (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:lastFailedCharge: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastFailedChargeReason() {
		if err := oprot.WriteFieldBegin("lastFailedChargeReason", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:lastFailedChargeReason: %s", p, err)
		}
		if err := oprot.WriteString(string(p.LastFailedChargeReason)); err != nil {
			return fmt.Errorf("%T.lastFailedChargeReason (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:lastFailedChargeReason: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPaymentDue() {
		if err := oprot.WriteFieldBegin("nextPaymentDue", thrift.I64, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:nextPaymentDue: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.NextPaymentDue)); err != nil {
			return fmt.Errorf("%T.nextPaymentDue (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:nextPaymentDue: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumLockUntil() {
		if err := oprot.WriteFieldBegin("premiumLockUntil", thrift.I64, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:premiumLockUntil: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.PremiumLockUntil)); err != nil {
			return fmt.Errorf("%T.premiumLockUntil (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:premiumLockUntil: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:updated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Updated)); err != nil {
			return fmt.Errorf("%T.updated (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:updated: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumSubscriptionNumber() {
		if err := oprot.WriteFieldBegin("premiumSubscriptionNumber", thrift.STRING, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:premiumSubscriptionNumber: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PremiumSubscriptionNumber)); err != nil {
			return fmt.Errorf("%T.premiumSubscriptionNumber (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:premiumSubscriptionNumber: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastRequestedCharge() {
		if err := oprot.WriteFieldBegin("lastRequestedCharge", thrift.I64, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:lastRequestedCharge: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.LastRequestedCharge)); err != nil {
			return fmt.Errorf("%T.lastRequestedCharge (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:lastRequestedCharge: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrency() {
		if err := oprot.WriteFieldBegin("currency", thrift.STRING, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:currency: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Currency)); err != nil {
			return fmt.Errorf("%T.currency (18) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:currency: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnitPrice() {
		if err := oprot.WriteFieldBegin("unitPrice", thrift.I32, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:unitPrice: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnitPrice)); err != nil {
			return fmt.Errorf("%T.unitPrice (19) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:unitPrice: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessId() {
		if err := oprot.WriteFieldBegin("businessId", thrift.I32, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:businessId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BusinessId)); err != nil {
			return fmt.Errorf("%T.businessId (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:businessId: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName() {
		if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:businessName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.BusinessName)); err != nil {
			return fmt.Errorf("%T.businessName (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:businessName: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessRole() {
		if err := oprot.WriteFieldBegin("businessRole", thrift.I32, 22); err != nil {
			return fmt.Errorf("%T write field begin error 22:businessRole: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BusinessRole)); err != nil {
			return fmt.Errorf("%T.businessRole (22) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 22:businessRole: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnitDiscount() {
		if err := oprot.WriteFieldBegin("unitDiscount", thrift.I32, 23); err != nil {
			return fmt.Errorf("%T write field begin error 23:unitDiscount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UnitDiscount)); err != nil {
			return fmt.Errorf("%T.unitDiscount (23) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 23:unitDiscount: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextChargeDate() {
		if err := oprot.WriteFieldBegin("nextChargeDate", thrift.I64, 24); err != nil {
			return fmt.Errorf("%T write field begin error 24:nextChargeDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.NextChargeDate)); err != nil {
			return fmt.Errorf("%T.nextChargeDate (24) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 24:nextChargeDate: %s", p, err)
		}
	}
	return err
}

func (p *Accounting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Accounting(%+v)", *p)
}

type BusinessUserInfo struct {
	BusinessId   int32            `thrift:"businessId,1"`
	BusinessName string           `thrift:"businessName,2"`
	Role         BusinessUserRole `thrift:"role,3"`
	Email        string           `thrift:"email,4"`
}

func NewBusinessUserInfo() *BusinessUserInfo {
	return &BusinessUserInfo{
		Role: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *BusinessUserInfo) IsSetBusinessId() bool {
	return p.BusinessId != 0
}

func (p *BusinessUserInfo) IsSetBusinessName() bool {
	return p.BusinessName != ""
}

func (p *BusinessUserInfo) IsSetRole() bool {
	return int64(p.Role) != math.MinInt32-1
}

func (p *BusinessUserInfo) IsSetEmail() bool {
	return p.Email != ""
}

func (p *BusinessUserInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BusinessUserInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.BusinessId = v
	}
	return nil
}

func (p *BusinessUserInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.BusinessName = v
	}
	return nil
}

func (p *BusinessUserInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Role = BusinessUserRole(v)
	}
	return nil
}

func (p *BusinessUserInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Email = v
	}
	return nil
}

func (p *BusinessUserInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BusinessUserInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BusinessUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessId() {
		if err := oprot.WriteFieldBegin("businessId", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:businessId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BusinessId)); err != nil {
			return fmt.Errorf("%T.businessId (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:businessId: %s", p, err)
		}
	}
	return err
}

func (p *BusinessUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName() {
		if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:businessName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.BusinessName)); err != nil {
			return fmt.Errorf("%T.businessName (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:businessName: %s", p, err)
		}
	}
	return err
}

func (p *BusinessUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:role: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Role)); err != nil {
			return fmt.Errorf("%T.role (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:role: %s", p, err)
		}
	}
	return err
}

func (p *BusinessUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:email: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Email)); err != nil {
			return fmt.Errorf("%T.email (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:email: %s", p, err)
		}
	}
	return err
}

func (p *BusinessUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessUserInfo(%+v)", *p)
}

type PremiumInfo struct {
	CurrentTime                Timestamp          `thrift:"currentTime,1,required"`
	Premium                    bool               `thrift:"premium,2,required"`
	PremiumRecurring           bool               `thrift:"premiumRecurring,3,required"`
	PremiumExpirationDate      Timestamp          `thrift:"premiumExpirationDate,4"`
	PremiumExtendable          bool               `thrift:"premiumExtendable,5,required"`
	PremiumPending             bool               `thrift:"premiumPending,6,required"`
	PremiumCancellationPending bool               `thrift:"premiumCancellationPending,7,required"`
	CanPurchaseUploadAllowance bool               `thrift:"canPurchaseUploadAllowance,8,required"`
	SponsoredGroupName         string             `thrift:"sponsoredGroupName,9"`
	SponsoredGroupRole         SponsoredGroupRole `thrift:"sponsoredGroupRole,10"`
	PremiumUpgradable          bool               `thrift:"premiumUpgradable,11"`
}

func NewPremiumInfo() *PremiumInfo {
	return &PremiumInfo{
		SponsoredGroupRole: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *PremiumInfo) IsSetPremiumExpirationDate() bool {
	return p.PremiumExpirationDate != 0
}

func (p *PremiumInfo) IsSetSponsoredGroupName() bool {
	return p.SponsoredGroupName != ""
}

func (p *PremiumInfo) IsSetSponsoredGroupRole() bool {
	return int64(p.SponsoredGroupRole) != math.MinInt32-1
}

func (p *PremiumInfo) IsSetPremiumUpgradable() bool {
	return p.PremiumUpgradable != false
}

func (p *PremiumInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PremiumInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.CurrentTime = Timestamp(v)
	}
	return nil
}

func (p *PremiumInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Premium = v
	}
	return nil
}

func (p *PremiumInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.PremiumRecurring = v
	}
	return nil
}

func (p *PremiumInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.PremiumExpirationDate = Timestamp(v)
	}
	return nil
}

func (p *PremiumInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.PremiumExtendable = v
	}
	return nil
}

func (p *PremiumInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.PremiumPending = v
	}
	return nil
}

func (p *PremiumInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.PremiumCancellationPending = v
	}
	return nil
}

func (p *PremiumInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.CanPurchaseUploadAllowance = v
	}
	return nil
}

func (p *PremiumInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.SponsoredGroupName = v
	}
	return nil
}

func (p *PremiumInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.SponsoredGroupRole = SponsoredGroupRole(v)
	}
	return nil
}

func (p *PremiumInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.PremiumUpgradable = v
	}
	return nil
}

func (p *PremiumInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PremiumInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PremiumInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:currentTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return fmt.Errorf("%T.currentTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:currentTime: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premium", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:premium: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Premium)); err != nil {
		return fmt.Errorf("%T.premium (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:premium: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumRecurring", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:premiumRecurring: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PremiumRecurring)); err != nil {
		return fmt.Errorf("%T.premiumRecurring (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:premiumRecurring: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumExpirationDate() {
		if err := oprot.WriteFieldBegin("premiumExpirationDate", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:premiumExpirationDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.PremiumExpirationDate)); err != nil {
			return fmt.Errorf("%T.premiumExpirationDate (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:premiumExpirationDate: %s", p, err)
		}
	}
	return err
}

func (p *PremiumInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumExtendable", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:premiumExtendable: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PremiumExtendable)); err != nil {
		return fmt.Errorf("%T.premiumExtendable (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:premiumExtendable: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumPending", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:premiumPending: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PremiumPending)); err != nil {
		return fmt.Errorf("%T.premiumPending (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:premiumPending: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumCancellationPending", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:premiumCancellationPending: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.PremiumCancellationPending)); err != nil {
		return fmt.Errorf("%T.premiumCancellationPending (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:premiumCancellationPending: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canPurchaseUploadAllowance", thrift.BOOL, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:canPurchaseUploadAllowance: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CanPurchaseUploadAllowance)); err != nil {
		return fmt.Errorf("%T.canPurchaseUploadAllowance (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:canPurchaseUploadAllowance: %s", p, err)
	}
	return err
}

func (p *PremiumInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSponsoredGroupName() {
		if err := oprot.WriteFieldBegin("sponsoredGroupName", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:sponsoredGroupName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SponsoredGroupName)); err != nil {
			return fmt.Errorf("%T.sponsoredGroupName (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:sponsoredGroupName: %s", p, err)
		}
	}
	return err
}

func (p *PremiumInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSponsoredGroupRole() {
		if err := oprot.WriteFieldBegin("sponsoredGroupRole", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:sponsoredGroupRole: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.SponsoredGroupRole)); err != nil {
			return fmt.Errorf("%T.sponsoredGroupRole (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:sponsoredGroupRole: %s", p, err)
		}
	}
	return err
}

func (p *PremiumInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumUpgradable() {
		if err := oprot.WriteFieldBegin("premiumUpgradable", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:premiumUpgradable: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.PremiumUpgradable)); err != nil {
			return fmt.Errorf("%T.premiumUpgradable (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:premiumUpgradable: %s", p, err)
		}
	}
	return err
}

func (p *PremiumInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PremiumInfo(%+v)", *p)
}

type User struct {
	Id       UserID `thrift:"id,1"`
	Username string `thrift:"username,2"`
	Email    string `thrift:"email,3"`
	Name     string `thrift:"name,4"`
	// unused field # 5
	Timezone  string         `thrift:"timezone,6"`
	Privilege PrivilegeLevel `thrift:"privilege,7"`
	// unused field # 8
	Created Timestamp `thrift:"created,9"`
	Updated Timestamp `thrift:"updated,10"`
	Deleted Timestamp `thrift:"deleted,11"`
	// unused field # 12
	Active           bool              `thrift:"active,13"`
	ShardId          string            `thrift:"shardId,14"`
	Attributes       *UserAttributes   `thrift:"attributes,15"`
	Accounting       *Accounting       `thrift:"accounting,16"`
	PremiumInfo      *PremiumInfo      `thrift:"premiumInfo,17"`
	BusinessUserInfo *BusinessUserInfo `thrift:"businessUserInfo,18"`
}

func NewUser() *User {
	return &User{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *User) IsSetId() bool {
	return p.Id != 0
}

func (p *User) IsSetUsername() bool {
	return p.Username != ""
}

func (p *User) IsSetEmail() bool {
	return p.Email != ""
}

func (p *User) IsSetName() bool {
	return p.Name != ""
}

func (p *User) IsSetTimezone() bool {
	return p.Timezone != ""
}

func (p *User) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *User) IsSetCreated() bool {
	return p.Created != 0
}

func (p *User) IsSetUpdated() bool {
	return p.Updated != 0
}

func (p *User) IsSetDeleted() bool {
	return p.Deleted != 0
}

func (p *User) IsSetActive() bool {
	return p.Active != false
}

func (p *User) IsSetShardId() bool {
	return p.ShardId != ""
}

func (p *User) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *User) IsSetAccounting() bool {
	return p.Accounting != nil
}

func (p *User) IsSetPremiumInfo() bool {
	return p.PremiumInfo != nil
}

func (p *User) IsSetBusinessUserInfo() bool {
	return p.BusinessUserInfo != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *User) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = UserID(v)
	}
	return nil
}

func (p *User) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *User) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Email = v
	}
	return nil
}

func (p *User) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *User) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Timezone = v
	}
	return nil
}

func (p *User) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Privilege = PrivilegeLevel(v)
	}
	return nil
}

func (p *User) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Created = Timestamp(v)
	}
	return nil
}

func (p *User) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Updated = Timestamp(v)
	}
	return nil
}

func (p *User) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.Deleted = Timestamp(v)
	}
	return nil
}

func (p *User) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.Active = v
	}
	return nil
}

func (p *User) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.ShardId = v
	}
	return nil
}

func (p *User) readField15(iprot thrift.TProtocol) error {
	p.Attributes = NewUserAttributes()
	if err := p.Attributes.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Attributes)
	}
	return nil
}

func (p *User) readField16(iprot thrift.TProtocol) error {
	p.Accounting = NewAccounting()
	if err := p.Accounting.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Accounting)
	}
	return nil
}

func (p *User) readField17(iprot thrift.TProtocol) error {
	p.PremiumInfo = NewPremiumInfo()
	if err := p.PremiumInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.PremiumInfo)
	}
	return nil
}

func (p *User) readField18(iprot thrift.TProtocol) error {
	p.BusinessUserInfo = NewBusinessUserInfo()
	if err := p.BusinessUserInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BusinessUserInfo)
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Id)); err != nil {
			return fmt.Errorf("%T.id (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:id: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:username: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Username)); err != nil {
			return fmt.Errorf("%T.username (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:username: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:email: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Email)); err != nil {
			return fmt.Errorf("%T.email (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:email: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:name: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Name)); err != nil {
			return fmt.Errorf("%T.name (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:name: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimezone() {
		if err := oprot.WriteFieldBegin("timezone", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:timezone: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Timezone)); err != nil {
			return fmt.Errorf("%T.timezone (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:timezone: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:privilege: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:created: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Created)); err != nil {
			return fmt.Errorf("%T.created (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:created: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:updated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Updated)); err != nil {
			return fmt.Errorf("%T.updated (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:updated: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:deleted: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Deleted)); err != nil {
			return fmt.Errorf("%T.deleted (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:deleted: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:active: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Active)); err != nil {
			return fmt.Errorf("%T.active (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:active: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetShardId() {
		if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:shardId: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShardId)); err != nil {
			return fmt.Errorf("%T.shardId (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:shardId: %s", p, err)
		}
	}
	return err
}

func (p *User) writeField15(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 15); err != nil {
				return fmt.Errorf("%T write field begin error 15:attributes: %s", p, err)
			}
			if err := p.Attributes.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Attributes)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 15:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) writeField16(oprot thrift.TProtocol) (err error) {
	if p.Accounting != nil {
		if p.IsSetAccounting() {
			if err := oprot.WriteFieldBegin("accounting", thrift.STRUCT, 16); err != nil {
				return fmt.Errorf("%T write field begin error 16:accounting: %s", p, err)
			}
			if err := p.Accounting.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Accounting)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 16:accounting: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) writeField17(oprot thrift.TProtocol) (err error) {
	if p.PremiumInfo != nil {
		if p.IsSetPremiumInfo() {
			if err := oprot.WriteFieldBegin("premiumInfo", thrift.STRUCT, 17); err != nil {
				return fmt.Errorf("%T write field begin error 17:premiumInfo: %s", p, err)
			}
			if err := p.PremiumInfo.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.PremiumInfo)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 17:premiumInfo: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) writeField18(oprot thrift.TProtocol) (err error) {
	if p.BusinessUserInfo != nil {
		if p.IsSetBusinessUserInfo() {
			if err := oprot.WriteFieldBegin("businessUserInfo", thrift.STRUCT, 18); err != nil {
				return fmt.Errorf("%T write field begin error 18:businessUserInfo: %s", p, err)
			}
			if err := p.BusinessUserInfo.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.BusinessUserInfo)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 18:businessUserInfo: %s", p, err)
			}
		}
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

type Tag struct {
	Guid              Guid   `thrift:"guid,1"`
	Name              string `thrift:"name,2"`
	ParentGuid        Guid   `thrift:"parentGuid,3"`
	UpdateSequenceNum int32  `thrift:"updateSequenceNum,4"`
}

func NewTag() *Tag {
	return &Tag{}
}

func (p *Tag) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *Tag) IsSetName() bool {
	return p.Name != ""
}

func (p *Tag) IsSetParentGuid() bool {
	return p.ParentGuid != ""
}

func (p *Tag) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *Tag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Tag) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *Tag) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Tag) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ParentGuid = Guid(v)
	}
	return nil
}

func (p *Tag) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *Tag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tag"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Tag) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *Tag) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Name)); err != nil {
			return fmt.Errorf("%T.name (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:name: %s", p, err)
		}
	}
	return err
}

func (p *Tag) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentGuid() {
		if err := oprot.WriteFieldBegin("parentGuid", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:parentGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ParentGuid)); err != nil {
			return fmt.Errorf("%T.parentGuid (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:parentGuid: %s", p, err)
		}
	}
	return err
}

func (p *Tag) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *Tag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tag(%+v)", *p)
}

type LazyMap struct {
	KeysOnly map[string]bool   `thrift:"keysOnly,1"`
	FullMap  map[string]string `thrift:"fullMap,2"`
}

func NewLazyMap() *LazyMap {
	return &LazyMap{}
}

func (p *LazyMap) IsSetKeysOnly() bool {
	return p.KeysOnly != nil && len(p.KeysOnly) > 0
}

func (p *LazyMap) IsSetFullMap() bool {
	return p.FullMap != nil && len(p.FullMap) > 0
}

func (p *LazyMap) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LazyMap) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set being: %s")
	}
	p.KeysOnly = make(map[string]bool, size)
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem2 = v
		}
		p.KeysOnly[_elem2] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s")
	}
	return nil
}

func (p *LazyMap) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.FullMap = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val4 = v
		}
		p.FullMap[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *LazyMap) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LazyMap"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LazyMap) writeField1(oprot thrift.TProtocol) (err error) {
	if p.KeysOnly != nil {
		if p.IsSetKeysOnly() {
			if err := oprot.WriteFieldBegin("keysOnly", thrift.SET, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:keysOnly: %s", p, err)
			}
			if err := oprot.WriteSetBegin(thrift.STRING, len(p.KeysOnly)); err != nil {
				return fmt.Errorf("error writing set begin: %s")
			}
			for v, _ := range p.KeysOnly {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return fmt.Errorf("error writing set end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:keysOnly: %s", p, err)
			}
		}
	}
	return err
}

func (p *LazyMap) writeField2(oprot thrift.TProtocol) (err error) {
	if p.FullMap != nil {
		if p.IsSetFullMap() {
			if err := oprot.WriteFieldBegin("fullMap", thrift.MAP, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:fullMap: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.FullMap)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.FullMap {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:fullMap: %s", p, err)
			}
		}
	}
	return err
}

func (p *LazyMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LazyMap(%+v)", *p)
}

type ResourceAttributes struct {
	SourceURL       string    `thrift:"sourceURL,1"`
	Timestamp       Timestamp `thrift:"timestamp,2"`
	Latitude        float64   `thrift:"latitude,3"`
	Longitude       float64   `thrift:"longitude,4"`
	Altitude        float64   `thrift:"altitude,5"`
	CameraMake      string    `thrift:"cameraMake,6"`
	CameraModel     string    `thrift:"cameraModel,7"`
	ClientWillIndex bool      `thrift:"clientWillIndex,8"`
	RecoType        string    `thrift:"recoType,9"`
	FileName        string    `thrift:"fileName,10"`
	Attachment      bool      `thrift:"attachment,11"`
	ApplicationData *LazyMap  `thrift:"applicationData,12"`
}

func NewResourceAttributes() *ResourceAttributes {
	return &ResourceAttributes{}
}

func (p *ResourceAttributes) IsSetSourceURL() bool {
	return p.SourceURL != ""
}

func (p *ResourceAttributes) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *ResourceAttributes) IsSetLatitude() bool {
	return p.Latitude != 0
}

func (p *ResourceAttributes) IsSetLongitude() bool {
	return p.Longitude != 0
}

func (p *ResourceAttributes) IsSetAltitude() bool {
	return p.Altitude != 0
}

func (p *ResourceAttributes) IsSetCameraMake() bool {
	return p.CameraMake != ""
}

func (p *ResourceAttributes) IsSetCameraModel() bool {
	return p.CameraModel != ""
}

func (p *ResourceAttributes) IsSetClientWillIndex() bool {
	return p.ClientWillIndex != false
}

func (p *ResourceAttributes) IsSetRecoType() bool {
	return p.RecoType != ""
}

func (p *ResourceAttributes) IsSetFileName() bool {
	return p.FileName != ""
}

func (p *ResourceAttributes) IsSetAttachment() bool {
	return p.Attachment != false
}

func (p *ResourceAttributes) IsSetApplicationData() bool {
	return p.ApplicationData != nil
}

func (p *ResourceAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResourceAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.SourceURL = v
	}
	return nil
}

func (p *ResourceAttributes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Timestamp = Timestamp(v)
	}
	return nil
}

func (p *ResourceAttributes) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *ResourceAttributes) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *ResourceAttributes) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Altitude = v
	}
	return nil
}

func (p *ResourceAttributes) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.CameraMake = v
	}
	return nil
}

func (p *ResourceAttributes) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.CameraModel = v
	}
	return nil
}

func (p *ResourceAttributes) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.ClientWillIndex = v
	}
	return nil
}

func (p *ResourceAttributes) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.RecoType = v
	}
	return nil
}

func (p *ResourceAttributes) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.FileName = v
	}
	return nil
}

func (p *ResourceAttributes) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.Attachment = v
	}
	return nil
}

func (p *ResourceAttributes) readField12(iprot thrift.TProtocol) error {
	p.ApplicationData = NewLazyMap()
	if err := p.ApplicationData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApplicationData)
	}
	return nil
}

func (p *ResourceAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceAttributes"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ResourceAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceURL() {
		if err := oprot.WriteFieldBegin("sourceURL", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:sourceURL: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SourceURL)); err != nil {
			return fmt.Errorf("%T.sourceURL (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:sourceURL: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatitude() {
		if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:latitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
			return fmt.Errorf("%T.latitude (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:latitude: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongitude() {
		if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:longitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
			return fmt.Errorf("%T.longitude (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:longitude: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAltitude() {
		if err := oprot.WriteFieldBegin("altitude", thrift.DOUBLE, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:altitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Altitude)); err != nil {
			return fmt.Errorf("%T.altitude (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:altitude: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCameraMake() {
		if err := oprot.WriteFieldBegin("cameraMake", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:cameraMake: %s", p, err)
		}
		if err := oprot.WriteString(string(p.CameraMake)); err != nil {
			return fmt.Errorf("%T.cameraMake (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:cameraMake: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCameraModel() {
		if err := oprot.WriteFieldBegin("cameraModel", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:cameraModel: %s", p, err)
		}
		if err := oprot.WriteString(string(p.CameraModel)); err != nil {
			return fmt.Errorf("%T.cameraModel (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:cameraModel: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientWillIndex() {
		if err := oprot.WriteFieldBegin("clientWillIndex", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:clientWillIndex: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ClientWillIndex)); err != nil {
			return fmt.Errorf("%T.clientWillIndex (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:clientWillIndex: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecoType() {
		if err := oprot.WriteFieldBegin("recoType", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:recoType: %s", p, err)
		}
		if err := oprot.WriteString(string(p.RecoType)); err != nil {
			return fmt.Errorf("%T.recoType (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:recoType: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:fileName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.FileName)); err != nil {
			return fmt.Errorf("%T.fileName (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:fileName: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttachment() {
		if err := oprot.WriteFieldBegin("attachment", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:attachment: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Attachment)); err != nil {
			return fmt.Errorf("%T.attachment (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:attachment: %s", p, err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField12(oprot thrift.TProtocol) (err error) {
	if p.ApplicationData != nil {
		if p.IsSetApplicationData() {
			if err := oprot.WriteFieldBegin("applicationData", thrift.STRUCT, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:applicationData: %s", p, err)
			}
			if err := p.ApplicationData.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.ApplicationData)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:applicationData: %s", p, err)
			}
		}
	}
	return err
}

func (p *ResourceAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceAttributes(%+v)", *p)
}

type Resource struct {
	Guid        Guid   `thrift:"guid,1"`
	NoteGuid    Guid   `thrift:"noteGuid,2"`
	Data        *Data  `thrift:"data,3"`
	Mime        string `thrift:"mime,4"`
	Width       int16  `thrift:"width,5"`
	Height      int16  `thrift:"height,6"`
	Duration    int16  `thrift:"duration,7"`
	Active      bool   `thrift:"active,8"`
	Recognition *Data  `thrift:"recognition,9"`
	// unused field # 10
	Attributes        *ResourceAttributes `thrift:"attributes,11"`
	UpdateSequenceNum int32               `thrift:"updateSequenceNum,12"`
	AlternateData     *Data               `thrift:"alternateData,13"`
}

func NewResource() *Resource {
	return &Resource{}
}

func (p *Resource) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *Resource) IsSetNoteGuid() bool {
	return p.NoteGuid != ""
}

func (p *Resource) IsSetData() bool {
	return p.Data != nil
}

func (p *Resource) IsSetMime() bool {
	return p.Mime != ""
}

func (p *Resource) IsSetWidth() bool {
	return p.Width != 0
}

func (p *Resource) IsSetHeight() bool {
	return p.Height != 0
}

func (p *Resource) IsSetDuration() bool {
	return p.Duration != 0
}

func (p *Resource) IsSetActive() bool {
	return p.Active != false
}

func (p *Resource) IsSetRecognition() bool {
	return p.Recognition != nil
}

func (p *Resource) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *Resource) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *Resource) IsSetAlternateData() bool {
	return p.AlternateData != nil
}

func (p *Resource) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Resource) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *Resource) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoteGuid = Guid(v)
	}
	return nil
}

func (p *Resource) readField3(iprot thrift.TProtocol) error {
	p.Data = NewData()
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data)
	}
	return nil
}

func (p *Resource) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Mime = v
	}
	return nil
}

func (p *Resource) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Width = v
	}
	return nil
}

func (p *Resource) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Height = v
	}
	return nil
}

func (p *Resource) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Duration = v
	}
	return nil
}

func (p *Resource) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Active = v
	}
	return nil
}

func (p *Resource) readField9(iprot thrift.TProtocol) error {
	p.Recognition = NewData()
	if err := p.Recognition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Recognition)
	}
	return nil
}

func (p *Resource) readField11(iprot thrift.TProtocol) error {
	p.Attributes = NewResourceAttributes()
	if err := p.Attributes.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Attributes)
	}
	return nil
}

func (p *Resource) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *Resource) readField13(iprot thrift.TProtocol) error {
	p.AlternateData = NewData()
	if err := p.AlternateData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AlternateData)
	}
	return nil
}

func (p *Resource) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Resource"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Resource) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:noteGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
			return fmt.Errorf("%T.noteGuid (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:noteGuid: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if p.IsSetData() {
			if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:data: %s", p, err)
			}
			if err := p.Data.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Data)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:data: %s", p, err)
			}
		}
	}
	return err
}

func (p *Resource) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMime() {
		if err := oprot.WriteFieldBegin("mime", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:mime: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Mime)); err != nil {
			return fmt.Errorf("%T.mime (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:mime: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I16, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:width: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Width)); err != nil {
			return fmt.Errorf("%T.width (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:width: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I16, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:height: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Height)); err != nil {
			return fmt.Errorf("%T.height (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:height: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I16, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:duration: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Duration)); err != nil {
			return fmt.Errorf("%T.duration (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:duration: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:active: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Active)); err != nil {
			return fmt.Errorf("%T.active (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:active: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField9(oprot thrift.TProtocol) (err error) {
	if p.Recognition != nil {
		if p.IsSetRecognition() {
			if err := oprot.WriteFieldBegin("recognition", thrift.STRUCT, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:recognition: %s", p, err)
			}
			if err := p.Recognition.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Recognition)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:recognition: %s", p, err)
			}
		}
	}
	return err
}

func (p *Resource) writeField11(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 11); err != nil {
				return fmt.Errorf("%T write field begin error 11:attributes: %s", p, err)
			}
			if err := p.Attributes.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Attributes)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 11:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *Resource) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *Resource) writeField13(oprot thrift.TProtocol) (err error) {
	if p.AlternateData != nil {
		if p.IsSetAlternateData() {
			if err := oprot.WriteFieldBegin("alternateData", thrift.STRUCT, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:alternateData: %s", p, err)
			}
			if err := p.AlternateData.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.AlternateData)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:alternateData: %s", p, err)
			}
		}
	}
	return err
}

func (p *Resource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Resource(%+v)", *p)
}

type NoteAttributes struct {
	SubjectDate Timestamp `thrift:"subjectDate,1"`
	// unused field # 2
	// unused field # 3
	// unused field # 4
	// unused field # 5
	// unused field # 6
	// unused field # 7
	// unused field # 8
	// unused field # 9
	Latitude          float64   `thrift:"latitude,10"`
	Longitude         float64   `thrift:"longitude,11"`
	Altitude          float64   `thrift:"altitude,12"`
	Author            string    `thrift:"author,13"`
	Source            string    `thrift:"source,14"`
	SourceURL         string    `thrift:"sourceURL,15"`
	SourceApplication string    `thrift:"sourceApplication,16"`
	ShareDate         Timestamp `thrift:"shareDate,17"`
	ReminderOrder     int64     `thrift:"reminderOrder,18"`
	ReminderDoneTime  Timestamp `thrift:"reminderDoneTime,19"`
	ReminderTime      Timestamp `thrift:"reminderTime,20"`
	PlaceName         string    `thrift:"placeName,21"`
	ContentClass      string    `thrift:"contentClass,22"`
	ApplicationData   *LazyMap  `thrift:"applicationData,23"`
	LastEditedBy      string    `thrift:"lastEditedBy,24"`
	// unused field # 25
	Classifications map[string]string `thrift:"classifications,26"`
	CreatorId       UserID            `thrift:"creatorId,27"`
	LastEditorId    UserID            `thrift:"lastEditorId,28"`
}

func NewNoteAttributes() *NoteAttributes {
	return &NoteAttributes{}
}

func (p *NoteAttributes) IsSetSubjectDate() bool {
	return p.SubjectDate != 0
}

func (p *NoteAttributes) IsSetLatitude() bool {
	return p.Latitude != 0
}

func (p *NoteAttributes) IsSetLongitude() bool {
	return p.Longitude != 0
}

func (p *NoteAttributes) IsSetAltitude() bool {
	return p.Altitude != 0
}

func (p *NoteAttributes) IsSetAuthor() bool {
	return p.Author != ""
}

func (p *NoteAttributes) IsSetSource() bool {
	return p.Source != ""
}

func (p *NoteAttributes) IsSetSourceURL() bool {
	return p.SourceURL != ""
}

func (p *NoteAttributes) IsSetSourceApplication() bool {
	return p.SourceApplication != ""
}

func (p *NoteAttributes) IsSetShareDate() bool {
	return p.ShareDate != 0
}

func (p *NoteAttributes) IsSetReminderOrder() bool {
	return p.ReminderOrder != 0
}

func (p *NoteAttributes) IsSetReminderDoneTime() bool {
	return p.ReminderDoneTime != 0
}

func (p *NoteAttributes) IsSetReminderTime() bool {
	return p.ReminderTime != 0
}

func (p *NoteAttributes) IsSetPlaceName() bool {
	return p.PlaceName != ""
}

func (p *NoteAttributes) IsSetContentClass() bool {
	return p.ContentClass != ""
}

func (p *NoteAttributes) IsSetApplicationData() bool {
	return p.ApplicationData != nil
}

func (p *NoteAttributes) IsSetLastEditedBy() bool {
	return p.LastEditedBy != ""
}

func (p *NoteAttributes) IsSetClassifications() bool {
	return p.Classifications != nil && len(p.Classifications) > 0
}

func (p *NoteAttributes) IsSetCreatorId() bool {
	return p.CreatorId != 0
}

func (p *NoteAttributes) IsSetLastEditorId() bool {
	return p.LastEditorId != 0
}

func (p *NoteAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.SubjectDate = Timestamp(v)
	}
	return nil
}

func (p *NoteAttributes) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *NoteAttributes) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *NoteAttributes) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.Altitude = v
	}
	return nil
}

func (p *NoteAttributes) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.Author = v
	}
	return nil
}

func (p *NoteAttributes) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.Source = v
	}
	return nil
}

func (p *NoteAttributes) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.SourceURL = v
	}
	return nil
}

func (p *NoteAttributes) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.SourceApplication = v
	}
	return nil
}

func (p *NoteAttributes) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.ShareDate = Timestamp(v)
	}
	return nil
}

func (p *NoteAttributes) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 18: %s")
	} else {
		p.ReminderOrder = v
	}
	return nil
}

func (p *NoteAttributes) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 19: %s")
	} else {
		p.ReminderDoneTime = Timestamp(v)
	}
	return nil
}

func (p *NoteAttributes) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.ReminderTime = Timestamp(v)
	}
	return nil
}

func (p *NoteAttributes) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.PlaceName = v
	}
	return nil
}

func (p *NoteAttributes) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 22: %s")
	} else {
		p.ContentClass = v
	}
	return nil
}

func (p *NoteAttributes) readField23(iprot thrift.TProtocol) error {
	p.ApplicationData = NewLazyMap()
	if err := p.ApplicationData.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ApplicationData)
	}
	return nil
}

func (p *NoteAttributes) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 24: %s")
	} else {
		p.LastEditedBy = v
	}
	return nil
}

func (p *NoteAttributes) readField26(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Classifications = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key5 = v
		}
		var _val6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val6 = v
		}
		p.Classifications[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *NoteAttributes) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 27: %s")
	} else {
		p.CreatorId = UserID(v)
	}
	return nil
}

func (p *NoteAttributes) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 28: %s")
	} else {
		p.LastEditorId = UserID(v)
	}
	return nil
}

func (p *NoteAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteAttributes"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectDate() {
		if err := oprot.WriteFieldBegin("subjectDate", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:subjectDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.SubjectDate)); err != nil {
			return fmt.Errorf("%T.subjectDate (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:subjectDate: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatitude() {
		if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:latitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
			return fmt.Errorf("%T.latitude (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:latitude: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongitude() {
		if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:longitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
			return fmt.Errorf("%T.longitude (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:longitude: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAltitude() {
		if err := oprot.WriteFieldBegin("altitude", thrift.DOUBLE, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:altitude: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Altitude)); err != nil {
			return fmt.Errorf("%T.altitude (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:altitude: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err := oprot.WriteFieldBegin("author", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:author: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Author)); err != nil {
			return fmt.Errorf("%T.author (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:author: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:source: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Source)); err != nil {
			return fmt.Errorf("%T.source (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:source: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceURL() {
		if err := oprot.WriteFieldBegin("sourceURL", thrift.STRING, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:sourceURL: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SourceURL)); err != nil {
			return fmt.Errorf("%T.sourceURL (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:sourceURL: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceApplication() {
		if err := oprot.WriteFieldBegin("sourceApplication", thrift.STRING, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:sourceApplication: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SourceApplication)); err != nil {
			return fmt.Errorf("%T.sourceApplication (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:sourceApplication: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareDate() {
		if err := oprot.WriteFieldBegin("shareDate", thrift.I64, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:shareDate: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ShareDate)); err != nil {
			return fmt.Errorf("%T.shareDate (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:shareDate: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderOrder() {
		if err := oprot.WriteFieldBegin("reminderOrder", thrift.I64, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:reminderOrder: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ReminderOrder)); err != nil {
			return fmt.Errorf("%T.reminderOrder (18) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:reminderOrder: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderDoneTime() {
		if err := oprot.WriteFieldBegin("reminderDoneTime", thrift.I64, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:reminderDoneTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ReminderDoneTime)); err != nil {
			return fmt.Errorf("%T.reminderDoneTime (19) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:reminderDoneTime: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderTime() {
		if err := oprot.WriteFieldBegin("reminderTime", thrift.I64, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:reminderTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ReminderTime)); err != nil {
			return fmt.Errorf("%T.reminderTime (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:reminderTime: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceName() {
		if err := oprot.WriteFieldBegin("placeName", thrift.STRING, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:placeName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PlaceName)); err != nil {
			return fmt.Errorf("%T.placeName (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:placeName: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentClass() {
		if err := oprot.WriteFieldBegin("contentClass", thrift.STRING, 22); err != nil {
			return fmt.Errorf("%T write field begin error 22:contentClass: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ContentClass)); err != nil {
			return fmt.Errorf("%T.contentClass (22) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 22:contentClass: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField23(oprot thrift.TProtocol) (err error) {
	if p.ApplicationData != nil {
		if p.IsSetApplicationData() {
			if err := oprot.WriteFieldBegin("applicationData", thrift.STRUCT, 23); err != nil {
				return fmt.Errorf("%T write field begin error 23:applicationData: %s", p, err)
			}
			if err := p.ApplicationData.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.ApplicationData)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 23:applicationData: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteAttributes) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEditedBy() {
		if err := oprot.WriteFieldBegin("lastEditedBy", thrift.STRING, 24); err != nil {
			return fmt.Errorf("%T write field begin error 24:lastEditedBy: %s", p, err)
		}
		if err := oprot.WriteString(string(p.LastEditedBy)); err != nil {
			return fmt.Errorf("%T.lastEditedBy (24) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 24:lastEditedBy: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField26(oprot thrift.TProtocol) (err error) {
	if p.Classifications != nil {
		if p.IsSetClassifications() {
			if err := oprot.WriteFieldBegin("classifications", thrift.MAP, 26); err != nil {
				return fmt.Errorf("%T write field begin error 26:classifications: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Classifications)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.Classifications {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 26:classifications: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteAttributes) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatorId() {
		if err := oprot.WriteFieldBegin("creatorId", thrift.I32, 27); err != nil {
			return fmt.Errorf("%T write field begin error 27:creatorId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.CreatorId)); err != nil {
			return fmt.Errorf("%T.creatorId (27) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 27:creatorId: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEditorId() {
		if err := oprot.WriteFieldBegin("lastEditorId", thrift.I32, 28); err != nil {
			return fmt.Errorf("%T write field begin error 28:lastEditorId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.LastEditorId)); err != nil {
			return fmt.Errorf("%T.lastEditorId (28) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 28:lastEditorId: %s", p, err)
		}
	}
	return err
}

func (p *NoteAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteAttributes(%+v)", *p)
}

type Note struct {
	Guid              Guid            `thrift:"guid,1"`
	Title             string          `thrift:"title,2"`
	Content           string          `thrift:"content,3"`
	ContentHash       []byte          `thrift:"contentHash,4"`
	ContentLength     int32           `thrift:"contentLength,5"`
	Created           Timestamp       `thrift:"created,6"`
	Updated           Timestamp       `thrift:"updated,7"`
	Deleted           Timestamp       `thrift:"deleted,8"`
	Active            bool            `thrift:"active,9"`
	UpdateSequenceNum int32           `thrift:"updateSequenceNum,10"`
	NotebookGuid      string          `thrift:"notebookGuid,11"`
	TagGuids          []Guid          `thrift:"tagGuids,12"`
	Resources         []*Resource     `thrift:"resources,13"`
	Attributes        *NoteAttributes `thrift:"attributes,14"`
	TagNames          []string        `thrift:"tagNames,15"`
}

func NewNote() *Note {
	return &Note{}
}

func (p *Note) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *Note) IsSetTitle() bool {
	return p.Title != ""
}

func (p *Note) IsSetContent() bool {
	return p.Content != ""
}

func (p *Note) IsSetContentHash() bool {
	return p.ContentHash != nil
}

func (p *Note) IsSetContentLength() bool {
	return p.ContentLength != 0
}

func (p *Note) IsSetCreated() bool {
	return p.Created != 0
}

func (p *Note) IsSetUpdated() bool {
	return p.Updated != 0
}

func (p *Note) IsSetDeleted() bool {
	return p.Deleted != 0
}

func (p *Note) IsSetActive() bool {
	return p.Active != false
}

func (p *Note) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *Note) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *Note) IsSetTagGuids() bool {
	return p.TagGuids != nil && len(p.TagGuids) > 0
}

func (p *Note) IsSetResources() bool {
	return p.Resources != nil && len(p.Resources) > 0
}

func (p *Note) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *Note) IsSetTagNames() bool {
	return p.TagNames != nil && len(p.TagNames) > 0
}

func (p *Note) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Note) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *Note) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *Note) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Content = v
	}
	return nil
}

func (p *Note) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ContentHash = v
	}
	return nil
}

func (p *Note) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ContentLength = v
	}
	return nil
}

func (p *Note) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Created = Timestamp(v)
	}
	return nil
}

func (p *Note) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Updated = Timestamp(v)
	}
	return nil
}

func (p *Note) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Deleted = Timestamp(v)
	}
	return nil
}

func (p *Note) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Active = v
	}
	return nil
}

func (p *Note) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *Note) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.NotebookGuid = v
	}
	return nil
}

func (p *Note) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TagGuids = make([]Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem7 Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem7 = Guid(v)
		}
		p.TagGuids = append(p.TagGuids, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Note) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Resources = make([]*Resource, 0, size)
	for i := 0; i < size; i++ {
		_elem8 := NewResource()
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8)
		}
		p.Resources = append(p.Resources, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Note) readField14(iprot thrift.TProtocol) error {
	p.Attributes = NewNoteAttributes()
	if err := p.Attributes.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Attributes)
	}
	return nil
}

func (p *Note) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TagNames = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem9 = v
		}
		p.TagNames = append(p.TagNames, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Note) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Note"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Note) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:title: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Title)); err != nil {
			return fmt.Errorf("%T.title (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:title: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:content: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Content)); err != nil {
			return fmt.Errorf("%T.content (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:content: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField4(oprot thrift.TProtocol) (err error) {
	if p.ContentHash != nil {
		if p.IsSetContentHash() {
			if err := oprot.WriteFieldBegin("contentHash", thrift.BINARY, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:contentHash: %s", p, err)
			}
			if err := oprot.WriteBinary(p.ContentHash); err != nil {
				return fmt.Errorf("%T.contentHash (4) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:contentHash: %s", p, err)
			}
		}
	}
	return err
}

func (p *Note) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err := oprot.WriteFieldBegin("contentLength", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:contentLength: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ContentLength)); err != nil {
			return fmt.Errorf("%T.contentLength (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:contentLength: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:created: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Created)); err != nil {
			return fmt.Errorf("%T.created (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:created: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:updated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Updated)); err != nil {
			return fmt.Errorf("%T.updated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:updated: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:deleted: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Deleted)); err != nil {
			return fmt.Errorf("%T.deleted (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:deleted: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:active: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Active)); err != nil {
			return fmt.Errorf("%T.active (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:active: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *Note) writeField12(oprot thrift.TProtocol) (err error) {
	if p.TagGuids != nil {
		if p.IsSetTagGuids() {
			if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:tagGuids: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.TagGuids {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:tagGuids: %s", p, err)
			}
		}
	}
	return err
}

func (p *Note) writeField13(oprot thrift.TProtocol) (err error) {
	if p.Resources != nil {
		if p.IsSetResources() {
			if err := oprot.WriteFieldBegin("resources", thrift.LIST, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:resources: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Resources {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:resources: %s", p, err)
			}
		}
	}
	return err
}

func (p *Note) writeField14(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:attributes: %s", p, err)
			}
			if err := p.Attributes.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Attributes)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *Note) writeField15(oprot thrift.TProtocol) (err error) {
	if p.TagNames != nil {
		if p.IsSetTagNames() {
			if err := oprot.WriteFieldBegin("tagNames", thrift.LIST, 15); err != nil {
				return fmt.Errorf("%T write field begin error 15:tagNames: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.TagNames)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.TagNames {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 15:tagNames: %s", p, err)
			}
		}
	}
	return err
}

func (p *Note) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Note(%+v)", *p)
}

type Publishing struct {
	Uri               string        `thrift:"uri,1"`
	Order             NoteSortOrder `thrift:"order,2"`
	Ascending         bool          `thrift:"ascending,3"`
	PublicDescription string        `thrift:"publicDescription,4"`
}

func NewPublishing() *Publishing {
	return &Publishing{
		Order: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Publishing) IsSetUri() bool {
	return p.Uri != ""
}

func (p *Publishing) IsSetOrder() bool {
	return int64(p.Order) != math.MinInt32-1
}

func (p *Publishing) IsSetAscending() bool {
	return p.Ascending != false
}

func (p *Publishing) IsSetPublicDescription() bool {
	return p.PublicDescription != ""
}

func (p *Publishing) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Publishing) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Uri = v
	}
	return nil
}

func (p *Publishing) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Order = NoteSortOrder(v)
	}
	return nil
}

func (p *Publishing) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Ascending = v
	}
	return nil
}

func (p *Publishing) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.PublicDescription = v
	}
	return nil
}

func (p *Publishing) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Publishing"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Publishing) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUri() {
		if err := oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:uri: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Uri)); err != nil {
			return fmt.Errorf("%T.uri (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:uri: %s", p, err)
		}
	}
	return err
}

func (p *Publishing) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err := oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:order: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Order)); err != nil {
			return fmt.Errorf("%T.order (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:order: %s", p, err)
		}
	}
	return err
}

func (p *Publishing) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAscending() {
		if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:ascending: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Ascending)); err != nil {
			return fmt.Errorf("%T.ascending (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:ascending: %s", p, err)
		}
	}
	return err
}

func (p *Publishing) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublicDescription() {
		if err := oprot.WriteFieldBegin("publicDescription", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:publicDescription: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PublicDescription)); err != nil {
			return fmt.Errorf("%T.publicDescription (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:publicDescription: %s", p, err)
		}
	}
	return err
}

func (p *Publishing) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Publishing(%+v)", *p)
}

type BusinessNotebook struct {
	NotebookDescription string                       `thrift:"notebookDescription,1"`
	Privilege           SharedNotebookPrivilegeLevel `thrift:"privilege,2"`
	Recommended         bool                         `thrift:"recommended,3"`
}

func NewBusinessNotebook() *BusinessNotebook {
	return &BusinessNotebook{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *BusinessNotebook) IsSetNotebookDescription() bool {
	return p.NotebookDescription != ""
}

func (p *BusinessNotebook) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *BusinessNotebook) IsSetRecommended() bool {
	return p.Recommended != false
}

func (p *BusinessNotebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BusinessNotebook) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NotebookDescription = v
	}
	return nil
}

func (p *BusinessNotebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Privilege = SharedNotebookPrivilegeLevel(v)
	}
	return nil
}

func (p *BusinessNotebook) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Recommended = v
	}
	return nil
}

func (p *BusinessNotebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BusinessNotebook"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BusinessNotebook) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookDescription() {
		if err := oprot.WriteFieldBegin("notebookDescription", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:notebookDescription: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookDescription)); err != nil {
			return fmt.Errorf("%T.notebookDescription (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:notebookDescription: %s", p, err)
		}
	}
	return err
}

func (p *BusinessNotebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:privilege: %s", p, err)
		}
	}
	return err
}

func (p *BusinessNotebook) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecommended() {
		if err := oprot.WriteFieldBegin("recommended", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:recommended: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Recommended)); err != nil {
			return fmt.Errorf("%T.recommended (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:recommended: %s", p, err)
		}
	}
	return err
}

func (p *BusinessNotebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessNotebook(%+v)", *p)
}

type SavedSearchScope struct {
	IncludeAccount                 bool `thrift:"includeAccount,1"`
	IncludePersonalLinkedNotebooks bool `thrift:"includePersonalLinkedNotebooks,2"`
	IncludeBusinessLinkedNotebooks bool `thrift:"includeBusinessLinkedNotebooks,3"`
}

func NewSavedSearchScope() *SavedSearchScope {
	return &SavedSearchScope{}
}

func (p *SavedSearchScope) IsSetIncludeAccount() bool {
	return p.IncludeAccount != false
}

func (p *SavedSearchScope) IsSetIncludePersonalLinkedNotebooks() bool {
	return p.IncludePersonalLinkedNotebooks != false
}

func (p *SavedSearchScope) IsSetIncludeBusinessLinkedNotebooks() bool {
	return p.IncludeBusinessLinkedNotebooks != false
}

func (p *SavedSearchScope) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SavedSearchScope) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IncludeAccount = v
	}
	return nil
}

func (p *SavedSearchScope) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IncludePersonalLinkedNotebooks = v
	}
	return nil
}

func (p *SavedSearchScope) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IncludeBusinessLinkedNotebooks = v
	}
	return nil
}

func (p *SavedSearchScope) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SavedSearchScope"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SavedSearchScope) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAccount() {
		if err := oprot.WriteFieldBegin("includeAccount", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:includeAccount: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeAccount)); err != nil {
			return fmt.Errorf("%T.includeAccount (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:includeAccount: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearchScope) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludePersonalLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includePersonalLinkedNotebooks", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:includePersonalLinkedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludePersonalLinkedNotebooks)); err != nil {
			return fmt.Errorf("%T.includePersonalLinkedNotebooks (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:includePersonalLinkedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearchScope) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeBusinessLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includeBusinessLinkedNotebooks", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:includeBusinessLinkedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeBusinessLinkedNotebooks)); err != nil {
			return fmt.Errorf("%T.includeBusinessLinkedNotebooks (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:includeBusinessLinkedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearchScope) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SavedSearchScope(%+v)", *p)
}

type SavedSearch struct {
	Guid              Guid              `thrift:"guid,1"`
	Name              string            `thrift:"name,2"`
	Query             string            `thrift:"query,3"`
	Format            QueryFormat       `thrift:"format,4"`
	UpdateSequenceNum int32             `thrift:"updateSequenceNum,5"`
	Scope             *SavedSearchScope `thrift:"scope,6"`
}

func NewSavedSearch() *SavedSearch {
	return &SavedSearch{
		Format: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SavedSearch) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *SavedSearch) IsSetName() bool {
	return p.Name != ""
}

func (p *SavedSearch) IsSetQuery() bool {
	return p.Query != ""
}

func (p *SavedSearch) IsSetFormat() bool {
	return int64(p.Format) != math.MinInt32-1
}

func (p *SavedSearch) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *SavedSearch) IsSetScope() bool {
	return p.Scope != nil
}

func (p *SavedSearch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SavedSearch) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *SavedSearch) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *SavedSearch) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Query = v
	}
	return nil
}

func (p *SavedSearch) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Format = QueryFormat(v)
	}
	return nil
}

func (p *SavedSearch) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *SavedSearch) readField6(iprot thrift.TProtocol) error {
	p.Scope = NewSavedSearchScope()
	if err := p.Scope.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Scope)
	}
	return nil
}

func (p *SavedSearch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SavedSearch"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SavedSearch) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Name)); err != nil {
			return fmt.Errorf("%T.name (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:name: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearch) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuery() {
		if err := oprot.WriteFieldBegin("query", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:query: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Query)); err != nil {
			return fmt.Errorf("%T.query (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:query: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearch) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err := oprot.WriteFieldBegin("format", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:format: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Format)); err != nil {
			return fmt.Errorf("%T.format (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:format: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearch) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *SavedSearch) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Scope != nil {
		if p.IsSetScope() {
			if err := oprot.WriteFieldBegin("scope", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:scope: %s", p, err)
			}
			if err := p.Scope.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Scope)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:scope: %s", p, err)
			}
		}
	}
	return err
}

func (p *SavedSearch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SavedSearch(%+v)", *p)
}

type SharedNotebookRecipientSettings struct {
	ReminderNotifyEmail bool `thrift:"reminderNotifyEmail,1"`
	ReminderNotifyInApp bool `thrift:"reminderNotifyInApp,2"`
}

func NewSharedNotebookRecipientSettings() *SharedNotebookRecipientSettings {
	return &SharedNotebookRecipientSettings{}
}

func (p *SharedNotebookRecipientSettings) IsSetReminderNotifyEmail() bool {
	return p.ReminderNotifyEmail != false
}

func (p *SharedNotebookRecipientSettings) IsSetReminderNotifyInApp() bool {
	return p.ReminderNotifyInApp != false
}

func (p *SharedNotebookRecipientSettings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ReminderNotifyEmail = v
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ReminderNotifyInApp = v
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SharedNotebookRecipientSettings"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderNotifyEmail() {
		if err := oprot.WriteFieldBegin("reminderNotifyEmail", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:reminderNotifyEmail: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ReminderNotifyEmail)); err != nil {
			return fmt.Errorf("%T.reminderNotifyEmail (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:reminderNotifyEmail: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebookRecipientSettings) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderNotifyInApp() {
		if err := oprot.WriteFieldBegin("reminderNotifyInApp", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:reminderNotifyInApp: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ReminderNotifyInApp)); err != nil {
			return fmt.Errorf("%T.reminderNotifyInApp (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:reminderNotifyInApp: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebookRecipientSettings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedNotebookRecipientSettings(%+v)", *p)
}

type SharedNotebook struct {
	Id                 int64                            `thrift:"id,1"`
	UserId             int32                            `thrift:"userId,2"`
	NotebookGuid       string                           `thrift:"notebookGuid,3"`
	Email              string                           `thrift:"email,4"`
	NotebookModifiable bool                             `thrift:"notebookModifiable,5"`
	RequireLogin       bool                             `thrift:"requireLogin,6"`
	ServiceCreated     Timestamp                        `thrift:"serviceCreated,7"`
	ShareKey           string                           `thrift:"shareKey,8"`
	Username           string                           `thrift:"username,9"`
	ServiceUpdated     Timestamp                        `thrift:"serviceUpdated,10"`
	Privilege          SharedNotebookPrivilegeLevel     `thrift:"privilege,11"`
	AllowPreview       bool                             `thrift:"allowPreview,12"`
	RecipientSettings  *SharedNotebookRecipientSettings `thrift:"recipientSettings,13"`
}

func NewSharedNotebook() *SharedNotebook {
	return &SharedNotebook{
		Privilege: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SharedNotebook) IsSetId() bool {
	return p.Id != 0
}

func (p *SharedNotebook) IsSetUserId() bool {
	return p.UserId != 0
}

func (p *SharedNotebook) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *SharedNotebook) IsSetEmail() bool {
	return p.Email != ""
}

func (p *SharedNotebook) IsSetNotebookModifiable() bool {
	return p.NotebookModifiable != false
}

func (p *SharedNotebook) IsSetRequireLogin() bool {
	return p.RequireLogin != false
}

func (p *SharedNotebook) IsSetServiceCreated() bool {
	return p.ServiceCreated != 0
}

func (p *SharedNotebook) IsSetServiceUpdated() bool {
	return p.ServiceUpdated != 0
}

func (p *SharedNotebook) IsSetShareKey() bool {
	return p.ShareKey != ""
}

func (p *SharedNotebook) IsSetUsername() bool {
	return p.Username != ""
}

func (p *SharedNotebook) IsSetPrivilege() bool {
	return int64(p.Privilege) != math.MinInt32-1
}

func (p *SharedNotebook) IsSetAllowPreview() bool {
	return p.AllowPreview != false
}

func (p *SharedNotebook) IsSetRecipientSettings() bool {
	return p.RecipientSettings != nil
}

func (p *SharedNotebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SharedNotebook) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *SharedNotebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.UserId = v
	}
	return nil
}

func (p *SharedNotebook) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NotebookGuid = v
	}
	return nil
}

func (p *SharedNotebook) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Email = v
	}
	return nil
}

func (p *SharedNotebook) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.NotebookModifiable = v
	}
	return nil
}

func (p *SharedNotebook) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.RequireLogin = v
	}
	return nil
}

func (p *SharedNotebook) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.ServiceCreated = Timestamp(v)
	}
	return nil
}

func (p *SharedNotebook) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.ServiceUpdated = Timestamp(v)
	}
	return nil
}

func (p *SharedNotebook) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.ShareKey = v
	}
	return nil
}

func (p *SharedNotebook) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *SharedNotebook) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.Privilege = SharedNotebookPrivilegeLevel(v)
	}
	return nil
}

func (p *SharedNotebook) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.AllowPreview = v
	}
	return nil
}

func (p *SharedNotebook) readField13(iprot thrift.TProtocol) error {
	p.RecipientSettings = NewSharedNotebookRecipientSettings()
	if err := p.RecipientSettings.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.RecipientSettings)
	}
	return nil
}

func (p *SharedNotebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SharedNotebook"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SharedNotebook) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Id)); err != nil {
			return fmt.Errorf("%T.id (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:id: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserId() {
		if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:userId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UserId)); err != nil {
			return fmt.Errorf("%T.userId (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:userId: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:email: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Email)); err != nil {
			return fmt.Errorf("%T.email (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:email: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookModifiable() {
		if err := oprot.WriteFieldBegin("notebookModifiable", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:notebookModifiable: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NotebookModifiable)); err != nil {
			return fmt.Errorf("%T.notebookModifiable (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:notebookModifiable: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequireLogin() {
		if err := oprot.WriteFieldBegin("requireLogin", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:requireLogin: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.RequireLogin)); err != nil {
			return fmt.Errorf("%T.requireLogin (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:requireLogin: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceCreated() {
		if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:serviceCreated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ServiceCreated)); err != nil {
			return fmt.Errorf("%T.serviceCreated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:serviceCreated: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareKey() {
		if err := oprot.WriteFieldBegin("shareKey", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:shareKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShareKey)); err != nil {
			return fmt.Errorf("%T.shareKey (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:shareKey: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:username: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Username)); err != nil {
			return fmt.Errorf("%T.username (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:username: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceUpdated() {
		if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:serviceUpdated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ServiceUpdated)); err != nil {
			return fmt.Errorf("%T.serviceUpdated (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:serviceUpdated: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:privilege: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Privilege)); err != nil {
			return fmt.Errorf("%T.privilege (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:privilege: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPreview() {
		if err := oprot.WriteFieldBegin("allowPreview", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:allowPreview: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.AllowPreview)); err != nil {
			return fmt.Errorf("%T.allowPreview (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:allowPreview: %s", p, err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField13(oprot thrift.TProtocol) (err error) {
	if p.RecipientSettings != nil {
		if p.IsSetRecipientSettings() {
			if err := oprot.WriteFieldBegin("recipientSettings", thrift.STRUCT, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:recipientSettings: %s", p, err)
			}
			if err := p.RecipientSettings.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.RecipientSettings)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:recipientSettings: %s", p, err)
			}
		}
	}
	return err
}

func (p *SharedNotebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedNotebook(%+v)", *p)
}

type NotebookRestrictions struct {
	NoReadNotes                            bool                               `thrift:"noReadNotes,1"`
	NoCreateNotes                          bool                               `thrift:"noCreateNotes,2"`
	NoUpdateNotes                          bool                               `thrift:"noUpdateNotes,3"`
	NoExpungeNotes                         bool                               `thrift:"noExpungeNotes,4"`
	NoShareNotes                           bool                               `thrift:"noShareNotes,5"`
	NoEmailNotes                           bool                               `thrift:"noEmailNotes,6"`
	NoSendMessageToRecipients              bool                               `thrift:"noSendMessageToRecipients,7"`
	NoUpdateNotebook                       bool                               `thrift:"noUpdateNotebook,8"`
	NoExpungeNotebook                      bool                               `thrift:"noExpungeNotebook,9"`
	NoSetDefaultNotebook                   bool                               `thrift:"noSetDefaultNotebook,10"`
	NoSetNotebookStack                     bool                               `thrift:"noSetNotebookStack,11"`
	NoPublishToPublic                      bool                               `thrift:"noPublishToPublic,12"`
	NoPublishToBusinessLibrary             bool                               `thrift:"noPublishToBusinessLibrary,13"`
	NoCreateTags                           bool                               `thrift:"noCreateTags,14"`
	NoUpdateTags                           bool                               `thrift:"noUpdateTags,15"`
	NoExpungeTags                          bool                               `thrift:"noExpungeTags,16"`
	NoSetParentTag                         bool                               `thrift:"noSetParentTag,17"`
	NoCreateSharedNotebooks                bool                               `thrift:"noCreateSharedNotebooks,18"`
	UpdateWhichSharedNotebookRestrictions  SharedNotebookInstanceRestrictions `thrift:"updateWhichSharedNotebookRestrictions,19"`
	ExpungeWhichSharedNotebookRestrictions SharedNotebookInstanceRestrictions `thrift:"expungeWhichSharedNotebookRestrictions,20"`
}

func NewNotebookRestrictions() *NotebookRestrictions {
	return &NotebookRestrictions{
		UpdateWhichSharedNotebookRestrictions: math.MinInt32 - 1, // unset sentinal value

		ExpungeWhichSharedNotebookRestrictions: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *NotebookRestrictions) IsSetNoReadNotes() bool {
	return p.NoReadNotes != false
}

func (p *NotebookRestrictions) IsSetNoCreateNotes() bool {
	return p.NoCreateNotes != false
}

func (p *NotebookRestrictions) IsSetNoUpdateNotes() bool {
	return p.NoUpdateNotes != false
}

func (p *NotebookRestrictions) IsSetNoExpungeNotes() bool {
	return p.NoExpungeNotes != false
}

func (p *NotebookRestrictions) IsSetNoShareNotes() bool {
	return p.NoShareNotes != false
}

func (p *NotebookRestrictions) IsSetNoEmailNotes() bool {
	return p.NoEmailNotes != false
}

func (p *NotebookRestrictions) IsSetNoSendMessageToRecipients() bool {
	return p.NoSendMessageToRecipients != false
}

func (p *NotebookRestrictions) IsSetNoUpdateNotebook() bool {
	return p.NoUpdateNotebook != false
}

func (p *NotebookRestrictions) IsSetNoExpungeNotebook() bool {
	return p.NoExpungeNotebook != false
}

func (p *NotebookRestrictions) IsSetNoSetDefaultNotebook() bool {
	return p.NoSetDefaultNotebook != false
}

func (p *NotebookRestrictions) IsSetNoSetNotebookStack() bool {
	return p.NoSetNotebookStack != false
}

func (p *NotebookRestrictions) IsSetNoPublishToPublic() bool {
	return p.NoPublishToPublic != false
}

func (p *NotebookRestrictions) IsSetNoPublishToBusinessLibrary() bool {
	return p.NoPublishToBusinessLibrary != false
}

func (p *NotebookRestrictions) IsSetNoCreateTags() bool {
	return p.NoCreateTags != false
}

func (p *NotebookRestrictions) IsSetNoUpdateTags() bool {
	return p.NoUpdateTags != false
}

func (p *NotebookRestrictions) IsSetNoExpungeTags() bool {
	return p.NoExpungeTags != false
}

func (p *NotebookRestrictions) IsSetNoSetParentTag() bool {
	return p.NoSetParentTag != false
}

func (p *NotebookRestrictions) IsSetNoCreateSharedNotebooks() bool {
	return p.NoCreateSharedNotebooks != false
}

func (p *NotebookRestrictions) IsSetUpdateWhichSharedNotebookRestrictions() bool {
	return int64(p.UpdateWhichSharedNotebookRestrictions) != math.MinInt32-1
}

func (p *NotebookRestrictions) IsSetExpungeWhichSharedNotebookRestrictions() bool {
	return int64(p.ExpungeWhichSharedNotebookRestrictions) != math.MinInt32-1
}

func (p *NotebookRestrictions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotebookRestrictions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoReadNotes = v
	}
	return nil
}

func (p *NotebookRestrictions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NoCreateNotes = v
	}
	return nil
}

func (p *NotebookRestrictions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NoUpdateNotes = v
	}
	return nil
}

func (p *NotebookRestrictions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NoExpungeNotes = v
	}
	return nil
}

func (p *NotebookRestrictions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.NoShareNotes = v
	}
	return nil
}

func (p *NotebookRestrictions) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.NoEmailNotes = v
	}
	return nil
}

func (p *NotebookRestrictions) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.NoSendMessageToRecipients = v
	}
	return nil
}

func (p *NotebookRestrictions) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.NoUpdateNotebook = v
	}
	return nil
}

func (p *NotebookRestrictions) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.NoExpungeNotebook = v
	}
	return nil
}

func (p *NotebookRestrictions) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.NoSetDefaultNotebook = v
	}
	return nil
}

func (p *NotebookRestrictions) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.NoSetNotebookStack = v
	}
	return nil
}

func (p *NotebookRestrictions) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.NoPublishToPublic = v
	}
	return nil
}

func (p *NotebookRestrictions) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.NoPublishToBusinessLibrary = v
	}
	return nil
}

func (p *NotebookRestrictions) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.NoCreateTags = v
	}
	return nil
}

func (p *NotebookRestrictions) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.NoUpdateTags = v
	}
	return nil
}

func (p *NotebookRestrictions) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.NoExpungeTags = v
	}
	return nil
}

func (p *NotebookRestrictions) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.NoSetParentTag = v
	}
	return nil
}

func (p *NotebookRestrictions) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 18: %s")
	} else {
		p.NoCreateSharedNotebooks = v
	}
	return nil
}

func (p *NotebookRestrictions) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 19: %s")
	} else {
		p.UpdateWhichSharedNotebookRestrictions = SharedNotebookInstanceRestrictions(v)
	}
	return nil
}

func (p *NotebookRestrictions) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.ExpungeWhichSharedNotebookRestrictions = SharedNotebookInstanceRestrictions(v)
	}
	return nil
}

func (p *NotebookRestrictions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotebookRestrictions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotebookRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoReadNotes() {
		if err := oprot.WriteFieldBegin("noReadNotes", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noReadNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoReadNotes)); err != nil {
			return fmt.Errorf("%T.noReadNotes (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noReadNotes: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoCreateNotes() {
		if err := oprot.WriteFieldBegin("noCreateNotes", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:noCreateNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoCreateNotes)); err != nil {
			return fmt.Errorf("%T.noCreateNotes (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:noCreateNotes: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoUpdateNotes() {
		if err := oprot.WriteFieldBegin("noUpdateNotes", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:noUpdateNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoUpdateNotes)); err != nil {
			return fmt.Errorf("%T.noUpdateNotes (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:noUpdateNotes: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoExpungeNotes() {
		if err := oprot.WriteFieldBegin("noExpungeNotes", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:noExpungeNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoExpungeNotes)); err != nil {
			return fmt.Errorf("%T.noExpungeNotes (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:noExpungeNotes: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoShareNotes() {
		if err := oprot.WriteFieldBegin("noShareNotes", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:noShareNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoShareNotes)); err != nil {
			return fmt.Errorf("%T.noShareNotes (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:noShareNotes: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoEmailNotes() {
		if err := oprot.WriteFieldBegin("noEmailNotes", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:noEmailNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoEmailNotes)); err != nil {
			return fmt.Errorf("%T.noEmailNotes (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:noEmailNotes: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSendMessageToRecipients() {
		if err := oprot.WriteFieldBegin("noSendMessageToRecipients", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:noSendMessageToRecipients: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSendMessageToRecipients)); err != nil {
			return fmt.Errorf("%T.noSendMessageToRecipients (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:noSendMessageToRecipients: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoUpdateNotebook() {
		if err := oprot.WriteFieldBegin("noUpdateNotebook", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:noUpdateNotebook: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoUpdateNotebook)); err != nil {
			return fmt.Errorf("%T.noUpdateNotebook (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:noUpdateNotebook: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoExpungeNotebook() {
		if err := oprot.WriteFieldBegin("noExpungeNotebook", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:noExpungeNotebook: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoExpungeNotebook)); err != nil {
			return fmt.Errorf("%T.noExpungeNotebook (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:noExpungeNotebook: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetDefaultNotebook() {
		if err := oprot.WriteFieldBegin("noSetDefaultNotebook", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:noSetDefaultNotebook: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetDefaultNotebook)); err != nil {
			return fmt.Errorf("%T.noSetDefaultNotebook (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:noSetDefaultNotebook: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetNotebookStack() {
		if err := oprot.WriteFieldBegin("noSetNotebookStack", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:noSetNotebookStack: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetNotebookStack)); err != nil {
			return fmt.Errorf("%T.noSetNotebookStack (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:noSetNotebookStack: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoPublishToPublic() {
		if err := oprot.WriteFieldBegin("noPublishToPublic", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:noPublishToPublic: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoPublishToPublic)); err != nil {
			return fmt.Errorf("%T.noPublishToPublic (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:noPublishToPublic: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoPublishToBusinessLibrary() {
		if err := oprot.WriteFieldBegin("noPublishToBusinessLibrary", thrift.BOOL, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:noPublishToBusinessLibrary: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoPublishToBusinessLibrary)); err != nil {
			return fmt.Errorf("%T.noPublishToBusinessLibrary (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:noPublishToBusinessLibrary: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoCreateTags() {
		if err := oprot.WriteFieldBegin("noCreateTags", thrift.BOOL, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:noCreateTags: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoCreateTags)); err != nil {
			return fmt.Errorf("%T.noCreateTags (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:noCreateTags: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoUpdateTags() {
		if err := oprot.WriteFieldBegin("noUpdateTags", thrift.BOOL, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:noUpdateTags: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoUpdateTags)); err != nil {
			return fmt.Errorf("%T.noUpdateTags (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:noUpdateTags: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoExpungeTags() {
		if err := oprot.WriteFieldBegin("noExpungeTags", thrift.BOOL, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:noExpungeTags: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoExpungeTags)); err != nil {
			return fmt.Errorf("%T.noExpungeTags (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:noExpungeTags: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetParentTag() {
		if err := oprot.WriteFieldBegin("noSetParentTag", thrift.BOOL, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:noSetParentTag: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoSetParentTag)); err != nil {
			return fmt.Errorf("%T.noSetParentTag (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:noSetParentTag: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoCreateSharedNotebooks() {
		if err := oprot.WriteFieldBegin("noCreateSharedNotebooks", thrift.BOOL, 18); err != nil {
			return fmt.Errorf("%T write field begin error 18:noCreateSharedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.NoCreateSharedNotebooks)); err != nil {
			return fmt.Errorf("%T.noCreateSharedNotebooks (18) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 18:noCreateSharedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateWhichSharedNotebookRestrictions() {
		if err := oprot.WriteFieldBegin("updateWhichSharedNotebookRestrictions", thrift.I32, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:updateWhichSharedNotebookRestrictions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateWhichSharedNotebookRestrictions)); err != nil {
			return fmt.Errorf("%T.updateWhichSharedNotebookRestrictions (19) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:updateWhichSharedNotebookRestrictions: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungeWhichSharedNotebookRestrictions() {
		if err := oprot.WriteFieldBegin("expungeWhichSharedNotebookRestrictions", thrift.I32, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:expungeWhichSharedNotebookRestrictions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ExpungeWhichSharedNotebookRestrictions)); err != nil {
			return fmt.Errorf("%T.expungeWhichSharedNotebookRestrictions (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:expungeWhichSharedNotebookRestrictions: %s", p, err)
		}
	}
	return err
}

func (p *NotebookRestrictions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotebookRestrictions(%+v)", *p)
}

type Notebook struct {
	Guid Guid   `thrift:"guid,1"`
	Name string `thrift:"name,2"`
	// unused field # 3
	// unused field # 4
	UpdateSequenceNum int32     `thrift:"updateSequenceNum,5"`
	DefaultNotebook   bool      `thrift:"defaultNotebook,6"`
	ServiceCreated    Timestamp `thrift:"serviceCreated,7"`
	ServiceUpdated    Timestamp `thrift:"serviceUpdated,8"`
	// unused field # 9
	Publishing        *Publishing           `thrift:"publishing,10"`
	Published         bool                  `thrift:"published,11"`
	Stack             string                `thrift:"stack,12"`
	SharedNotebookIds []int64               `thrift:"sharedNotebookIds,13"`
	SharedNotebooks   []*SharedNotebook     `thrift:"sharedNotebooks,14"`
	BusinessNotebook  *BusinessNotebook     `thrift:"businessNotebook,15"`
	Contact           *User                 `thrift:"contact,16"`
	Restrictions      *NotebookRestrictions `thrift:"restrictions,17"`
}

func NewNotebook() *Notebook {
	return &Notebook{}
}

func (p *Notebook) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *Notebook) IsSetName() bool {
	return p.Name != ""
}

func (p *Notebook) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *Notebook) IsSetDefaultNotebook() bool {
	return p.DefaultNotebook != false
}

func (p *Notebook) IsSetServiceCreated() bool {
	return p.ServiceCreated != 0
}

func (p *Notebook) IsSetServiceUpdated() bool {
	return p.ServiceUpdated != 0
}

func (p *Notebook) IsSetPublishing() bool {
	return p.Publishing != nil
}

func (p *Notebook) IsSetPublished() bool {
	return p.Published != false
}

func (p *Notebook) IsSetStack() bool {
	return p.Stack != ""
}

func (p *Notebook) IsSetSharedNotebookIds() bool {
	return p.SharedNotebookIds != nil && len(p.SharedNotebookIds) > 0
}

func (p *Notebook) IsSetSharedNotebooks() bool {
	return p.SharedNotebooks != nil && len(p.SharedNotebooks) > 0
}

func (p *Notebook) IsSetBusinessNotebook() bool {
	return p.BusinessNotebook != nil
}

func (p *Notebook) IsSetContact() bool {
	return p.Contact != nil
}

func (p *Notebook) IsSetRestrictions() bool {
	return p.Restrictions != nil
}

func (p *Notebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Notebook) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *Notebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Notebook) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *Notebook) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.DefaultNotebook = v
	}
	return nil
}

func (p *Notebook) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.ServiceCreated = Timestamp(v)
	}
	return nil
}

func (p *Notebook) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.ServiceUpdated = Timestamp(v)
	}
	return nil
}

func (p *Notebook) readField10(iprot thrift.TProtocol) error {
	p.Publishing = NewPublishing()
	if err := p.Publishing.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Publishing)
	}
	return nil
}

func (p *Notebook) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.Published = v
	}
	return nil
}

func (p *Notebook) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.Stack = v
	}
	return nil
}

func (p *Notebook) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SharedNotebookIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem10 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem10 = v
		}
		p.SharedNotebookIds = append(p.SharedNotebookIds, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Notebook) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SharedNotebooks = make([]*SharedNotebook, 0, size)
	for i := 0; i < size; i++ {
		_elem11 := NewSharedNotebook()
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11)
		}
		p.SharedNotebooks = append(p.SharedNotebooks, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Notebook) readField15(iprot thrift.TProtocol) error {
	p.BusinessNotebook = NewBusinessNotebook()
	if err := p.BusinessNotebook.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BusinessNotebook)
	}
	return nil
}

func (p *Notebook) readField16(iprot thrift.TProtocol) error {
	p.Contact = NewUser()
	if err := p.Contact.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Contact)
	}
	return nil
}

func (p *Notebook) readField17(iprot thrift.TProtocol) error {
	p.Restrictions = NewNotebookRestrictions()
	if err := p.Restrictions.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Restrictions)
	}
	return nil
}

func (p *Notebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Notebook"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Notebook) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Name)); err != nil {
			return fmt.Errorf("%T.name (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:name: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultNotebook() {
		if err := oprot.WriteFieldBegin("defaultNotebook", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:defaultNotebook: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.DefaultNotebook)); err != nil {
			return fmt.Errorf("%T.defaultNotebook (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:defaultNotebook: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceCreated() {
		if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:serviceCreated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ServiceCreated)); err != nil {
			return fmt.Errorf("%T.serviceCreated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:serviceCreated: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceUpdated() {
		if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:serviceUpdated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.ServiceUpdated)); err != nil {
			return fmt.Errorf("%T.serviceUpdated (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:serviceUpdated: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField10(oprot thrift.TProtocol) (err error) {
	if p.Publishing != nil {
		if p.IsSetPublishing() {
			if err := oprot.WriteFieldBegin("publishing", thrift.STRUCT, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:publishing: %s", p, err)
			}
			if err := p.Publishing.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Publishing)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:publishing: %s", p, err)
			}
		}
	}
	return err
}

func (p *Notebook) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublished() {
		if err := oprot.WriteFieldBegin("published", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:published: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Published)); err != nil {
			return fmt.Errorf("%T.published (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:published: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStack() {
		if err := oprot.WriteFieldBegin("stack", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:stack: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Stack)); err != nil {
			return fmt.Errorf("%T.stack (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:stack: %s", p, err)
		}
	}
	return err
}

func (p *Notebook) writeField13(oprot thrift.TProtocol) (err error) {
	if p.SharedNotebookIds != nil {
		if p.IsSetSharedNotebookIds() {
			if err := oprot.WriteFieldBegin("sharedNotebookIds", thrift.LIST, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:sharedNotebookIds: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I64, len(p.SharedNotebookIds)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SharedNotebookIds {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:sharedNotebookIds: %s", p, err)
			}
		}
	}
	return err
}

func (p *Notebook) writeField14(oprot thrift.TProtocol) (err error) {
	if p.SharedNotebooks != nil {
		if p.IsSetSharedNotebooks() {
			if err := oprot.WriteFieldBegin("sharedNotebooks", thrift.LIST, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:sharedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SharedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SharedNotebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:sharedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *Notebook) writeField15(oprot thrift.TProtocol) (err error) {
	if p.BusinessNotebook != nil {
		if p.IsSetBusinessNotebook() {
			if err := oprot.WriteFieldBegin("businessNotebook", thrift.STRUCT, 15); err != nil {
				return fmt.Errorf("%T write field begin error 15:businessNotebook: %s", p, err)
			}
			if err := p.BusinessNotebook.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.BusinessNotebook)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 15:businessNotebook: %s", p, err)
			}
		}
	}
	return err
}

func (p *Notebook) writeField16(oprot thrift.TProtocol) (err error) {
	if p.Contact != nil {
		if p.IsSetContact() {
			if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 16); err != nil {
				return fmt.Errorf("%T write field begin error 16:contact: %s", p, err)
			}
			if err := p.Contact.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Contact)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 16:contact: %s", p, err)
			}
		}
	}
	return err
}

func (p *Notebook) writeField17(oprot thrift.TProtocol) (err error) {
	if p.Restrictions != nil {
		if p.IsSetRestrictions() {
			if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 17); err != nil {
				return fmt.Errorf("%T write field begin error 17:restrictions: %s", p, err)
			}
			if err := p.Restrictions.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Restrictions)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 17:restrictions: %s", p, err)
			}
		}
	}
	return err
}

func (p *Notebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Notebook(%+v)", *p)
}

type LinkedNotebook struct {
	// unused field # 1
	ShareName         string `thrift:"shareName,2"`
	Username          string `thrift:"username,3"`
	ShardId           string `thrift:"shardId,4"`
	ShareKey          string `thrift:"shareKey,5"`
	Uri               string `thrift:"uri,6"`
	Guid              Guid   `thrift:"guid,7"`
	UpdateSequenceNum int32  `thrift:"updateSequenceNum,8"`
	NoteStoreUrl      string `thrift:"noteStoreUrl,9"`
	WebApiUrlPrefix   string `thrift:"webApiUrlPrefix,10"`
	Stack             string `thrift:"stack,11"`
	BusinessId        int32  `thrift:"businessId,12"`
}

func NewLinkedNotebook() *LinkedNotebook {
	return &LinkedNotebook{}
}

func (p *LinkedNotebook) IsSetShareName() bool {
	return p.ShareName != ""
}

func (p *LinkedNotebook) IsSetUsername() bool {
	return p.Username != ""
}

func (p *LinkedNotebook) IsSetShardId() bool {
	return p.ShardId != ""
}

func (p *LinkedNotebook) IsSetShareKey() bool {
	return p.ShareKey != ""
}

func (p *LinkedNotebook) IsSetUri() bool {
	return p.Uri != ""
}

func (p *LinkedNotebook) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *LinkedNotebook) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *LinkedNotebook) IsSetNoteStoreUrl() bool {
	return p.NoteStoreUrl != ""
}

func (p *LinkedNotebook) IsSetWebApiUrlPrefix() bool {
	return p.WebApiUrlPrefix != ""
}

func (p *LinkedNotebook) IsSetStack() bool {
	return p.Stack != ""
}

func (p *LinkedNotebook) IsSetBusinessId() bool {
	return p.BusinessId != 0
}

func (p *LinkedNotebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LinkedNotebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ShareName = v
	}
	return nil
}

func (p *LinkedNotebook) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Username = v
	}
	return nil
}

func (p *LinkedNotebook) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ShardId = v
	}
	return nil
}

func (p *LinkedNotebook) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ShareKey = v
	}
	return nil
}

func (p *LinkedNotebook) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Uri = v
	}
	return nil
}

func (p *LinkedNotebook) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *LinkedNotebook) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *LinkedNotebook) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.NoteStoreUrl = v
	}
	return nil
}

func (p *LinkedNotebook) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.WebApiUrlPrefix = v
	}
	return nil
}

func (p *LinkedNotebook) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.Stack = v
	}
	return nil
}

func (p *LinkedNotebook) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.BusinessId = v
	}
	return nil
}

func (p *LinkedNotebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkedNotebook"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LinkedNotebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareName() {
		if err := oprot.WriteFieldBegin("shareName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:shareName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShareName)); err != nil {
			return fmt.Errorf("%T.shareName (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:shareName: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:username: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Username)); err != nil {
			return fmt.Errorf("%T.username (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:username: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetShardId() {
		if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:shardId: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShardId)); err != nil {
			return fmt.Errorf("%T.shardId (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:shardId: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareKey() {
		if err := oprot.WriteFieldBegin("shareKey", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:shareKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShareKey)); err != nil {
			return fmt.Errorf("%T.shareKey (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:shareKey: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUri() {
		if err := oprot.WriteFieldBegin("uri", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:uri: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Uri)); err != nil {
			return fmt.Errorf("%T.uri (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:uri: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:guid: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteStoreUrl() {
		if err := oprot.WriteFieldBegin("noteStoreUrl", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:noteStoreUrl: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NoteStoreUrl)); err != nil {
			return fmt.Errorf("%T.noteStoreUrl (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:noteStoreUrl: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWebApiUrlPrefix() {
		if err := oprot.WriteFieldBegin("webApiUrlPrefix", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:webApiUrlPrefix: %s", p, err)
		}
		if err := oprot.WriteString(string(p.WebApiUrlPrefix)); err != nil {
			return fmt.Errorf("%T.webApiUrlPrefix (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:webApiUrlPrefix: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStack() {
		if err := oprot.WriteFieldBegin("stack", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:stack: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Stack)); err != nil {
			return fmt.Errorf("%T.stack (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:stack: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessId() {
		if err := oprot.WriteFieldBegin("businessId", thrift.I32, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:businessId: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BusinessId)); err != nil {
			return fmt.Errorf("%T.businessId (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:businessId: %s", p, err)
		}
	}
	return err
}

func (p *LinkedNotebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkedNotebook(%+v)", *p)
}

type NotebookDescriptor struct {
	Guid                Guid   `thrift:"guid,1"`
	NotebookDisplayName string `thrift:"notebookDisplayName,2"`
	ContactName         string `thrift:"contactName,3"`
	HasSharedNotebook   bool   `thrift:"hasSharedNotebook,4"`
	JoinedUserCount     int32  `thrift:"joinedUserCount,5"`
}

func NewNotebookDescriptor() *NotebookDescriptor {
	return &NotebookDescriptor{}
}

func (p *NotebookDescriptor) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *NotebookDescriptor) IsSetNotebookDisplayName() bool {
	return p.NotebookDisplayName != ""
}

func (p *NotebookDescriptor) IsSetContactName() bool {
	return p.ContactName != ""
}

func (p *NotebookDescriptor) IsSetHasSharedNotebook() bool {
	return p.HasSharedNotebook != false
}

func (p *NotebookDescriptor) IsSetJoinedUserCount() bool {
	return p.JoinedUserCount != 0
}

func (p *NotebookDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotebookDescriptor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Guid(v)
	}
	return nil
}

func (p *NotebookDescriptor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NotebookDisplayName = v
	}
	return nil
}

func (p *NotebookDescriptor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ContactName = v
	}
	return nil
}

func (p *NotebookDescriptor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.HasSharedNotebook = v
	}
	return nil
}

func (p *NotebookDescriptor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.JoinedUserCount = v
	}
	return nil
}

func (p *NotebookDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotebookDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotebookDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookDisplayName() {
		if err := oprot.WriteFieldBegin("notebookDisplayName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:notebookDisplayName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookDisplayName)); err != nil {
			return fmt.Errorf("%T.notebookDisplayName (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:notebookDisplayName: %s", p, err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContactName() {
		if err := oprot.WriteFieldBegin("contactName", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:contactName: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ContactName)); err != nil {
			return fmt.Errorf("%T.contactName (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:contactName: %s", p, err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasSharedNotebook() {
		if err := oprot.WriteFieldBegin("hasSharedNotebook", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:hasSharedNotebook: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.HasSharedNotebook)); err != nil {
			return fmt.Errorf("%T.hasSharedNotebook (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:hasSharedNotebook: %s", p, err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJoinedUserCount() {
		if err := oprot.WriteFieldBegin("joinedUserCount", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:joinedUserCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.JoinedUserCount)); err != nil {
			return fmt.Errorf("%T.joinedUserCount (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:joinedUserCount: %s", p, err)
		}
	}
	return err
}

func (p *NotebookDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotebookDescriptor(%+v)", *p)
}
