// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"NoteStore"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  SyncState getSyncState(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  SyncState getSyncStateWithMetrics(string authenticationToken, ClientUsageMetrics clientMetrics)")
	fmt.Fprintln(os.Stderr, "  SyncChunk getSyncChunk(string authenticationToken, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)")
	fmt.Fprintln(os.Stderr, "  SyncChunk getFilteredSyncChunk(string authenticationToken, i32 afterUSN, i32 maxEntries, SyncChunkFilter filter)")
	fmt.Fprintln(os.Stderr, "  SyncState getLinkedNotebookSyncState(string authenticationToken, LinkedNotebook linkedNotebook)")
	fmt.Fprintln(os.Stderr, "  SyncChunk getLinkedNotebookSyncChunk(string authenticationToken, LinkedNotebook linkedNotebook, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)")
	fmt.Fprintln(os.Stderr, "   listNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  Notebook getNotebook(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Notebook getDefaultNotebook(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  Notebook createNotebook(string authenticationToken, Notebook notebook)")
	fmt.Fprintln(os.Stderr, "  i32 updateNotebook(string authenticationToken, Notebook notebook)")
	fmt.Fprintln(os.Stderr, "  i32 expungeNotebook(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "   listTags(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "   listTagsByNotebook(string authenticationToken, Guid notebookGuid)")
	fmt.Fprintln(os.Stderr, "  Tag getTag(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Tag createTag(string authenticationToken, Tag tag)")
	fmt.Fprintln(os.Stderr, "  i32 updateTag(string authenticationToken, Tag tag)")
	fmt.Fprintln(os.Stderr, "  void untagAll(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  i32 expungeTag(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "   listSearches(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  SavedSearch getSearch(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  SavedSearch createSearch(string authenticationToken, SavedSearch search)")
	fmt.Fprintln(os.Stderr, "  i32 updateSearch(string authenticationToken, SavedSearch search)")
	fmt.Fprintln(os.Stderr, "  i32 expungeSearch(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  NoteList findNotes(string authenticationToken, NoteFilter filter, i32 offset, i32 maxNotes)")
	fmt.Fprintln(os.Stderr, "  i32 findNoteOffset(string authenticationToken, NoteFilter filter, Guid guid)")
	fmt.Fprintln(os.Stderr, "  NotesMetadataList findNotesMetadata(string authenticationToken, NoteFilter filter, i32 offset, i32 maxNotes, NotesMetadataResultSpec resultSpec)")
	fmt.Fprintln(os.Stderr, "  NoteCollectionCounts findNoteCounts(string authenticationToken, NoteFilter filter, bool withTrash)")
	fmt.Fprintln(os.Stderr, "  Note getNote(string authenticationToken, Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
	fmt.Fprintln(os.Stderr, "  LazyMap getNoteApplicationData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  i32 setNoteApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
	fmt.Fprintln(os.Stderr, "  i32 unsetNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  string getNoteContent(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getNoteSearchText(string authenticationToken, Guid guid, bool noteOnly, bool tokenizeForIndexing)")
	fmt.Fprintln(os.Stderr, "  string getResourceSearchText(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "   getNoteTagNames(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Note createNote(string authenticationToken, Note note)")
	fmt.Fprintln(os.Stderr, "  Note updateNote(string authenticationToken, Note note)")
	fmt.Fprintln(os.Stderr, "  i32 deleteNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  i32 expungeNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  i32 expungeNotes(string authenticationToken,  noteGuids)")
	fmt.Fprintln(os.Stderr, "  i32 expungeInactiveNotes(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  Note copyNote(string authenticationToken, Guid noteGuid, Guid toNotebookGuid)")
	fmt.Fprintln(os.Stderr, "   listNoteVersions(string authenticationToken, Guid noteGuid)")
	fmt.Fprintln(os.Stderr, "  Note getNoteVersion(string authenticationToken, Guid noteGuid, i32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
	fmt.Fprintln(os.Stderr, "  Resource getResource(string authenticationToken, Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData)")
	fmt.Fprintln(os.Stderr, "  LazyMap getResourceApplicationData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  i32 setResourceApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
	fmt.Fprintln(os.Stderr, "  i32 unsetResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
	fmt.Fprintln(os.Stderr, "  i32 updateResource(string authenticationToken, Resource resource)")
	fmt.Fprintln(os.Stderr, "  string getResourceData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Resource getResourceByHash(string authenticationToken, Guid noteGuid, string contentHash, bool withData, bool withRecognition, bool withAlternateData)")
	fmt.Fprintln(os.Stderr, "  string getResourceRecognition(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  string getResourceAlternateData(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  ResourceAttributes getResourceAttributes(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  Notebook getPublicNotebook(UserID userId, string publicUri)")
	fmt.Fprintln(os.Stderr, "  SharedNotebook createSharedNotebook(string authenticationToken, SharedNotebook sharedNotebook)")
	fmt.Fprintln(os.Stderr, "  i32 updateSharedNotebook(string authenticationToken, SharedNotebook sharedNotebook)")
	fmt.Fprintln(os.Stderr, "  i32 setSharedNotebookRecipientSettings(string authenticationToken, i64 sharedNotebookId, SharedNotebookRecipientSettings recipientSettings)")
	fmt.Fprintln(os.Stderr, "  i32 sendMessageToSharedNotebookMembers(string authenticationToken, Guid notebookGuid, string messageText,  recipients)")
	fmt.Fprintln(os.Stderr, "   listSharedNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  i32 expungeSharedNotebooks(string authenticationToken,  sharedNotebookIds)")
	fmt.Fprintln(os.Stderr, "  LinkedNotebook createLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
	fmt.Fprintln(os.Stderr, "  i32 updateLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
	fmt.Fprintln(os.Stderr, "   listLinkedNotebooks(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  i32 expungeLinkedNotebook(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNotebook(string shareKey, string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  SharedNotebook getSharedNotebookByAuth(string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  void emailNote(string authenticationToken, NoteEmailParameters parameters)")
	fmt.Fprintln(os.Stderr, "  string shareNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  void stopSharingNote(string authenticationToken, Guid guid)")
	fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNote(string guid, string noteKey, string authenticationToken)")
	fmt.Fprintln(os.Stderr, "  RelatedResult findRelated(string authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := NoteStore.NewNoteStoreClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getSyncState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSyncState requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSyncState(value0))
		fmt.Print("\n")
		break
	case "getSyncStateWithMetrics":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSyncStateWithMetrics requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg344 := flag.Arg(2)
		mbTrans345 := thrift.NewTMemoryBufferLen(len(arg344))
		defer mbTrans345.Close()
		_, err346 := mbTrans345.WriteString(arg344)
		if err346 != nil {
			Usage()
			return
		}
		factory347 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt348 := factory347.GetProtocol(mbTrans345)
		argvalue1 := NoteStore.NewClientUsageMetrics()
		err349 := argvalue1.Read(jsProt348)
		if err349 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetSyncStateWithMetrics(value0, value1))
		fmt.Print("\n")
		break
	case "getSyncChunk":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetSyncChunk requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err351 := (strconv.Atoi(flag.Arg(2)))
		if err351 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err352 := (strconv.Atoi(flag.Arg(3)))
		if err352 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.GetSyncChunk(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getFilteredSyncChunk":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetFilteredSyncChunk requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err355 := (strconv.Atoi(flag.Arg(2)))
		if err355 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err356 := (strconv.Atoi(flag.Arg(3)))
		if err356 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		arg357 := flag.Arg(4)
		mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
		defer mbTrans358.Close()
		_, err359 := mbTrans358.WriteString(arg357)
		if err359 != nil {
			Usage()
			return
		}
		factory360 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt361 := factory360.GetProtocol(mbTrans358)
		argvalue3 := NoteStore.NewSyncChunkFilter()
		err362 := argvalue3.Read(jsProt361)
		if err362 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.GetFilteredSyncChunk(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getLinkedNotebookSyncState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg364 := flag.Arg(2)
		mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
		defer mbTrans365.Close()
		_, err366 := mbTrans365.WriteString(arg364)
		if err366 != nil {
			Usage()
			return
		}
		factory367 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt368 := factory367.GetProtocol(mbTrans365)
		argvalue1 := NoteStore.NewLinkedNotebook()
		err369 := argvalue1.Read(jsProt368)
		if err369 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetLinkedNotebookSyncState(value0, value1))
		fmt.Print("\n")
		break
	case "getLinkedNotebookSyncChunk":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncChunk requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg371 := flag.Arg(2)
		mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
		defer mbTrans372.Close()
		_, err373 := mbTrans372.WriteString(arg371)
		if err373 != nil {
			Usage()
			return
		}
		factory374 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt375 := factory374.GetProtocol(mbTrans372)
		argvalue1 := NoteStore.NewLinkedNotebook()
		err376 := argvalue1.Read(jsProt375)
		if err376 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err377 := (strconv.Atoi(flag.Arg(3)))
		if err377 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err378 := (strconv.Atoi(flag.Arg(4)))
		if err378 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		fmt.Print(client.GetLinkedNotebookSyncChunk(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "listNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListNotebooks(value0))
		fmt.Print("\n")
		break
	case "getNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "getDefaultNotebook":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDefaultNotebook requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDefaultNotebook(value0))
		fmt.Print("\n")
		break
	case "createNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg385 := flag.Arg(2)
		mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
		defer mbTrans386.Close()
		_, err387 := mbTrans386.WriteString(arg385)
		if err387 != nil {
			Usage()
			return
		}
		factory388 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt389 := factory388.GetProtocol(mbTrans386)
		argvalue1 := NoteStore.NewNotebook()
		err390 := argvalue1.Read(jsProt389)
		if err390 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "updateNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg392 := flag.Arg(2)
		mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
		defer mbTrans393.Close()
		_, err394 := mbTrans393.WriteString(arg392)
		if err394 != nil {
			Usage()
			return
		}
		factory395 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt396 := factory395.GetProtocol(mbTrans393)
		argvalue1 := NoteStore.NewNotebook()
		err397 := argvalue1.Read(jsProt396)
		if err397 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "expungeNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ExpungeNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "listTags":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListTags(value0))
		fmt.Print("\n")
		break
	case "listTagsByNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListTagsByNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ListTagsByNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "getTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetTag(value0, value1))
		fmt.Print("\n")
		break
	case "createTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg406 := flag.Arg(2)
		mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
		defer mbTrans407.Close()
		_, err408 := mbTrans407.WriteString(arg406)
		if err408 != nil {
			Usage()
			return
		}
		factory409 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt410 := factory409.GetProtocol(mbTrans407)
		argvalue1 := NoteStore.NewTag()
		err411 := argvalue1.Read(jsProt410)
		if err411 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTag(value0, value1))
		fmt.Print("\n")
		break
	case "updateTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg413 := flag.Arg(2)
		mbTrans414 := thrift.NewTMemoryBufferLen(len(arg413))
		defer mbTrans414.Close()
		_, err415 := mbTrans414.WriteString(arg413)
		if err415 != nil {
			Usage()
			return
		}
		factory416 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt417 := factory416.GetProtocol(mbTrans414)
		argvalue1 := NoteStore.NewTag()
		err418 := argvalue1.Read(jsProt417)
		if err418 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateTag(value0, value1))
		fmt.Print("\n")
		break
	case "untagAll":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UntagAll requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.UntagAll(value0, value1))
		fmt.Print("\n")
		break
	case "expungeTag":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeTag requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ExpungeTag(value0, value1))
		fmt.Print("\n")
		break
	case "listSearches":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSearches requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSearches(value0))
		fmt.Print("\n")
		break
	case "getSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetSearch(value0, value1))
		fmt.Print("\n")
		break
	case "createSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg427 := flag.Arg(2)
		mbTrans428 := thrift.NewTMemoryBufferLen(len(arg427))
		defer mbTrans428.Close()
		_, err429 := mbTrans428.WriteString(arg427)
		if err429 != nil {
			Usage()
			return
		}
		factory430 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt431 := factory430.GetProtocol(mbTrans428)
		argvalue1 := NoteStore.NewSavedSearch()
		err432 := argvalue1.Read(jsProt431)
		if err432 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateSearch(value0, value1))
		fmt.Print("\n")
		break
	case "updateSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg434 := flag.Arg(2)
		mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
		defer mbTrans435.Close()
		_, err436 := mbTrans435.WriteString(arg434)
		if err436 != nil {
			Usage()
			return
		}
		factory437 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt438 := factory437.GetProtocol(mbTrans435)
		argvalue1 := NoteStore.NewSavedSearch()
		err439 := argvalue1.Read(jsProt438)
		if err439 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSearch(value0, value1))
		fmt.Print("\n")
		break
	case "expungeSearch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeSearch requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ExpungeSearch(value0, value1))
		fmt.Print("\n")
		break
	case "findNotes":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "FindNotes requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg443 := flag.Arg(2)
		mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
		defer mbTrans444.Close()
		_, err445 := mbTrans444.WriteString(arg443)
		if err445 != nil {
			Usage()
			return
		}
		factory446 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt447 := factory446.GetProtocol(mbTrans444)
		argvalue1 := NoteStore.NewNoteFilter()
		err448 := argvalue1.Read(jsProt447)
		if err448 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err449 := (strconv.Atoi(flag.Arg(3)))
		if err449 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err450 := (strconv.Atoi(flag.Arg(4)))
		if err450 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.FindNotes(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "findNoteOffset":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindNoteOffset requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg452 := flag.Arg(2)
		mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
		defer mbTrans453.Close()
		_, err454 := mbTrans453.WriteString(arg452)
		if err454 != nil {
			Usage()
			return
		}
		factory455 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt456 := factory455.GetProtocol(mbTrans453)
		argvalue1 := NoteStore.NewNoteFilter()
		err457 := argvalue1.Read(jsProt456)
		if err457 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := NoteStore.Guid(argvalue2)
		fmt.Print(client.FindNoteOffset(value0, value1, value2))
		fmt.Print("\n")
		break
	case "findNotesMetadata":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "FindNotesMetadata requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg460 := flag.Arg(2)
		mbTrans461 := thrift.NewTMemoryBufferLen(len(arg460))
		defer mbTrans461.Close()
		_, err462 := mbTrans461.WriteString(arg460)
		if err462 != nil {
			Usage()
			return
		}
		factory463 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt464 := factory463.GetProtocol(mbTrans461)
		argvalue1 := NoteStore.NewNoteFilter()
		err465 := argvalue1.Read(jsProt464)
		if err465 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err466 := (strconv.Atoi(flag.Arg(3)))
		if err466 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err467 := (strconv.Atoi(flag.Arg(4)))
		if err467 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg468 := flag.Arg(5)
		mbTrans469 := thrift.NewTMemoryBufferLen(len(arg468))
		defer mbTrans469.Close()
		_, err470 := mbTrans469.WriteString(arg468)
		if err470 != nil {
			Usage()
			return
		}
		factory471 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt472 := factory471.GetProtocol(mbTrans469)
		argvalue4 := NoteStore.NewNotesMetadataResultSpec()
		err473 := argvalue4.Read(jsProt472)
		if err473 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.FindNotesMetadata(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "findNoteCounts":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindNoteCounts requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg475 := flag.Arg(2)
		mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
		defer mbTrans476.Close()
		_, err477 := mbTrans476.WriteString(arg475)
		if err477 != nil {
			Usage()
			return
		}
		factory478 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt479 := factory478.GetProtocol(mbTrans476)
		argvalue1 := NoteStore.NewNoteFilter()
		err480 := argvalue1.Read(jsProt479)
		if err480 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.FindNoteCounts(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getNote":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetNote requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetNote(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getNoteApplicationData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNoteApplicationData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetNoteApplicationData(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNoteApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNoteApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "setNoteApplicationDataEntry":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SetNoteApplicationDataEntry requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.SetNoteApplicationDataEntry(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "unsetNoteApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UnsetNoteApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UnsetNoteApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getNoteContent":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNoteContent requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetNoteContent(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteSearchText":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetNoteSearchText requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.GetNoteSearchText(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getResourceSearchText":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceSearchText requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetResourceSearchText(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteTagNames":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNoteTagNames requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetNoteTagNames(value0, value1))
		fmt.Print("\n")
		break
	case "createNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg511 := flag.Arg(2)
		mbTrans512 := thrift.NewTMemoryBufferLen(len(arg511))
		defer mbTrans512.Close()
		_, err513 := mbTrans512.WriteString(arg511)
		if err513 != nil {
			Usage()
			return
		}
		factory514 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt515 := factory514.GetProtocol(mbTrans512)
		argvalue1 := NoteStore.NewNote()
		err516 := argvalue1.Read(jsProt515)
		if err516 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateNote(value0, value1))
		fmt.Print("\n")
		break
	case "updateNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg518 := flag.Arg(2)
		mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
		defer mbTrans519.Close()
		_, err520 := mbTrans519.WriteString(arg518)
		if err520 != nil {
			Usage()
			return
		}
		factory521 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt522 := factory521.GetProtocol(mbTrans519)
		argvalue1 := NoteStore.NewNote()
		err523 := argvalue1.Read(jsProt522)
		if err523 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateNote(value0, value1))
		fmt.Print("\n")
		break
	case "deleteNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.DeleteNote(value0, value1))
		fmt.Print("\n")
		break
	case "expungeNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ExpungeNote(value0, value1))
		fmt.Print("\n")
		break
	case "expungeNotes":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeNotes requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg529 := flag.Arg(2)
		mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
		defer mbTrans530.Close()
		_, err531 := mbTrans530.WriteString(arg529)
		if err531 != nil {
			Usage()
			return
		}
		factory532 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt533 := factory532.GetProtocol(mbTrans530)
		containerStruct1 := NoteStore.NewExpungeNotesArgs()
		err534 := containerStruct1.ReadField2(jsProt533)
		if err534 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.NoteGuids
		value1 := argvalue1
		fmt.Print(client.ExpungeNotes(value0, value1))
		fmt.Print("\n")
		break
	case "expungeInactiveNotes":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ExpungeInactiveNotes requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ExpungeInactiveNotes(value0))
		fmt.Print("\n")
		break
	case "copyNote":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CopyNote requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := NoteStore.Guid(argvalue2)
		fmt.Print(client.CopyNote(value0, value1, value2))
		fmt.Print("\n")
		break
	case "listNoteVersions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListNoteVersions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ListNoteVersions(value0, value1))
		fmt.Print("\n")
		break
	case "getNoteVersion":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetNoteVersion requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		tmp2, err543 := (strconv.Atoi(flag.Arg(3)))
		if err543 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetNoteVersion(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getResource":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetResource requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetResource(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getResourceApplicationData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceApplicationData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetResourceApplicationData(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetResourceApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetResourceApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "setResourceApplicationDataEntry":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SetResourceApplicationDataEntry requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.SetResourceApplicationDataEntry(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "unsetResourceApplicationDataEntry":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UnsetResourceApplicationDataEntry requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UnsetResourceApplicationDataEntry(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateResource":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResource requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg566 := flag.Arg(2)
		mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
		defer mbTrans567.Close()
		_, err568 := mbTrans567.WriteString(arg566)
		if err568 != nil {
			Usage()
			return
		}
		factory569 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt570 := factory569.GetProtocol(mbTrans567)
		argvalue1 := NoteStore.NewResource()
		err571 := argvalue1.Read(jsProt570)
		if err571 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateResource(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetResourceData(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceByHash":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetResourceByHash requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5) == "true"
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GetResourceByHash(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getResourceRecognition":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceRecognition requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetResourceRecognition(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceAlternateData":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceAlternateData requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetResourceAlternateData(value0, value1))
		fmt.Print("\n")
		break
	case "getResourceAttributes":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetResourceAttributes requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.GetResourceAttributes(value0, value1))
		fmt.Print("\n")
		break
	case "getPublicNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetPublicNotebook requires 2 args")
			flag.Usage()
		}
		tmp0, err586 := (strconv.Atoi(flag.Arg(1)))
		if err586 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := NoteStore.UserID(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetPublicNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "createSharedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateSharedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg589 := flag.Arg(2)
		mbTrans590 := thrift.NewTMemoryBufferLen(len(arg589))
		defer mbTrans590.Close()
		_, err591 := mbTrans590.WriteString(arg589)
		if err591 != nil {
			Usage()
			return
		}
		factory592 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt593 := factory592.GetProtocol(mbTrans590)
		argvalue1 := NoteStore.NewSharedNotebook()
		err594 := argvalue1.Read(jsProt593)
		if err594 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateSharedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "updateSharedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateSharedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg596 := flag.Arg(2)
		mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
		defer mbTrans597.Close()
		_, err598 := mbTrans597.WriteString(arg596)
		if err598 != nil {
			Usage()
			return
		}
		factory599 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt600 := factory599.GetProtocol(mbTrans597)
		argvalue1 := NoteStore.NewSharedNotebook()
		err601 := argvalue1.Read(jsProt600)
		if err601 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateSharedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "setSharedNotebookRecipientSettings":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetSharedNotebookRecipientSettings requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err603 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err603 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg604 := flag.Arg(3)
		mbTrans605 := thrift.NewTMemoryBufferLen(len(arg604))
		defer mbTrans605.Close()
		_, err606 := mbTrans605.WriteString(arg604)
		if err606 != nil {
			Usage()
			return
		}
		factory607 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt608 := factory607.GetProtocol(mbTrans605)
		argvalue2 := NoteStore.NewSharedNotebookRecipientSettings()
		err609 := argvalue2.Read(jsProt608)
		if err609 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.SetSharedNotebookRecipientSettings(value0, value1, value2))
		fmt.Print("\n")
		break
	case "sendMessageToSharedNotebookMembers":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SendMessageToSharedNotebookMembers requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg613 := flag.Arg(4)
		mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
		defer mbTrans614.Close()
		_, err615 := mbTrans614.WriteString(arg613)
		if err615 != nil {
			Usage()
			return
		}
		factory616 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt617 := factory616.GetProtocol(mbTrans614)
		containerStruct3 := NoteStore.NewSendMessageToSharedNotebookMembersArgs()
		err618 := containerStruct3.ReadField4(jsProt617)
		if err618 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Recipients
		value3 := argvalue3
		fmt.Print(client.SendMessageToSharedNotebookMembers(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "listSharedNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListSharedNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListSharedNotebooks(value0))
		fmt.Print("\n")
		break
	case "expungeSharedNotebooks":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeSharedNotebooks requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg621 := flag.Arg(2)
		mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
		defer mbTrans622.Close()
		_, err623 := mbTrans622.WriteString(arg621)
		if err623 != nil {
			Usage()
			return
		}
		factory624 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt625 := factory624.GetProtocol(mbTrans622)
		containerStruct1 := NoteStore.NewExpungeSharedNotebooksArgs()
		err626 := containerStruct1.ReadField2(jsProt625)
		if err626 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.SharedNotebookIds
		value1 := argvalue1
		fmt.Print(client.ExpungeSharedNotebooks(value0, value1))
		fmt.Print("\n")
		break
	case "createLinkedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateLinkedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg628 := flag.Arg(2)
		mbTrans629 := thrift.NewTMemoryBufferLen(len(arg628))
		defer mbTrans629.Close()
		_, err630 := mbTrans629.WriteString(arg628)
		if err630 != nil {
			Usage()
			return
		}
		factory631 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt632 := factory631.GetProtocol(mbTrans629)
		argvalue1 := NoteStore.NewLinkedNotebook()
		err633 := argvalue1.Read(jsProt632)
		if err633 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateLinkedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "updateLinkedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateLinkedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg635 := flag.Arg(2)
		mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
		defer mbTrans636.Close()
		_, err637 := mbTrans636.WriteString(arg635)
		if err637 != nil {
			Usage()
			return
		}
		factory638 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt639 := factory638.GetProtocol(mbTrans636)
		argvalue1 := NoteStore.NewLinkedNotebook()
		err640 := argvalue1.Read(jsProt639)
		if err640 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateLinkedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "listLinkedNotebooks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListLinkedNotebooks requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListLinkedNotebooks(value0))
		fmt.Print("\n")
		break
	case "expungeLinkedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExpungeLinkedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ExpungeLinkedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "authenticateToSharedNotebook":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AuthenticateToSharedNotebook requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AuthenticateToSharedNotebook(value0, value1))
		fmt.Print("\n")
		break
	case "getSharedNotebookByAuth":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSharedNotebookByAuth requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSharedNotebookByAuth(value0))
		fmt.Print("\n")
		break
	case "emailNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "EmailNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg648 := flag.Arg(2)
		mbTrans649 := thrift.NewTMemoryBufferLen(len(arg648))
		defer mbTrans649.Close()
		_, err650 := mbTrans649.WriteString(arg648)
		if err650 != nil {
			Usage()
			return
		}
		factory651 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt652 := factory651.GetProtocol(mbTrans649)
		argvalue1 := NoteStore.NewNoteEmailParameters()
		err653 := argvalue1.Read(jsProt652)
		if err653 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.EmailNote(value0, value1))
		fmt.Print("\n")
		break
	case "shareNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ShareNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.ShareNote(value0, value1))
		fmt.Print("\n")
		break
	case "stopSharingNote":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StopSharingNote requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := NoteStore.Guid(argvalue1)
		fmt.Print(client.StopSharingNote(value0, value1))
		fmt.Print("\n")
		break
	case "authenticateToSharedNote":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AuthenticateToSharedNote requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AuthenticateToSharedNote(value0, value1, value2))
		fmt.Print("\n")
		break
	case "findRelated":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "FindRelated requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg662 := flag.Arg(2)
		mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
		defer mbTrans663.Close()
		_, err664 := mbTrans663.WriteString(arg662)
		if err664 != nil {
			Usage()
			return
		}
		factory665 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt666 := factory665.GetProtocol(mbTrans663)
		argvalue1 := NoteStore.NewRelatedQuery()
		err667 := argvalue1.Read(jsProt666)
		if err667 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg668 := flag.Arg(3)
		mbTrans669 := thrift.NewTMemoryBufferLen(len(arg668))
		defer mbTrans669.Close()
		_, err670 := mbTrans669.WriteString(arg668)
		if err670 != nil {
			Usage()
			return
		}
		factory671 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt672 := factory671.GetProtocol(mbTrans669)
		argvalue2 := NoteStore.NewRelatedResultSpec()
		err673 := argvalue2.Read(jsProt672)
		if err673 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.FindRelated(value0, value1, value2))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
