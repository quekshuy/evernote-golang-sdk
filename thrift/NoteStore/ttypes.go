// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package NoteStore

import (
	"Errors"
	"Limits"
	"Types"
	"UserStore"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = UserStore.GoUnusedProtection__
var _ = Types.GoUnusedProtection__
var _ = Errors.GoUnusedProtection__
var _ = Limits.GoUnusedProtection__
var GoUnusedProtection__ int

type SyncState struct {
	CurrentTime    Types.Timestamp `thrift:"currentTime,1,required"`
	FullSyncBefore Types.Timestamp `thrift:"fullSyncBefore,2,required"`
	UpdateCount    int32           `thrift:"updateCount,3,required"`
	Uploaded       int64           `thrift:"uploaded,4"`
}

func NewSyncState() *SyncState {
	return &SyncState{}
}

func (p *SyncState) IsSetUploaded() bool {
	return p.Uploaded != 0
}

func (p *SyncState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncState) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.CurrentTime = Types.Timestamp(v)
	}
	return nil
}

func (p *SyncState) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.FullSyncBefore = Types.Timestamp(v)
	}
	return nil
}

func (p *SyncState) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *SyncState) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Uploaded = v
	}
	return nil
}

func (p *SyncState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncState"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:currentTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return fmt.Errorf("%T.currentTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:currentTime: %s", p, err)
	}
	return err
}

func (p *SyncState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncBefore", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:fullSyncBefore: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.FullSyncBefore)); err != nil {
		return fmt.Errorf("%T.fullSyncBefore (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:fullSyncBefore: %s", p, err)
	}
	return err
}

func (p *SyncState) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:updateCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
		return fmt.Errorf("%T.updateCount (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:updateCount: %s", p, err)
	}
	return err
}

func (p *SyncState) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploaded() {
		if err := oprot.WriteFieldBegin("uploaded", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:uploaded: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Uploaded)); err != nil {
			return fmt.Errorf("%T.uploaded (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:uploaded: %s", p, err)
		}
	}
	return err
}

func (p *SyncState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncState(%+v)", *p)
}

type SyncChunk struct {
	CurrentTime             Types.Timestamp         `thrift:"currentTime,1,required"`
	ChunkHighUSN            int32                   `thrift:"chunkHighUSN,2"`
	UpdateCount             int32                   `thrift:"updateCount,3,required"`
	Notes                   []*Types.Note           `thrift:"notes,4"`
	Notebooks               []*Types.Notebook       `thrift:"notebooks,5"`
	Tags                    []*Types.Tag            `thrift:"tags,6"`
	Searches                []*Types.SavedSearch    `thrift:"searches,7"`
	Resources               []*Types.Resource       `thrift:"resources,8"`
	ExpungedNotes           []Types.Guid            `thrift:"expungedNotes,9"`
	ExpungedNotebooks       []Types.Guid            `thrift:"expungedNotebooks,10"`
	ExpungedTags            []Types.Guid            `thrift:"expungedTags,11"`
	ExpungedSearches        []Types.Guid            `thrift:"expungedSearches,12"`
	LinkedNotebooks         []*Types.LinkedNotebook `thrift:"linkedNotebooks,13"`
	ExpungedLinkedNotebooks []Types.Guid            `thrift:"expungedLinkedNotebooks,14"`
}

func NewSyncChunk() *SyncChunk {
	return &SyncChunk{}
}

func (p *SyncChunk) IsSetChunkHighUSN() bool {
	return p.ChunkHighUSN != 0
}

func (p *SyncChunk) IsSetNotes() bool {
	return p.Notes != nil && len(p.Notes) > 0
}

func (p *SyncChunk) IsSetNotebooks() bool {
	return p.Notebooks != nil && len(p.Notebooks) > 0
}

func (p *SyncChunk) IsSetTags() bool {
	return p.Tags != nil && len(p.Tags) > 0
}

func (p *SyncChunk) IsSetSearches() bool {
	return p.Searches != nil && len(p.Searches) > 0
}

func (p *SyncChunk) IsSetResources() bool {
	return p.Resources != nil && len(p.Resources) > 0
}

func (p *SyncChunk) IsSetExpungedNotes() bool {
	return p.ExpungedNotes != nil && len(p.ExpungedNotes) > 0
}

func (p *SyncChunk) IsSetExpungedNotebooks() bool {
	return p.ExpungedNotebooks != nil && len(p.ExpungedNotebooks) > 0
}

func (p *SyncChunk) IsSetExpungedTags() bool {
	return p.ExpungedTags != nil && len(p.ExpungedTags) > 0
}

func (p *SyncChunk) IsSetExpungedSearches() bool {
	return p.ExpungedSearches != nil && len(p.ExpungedSearches) > 0
}

func (p *SyncChunk) IsSetLinkedNotebooks() bool {
	return p.LinkedNotebooks != nil && len(p.LinkedNotebooks) > 0
}

func (p *SyncChunk) IsSetExpungedLinkedNotebooks() bool {
	return p.ExpungedLinkedNotebooks != nil && len(p.ExpungedLinkedNotebooks) > 0
}

func (p *SyncChunk) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncChunk) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.CurrentTime = Types.Timestamp(v)
	}
	return nil
}

func (p *SyncChunk) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ChunkHighUSN = v
	}
	return nil
}

func (p *SyncChunk) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *SyncChunk) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*Types.Note, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := Types.NewNote()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Notes = append(p.Notes, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notebooks = make([]*Types.Notebook, 0, size)
	for i := 0; i < size; i++ {
		_elem1 := Types.NewNotebook()
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1)
		}
		p.Notebooks = append(p.Notebooks, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Tags = make([]*Types.Tag, 0, size)
	for i := 0; i < size; i++ {
		_elem2 := Types.NewTag()
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2)
		}
		p.Tags = append(p.Tags, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Searches = make([]*Types.SavedSearch, 0, size)
	for i := 0; i < size; i++ {
		_elem3 := Types.NewSavedSearch()
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3)
		}
		p.Searches = append(p.Searches, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Resources = make([]*Types.Resource, 0, size)
	for i := 0; i < size; i++ {
		_elem4 := Types.NewResource()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4)
		}
		p.Resources = append(p.Resources, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedNotes = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem5 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem5 = Types.Guid(v)
		}
		p.ExpungedNotes = append(p.ExpungedNotes, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedNotebooks = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem6 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem6 = Types.Guid(v)
		}
		p.ExpungedNotebooks = append(p.ExpungedNotebooks, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedTags = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem7 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem7 = Types.Guid(v)
		}
		p.ExpungedTags = append(p.ExpungedTags, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedSearches = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem8 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem8 = Types.Guid(v)
		}
		p.ExpungedSearches = append(p.ExpungedSearches, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.LinkedNotebooks = make([]*Types.LinkedNotebook, 0, size)
	for i := 0; i < size; i++ {
		_elem9 := Types.NewLinkedNotebook()
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9)
		}
		p.LinkedNotebooks = append(p.LinkedNotebooks, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ExpungedLinkedNotebooks = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem10 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem10 = Types.Guid(v)
		}
		p.ExpungedLinkedNotebooks = append(p.ExpungedLinkedNotebooks, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *SyncChunk) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncChunk"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncChunk) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:currentTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return fmt.Errorf("%T.currentTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:currentTime: %s", p, err)
	}
	return err
}

func (p *SyncChunk) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkHighUSN() {
		if err := oprot.WriteFieldBegin("chunkHighUSN", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:chunkHighUSN: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ChunkHighUSN)); err != nil {
			return fmt.Errorf("%T.chunkHighUSN (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:chunkHighUSN: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunk) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:updateCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
		return fmt.Errorf("%T.updateCount (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:updateCount: %s", p, err)
	}
	return err
}

func (p *SyncChunk) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if p.IsSetNotes() {
			if err := oprot.WriteFieldBegin("notes", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:notes: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notes {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:notes: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Notebooks != nil {
		if p.IsSetNotebooks() {
			if err := oprot.WriteFieldBegin("notebooks", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:notebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:notebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Tags != nil {
		if p.IsSetTags() {
			if err := oprot.WriteFieldBegin("tags", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:tags: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Tags {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:tags: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Searches != nil {
		if p.IsSetSearches() {
			if err := oprot.WriteFieldBegin("searches", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:searches: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Searches)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Searches {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:searches: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField8(oprot thrift.TProtocol) (err error) {
	if p.Resources != nil {
		if p.IsSetResources() {
			if err := oprot.WriteFieldBegin("resources", thrift.LIST, 8); err != nil {
				return fmt.Errorf("%T write field begin error 8:resources: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Resources {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 8:resources: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField9(oprot thrift.TProtocol) (err error) {
	if p.ExpungedNotes != nil {
		if p.IsSetExpungedNotes() {
			if err := oprot.WriteFieldBegin("expungedNotes", thrift.LIST, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:expungedNotes: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedNotes)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedNotes {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:expungedNotes: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField10(oprot thrift.TProtocol) (err error) {
	if p.ExpungedNotebooks != nil {
		if p.IsSetExpungedNotebooks() {
			if err := oprot.WriteFieldBegin("expungedNotebooks", thrift.LIST, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:expungedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedNotebooks {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:expungedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField11(oprot thrift.TProtocol) (err error) {
	if p.ExpungedTags != nil {
		if p.IsSetExpungedTags() {
			if err := oprot.WriteFieldBegin("expungedTags", thrift.LIST, 11); err != nil {
				return fmt.Errorf("%T write field begin error 11:expungedTags: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedTags)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedTags {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 11:expungedTags: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField12(oprot thrift.TProtocol) (err error) {
	if p.ExpungedSearches != nil {
		if p.IsSetExpungedSearches() {
			if err := oprot.WriteFieldBegin("expungedSearches", thrift.LIST, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:expungedSearches: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedSearches)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedSearches {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:expungedSearches: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField13(oprot thrift.TProtocol) (err error) {
	if p.LinkedNotebooks != nil {
		if p.IsSetLinkedNotebooks() {
			if err := oprot.WriteFieldBegin("linkedNotebooks", thrift.LIST, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:linkedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.LinkedNotebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:linkedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) writeField14(oprot thrift.TProtocol) (err error) {
	if p.ExpungedLinkedNotebooks != nil {
		if p.IsSetExpungedLinkedNotebooks() {
			if err := oprot.WriteFieldBegin("expungedLinkedNotebooks", thrift.LIST, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:expungedLinkedNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ExpungedLinkedNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ExpungedLinkedNotebooks {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:expungedLinkedNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *SyncChunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncChunk(%+v)", *p)
}

type SyncChunkFilter struct {
	IncludeNotes                              bool   `thrift:"includeNotes,1"`
	IncludeNoteResources                      bool   `thrift:"includeNoteResources,2"`
	IncludeNoteAttributes                     bool   `thrift:"includeNoteAttributes,3"`
	IncludeNotebooks                          bool   `thrift:"includeNotebooks,4"`
	IncludeTags                               bool   `thrift:"includeTags,5"`
	IncludeSearches                           bool   `thrift:"includeSearches,6"`
	IncludeResources                          bool   `thrift:"includeResources,7"`
	IncludeLinkedNotebooks                    bool   `thrift:"includeLinkedNotebooks,8"`
	IncludeExpunged                           bool   `thrift:"includeExpunged,9"`
	IncludeNoteApplicationDataFullMap         bool   `thrift:"includeNoteApplicationDataFullMap,10"`
	RequireNoteContentClass                   string `thrift:"requireNoteContentClass,11"`
	IncludeResourceApplicationDataFullMap     bool   `thrift:"includeResourceApplicationDataFullMap,12"`
	IncludeNoteResourceApplicationDataFullMap bool   `thrift:"includeNoteResourceApplicationDataFullMap,13"`
}

func NewSyncChunkFilter() *SyncChunkFilter {
	return &SyncChunkFilter{}
}

func (p *SyncChunkFilter) IsSetIncludeNotes() bool {
	return p.IncludeNotes != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteResources() bool {
	return p.IncludeNoteResources != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteAttributes() bool {
	return p.IncludeNoteAttributes != false
}

func (p *SyncChunkFilter) IsSetIncludeNotebooks() bool {
	return p.IncludeNotebooks != false
}

func (p *SyncChunkFilter) IsSetIncludeTags() bool {
	return p.IncludeTags != false
}

func (p *SyncChunkFilter) IsSetIncludeSearches() bool {
	return p.IncludeSearches != false
}

func (p *SyncChunkFilter) IsSetIncludeResources() bool {
	return p.IncludeResources != false
}

func (p *SyncChunkFilter) IsSetIncludeLinkedNotebooks() bool {
	return p.IncludeLinkedNotebooks != false
}

func (p *SyncChunkFilter) IsSetIncludeExpunged() bool {
	return p.IncludeExpunged != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteApplicationDataFullMap() bool {
	return p.IncludeNoteApplicationDataFullMap != false
}

func (p *SyncChunkFilter) IsSetIncludeResourceApplicationDataFullMap() bool {
	return p.IncludeResourceApplicationDataFullMap != false
}

func (p *SyncChunkFilter) IsSetIncludeNoteResourceApplicationDataFullMap() bool {
	return p.IncludeNoteResourceApplicationDataFullMap != false
}

func (p *SyncChunkFilter) IsSetRequireNoteContentClass() bool {
	return p.RequireNoteContentClass != ""
}

func (p *SyncChunkFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SyncChunkFilter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IncludeNotes = v
	}
	return nil
}

func (p *SyncChunkFilter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IncludeNoteResources = v
	}
	return nil
}

func (p *SyncChunkFilter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IncludeNoteAttributes = v
	}
	return nil
}

func (p *SyncChunkFilter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IncludeNotebooks = v
	}
	return nil
}

func (p *SyncChunkFilter) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeTags = v
	}
	return nil
}

func (p *SyncChunkFilter) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IncludeSearches = v
	}
	return nil
}

func (p *SyncChunkFilter) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.IncludeResources = v
	}
	return nil
}

func (p *SyncChunkFilter) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.IncludeLinkedNotebooks = v
	}
	return nil
}

func (p *SyncChunkFilter) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.IncludeExpunged = v
	}
	return nil
}

func (p *SyncChunkFilter) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.IncludeNoteApplicationDataFullMap = v
	}
	return nil
}

func (p *SyncChunkFilter) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.IncludeResourceApplicationDataFullMap = v
	}
	return nil
}

func (p *SyncChunkFilter) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.IncludeNoteResourceApplicationDataFullMap = v
	}
	return nil
}

func (p *SyncChunkFilter) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.RequireNoteContentClass = v
	}
	return nil
}

func (p *SyncChunkFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SyncChunkFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SyncChunkFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotes() {
		if err := oprot.WriteFieldBegin("includeNotes", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:includeNotes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNotes)); err != nil {
			return fmt.Errorf("%T.includeNotes (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:includeNotes: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteResources() {
		if err := oprot.WriteFieldBegin("includeNoteResources", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:includeNoteResources: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteResources)); err != nil {
			return fmt.Errorf("%T.includeNoteResources (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:includeNoteResources: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteAttributes() {
		if err := oprot.WriteFieldBegin("includeNoteAttributes", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:includeNoteAttributes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteAttributes)); err != nil {
			return fmt.Errorf("%T.includeNoteAttributes (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:includeNoteAttributes: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotebooks() {
		if err := oprot.WriteFieldBegin("includeNotebooks", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:includeNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNotebooks)); err != nil {
			return fmt.Errorf("%T.includeNotebooks (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:includeNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTags() {
		if err := oprot.WriteFieldBegin("includeTags", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeTags: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeTags)); err != nil {
			return fmt.Errorf("%T.includeTags (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeTags: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeSearches() {
		if err := oprot.WriteFieldBegin("includeSearches", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:includeSearches: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeSearches)); err != nil {
			return fmt.Errorf("%T.includeSearches (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:includeSearches: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResources() {
		if err := oprot.WriteFieldBegin("includeResources", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:includeResources: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResources)); err != nil {
			return fmt.Errorf("%T.includeResources (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:includeResources: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includeLinkedNotebooks", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:includeLinkedNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeLinkedNotebooks)); err != nil {
			return fmt.Errorf("%T.includeLinkedNotebooks (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:includeLinkedNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeExpunged() {
		if err := oprot.WriteFieldBegin("includeExpunged", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:includeExpunged: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeExpunged)); err != nil {
			return fmt.Errorf("%T.includeExpunged (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:includeExpunged: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeNoteApplicationDataFullMap", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:includeNoteApplicationDataFullMap: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteApplicationDataFullMap)); err != nil {
			return fmt.Errorf("%T.includeNoteApplicationDataFullMap (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:includeNoteApplicationDataFullMap: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequireNoteContentClass() {
		if err := oprot.WriteFieldBegin("requireNoteContentClass", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:requireNoteContentClass: %s", p, err)
		}
		if err := oprot.WriteString(string(p.RequireNoteContentClass)); err != nil {
			return fmt.Errorf("%T.requireNoteContentClass (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:requireNoteContentClass: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeResourceApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeResourceApplicationDataFullMap", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:includeResourceApplicationDataFullMap: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeResourceApplicationDataFullMap)); err != nil {
			return fmt.Errorf("%T.includeResourceApplicationDataFullMap (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:includeResourceApplicationDataFullMap: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNoteResourceApplicationDataFullMap() {
		if err := oprot.WriteFieldBegin("includeNoteResourceApplicationDataFullMap", thrift.BOOL, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:includeNoteResourceApplicationDataFullMap: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNoteResourceApplicationDataFullMap)); err != nil {
			return fmt.Errorf("%T.includeNoteResourceApplicationDataFullMap (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:includeNoteResourceApplicationDataFullMap: %s", p, err)
		}
	}
	return err
}

func (p *SyncChunkFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncChunkFilter(%+v)", *p)
}

type NoteFilter struct {
	Order        int32        `thrift:"order,1"`
	Ascending    bool         `thrift:"ascending,2"`
	Words        string       `thrift:"words,3"`
	NotebookGuid Types.Guid   `thrift:"notebookGuid,4"`
	TagGuids     []Types.Guid `thrift:"tagGuids,5"`
	TimeZone     string       `thrift:"timeZone,6"`
	Inactive     bool         `thrift:"inactive,7"`
	Emphasized   string       `thrift:"emphasized,8"`
}

func NewNoteFilter() *NoteFilter {
	return &NoteFilter{}
}

func (p *NoteFilter) IsSetOrder() bool {
	return p.Order != 0
}

func (p *NoteFilter) IsSetAscending() bool {
	return p.Ascending != false
}

func (p *NoteFilter) IsSetWords() bool {
	return p.Words != ""
}

func (p *NoteFilter) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *NoteFilter) IsSetTagGuids() bool {
	return p.TagGuids != nil && len(p.TagGuids) > 0
}

func (p *NoteFilter) IsSetTimeZone() bool {
	return p.TimeZone != ""
}

func (p *NoteFilter) IsSetInactive() bool {
	return p.Inactive != false
}

func (p *NoteFilter) IsSetEmphasized() bool {
	return p.Emphasized != ""
}

func (p *NoteFilter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteFilter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Order = v
	}
	return nil
}

func (p *NoteFilter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Ascending = v
	}
	return nil
}

func (p *NoteFilter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Words = v
	}
	return nil
}

func (p *NoteFilter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NotebookGuid = Types.Guid(v)
	}
	return nil
}

func (p *NoteFilter) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TagGuids = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem11 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem11 = Types.Guid(v)
		}
		p.TagGuids = append(p.TagGuids, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteFilter) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.TimeZone = v
	}
	return nil
}

func (p *NoteFilter) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Inactive = v
	}
	return nil
}

func (p *NoteFilter) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Emphasized = v
	}
	return nil
}

func (p *NoteFilter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteFilter"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err := oprot.WriteFieldBegin("order", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:order: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Order)); err != nil {
			return fmt.Errorf("%T.order (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:order: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAscending() {
		if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ascending: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Ascending)); err != nil {
			return fmt.Errorf("%T.ascending (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ascending: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWords() {
		if err := oprot.WriteFieldBegin("words", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:words: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Words)); err != nil {
			return fmt.Errorf("%T.words (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:words: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField5(oprot thrift.TProtocol) (err error) {
	if p.TagGuids != nil {
		if p.IsSetTagGuids() {
			if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:tagGuids: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.TagGuids {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:tagGuids: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteFilter) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err := oprot.WriteFieldBegin("timeZone", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:timeZone: %s", p, err)
		}
		if err := oprot.WriteString(string(p.TimeZone)); err != nil {
			return fmt.Errorf("%T.timeZone (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:timeZone: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetInactive() {
		if err := oprot.WriteFieldBegin("inactive", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:inactive: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Inactive)); err != nil {
			return fmt.Errorf("%T.inactive (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:inactive: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmphasized() {
		if err := oprot.WriteFieldBegin("emphasized", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:emphasized: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Emphasized)); err != nil {
			return fmt.Errorf("%T.emphasized (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:emphasized: %s", p, err)
		}
	}
	return err
}

func (p *NoteFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteFilter(%+v)", *p)
}

type NoteList struct {
	StartIndex    int32         `thrift:"startIndex,1,required"`
	TotalNotes    int32         `thrift:"totalNotes,2,required"`
	Notes         []*Types.Note `thrift:"notes,3,required"`
	StoppedWords  []string      `thrift:"stoppedWords,4"`
	SearchedWords []string      `thrift:"searchedWords,5"`
	UpdateCount   int32         `thrift:"updateCount,6"`
}

func NewNoteList() *NoteList {
	return &NoteList{}
}

func (p *NoteList) IsSetStoppedWords() bool {
	return p.StoppedWords != nil && len(p.StoppedWords) > 0
}

func (p *NoteList) IsSetSearchedWords() bool {
	return p.SearchedWords != nil && len(p.SearchedWords) > 0
}

func (p *NoteList) IsSetUpdateCount() bool {
	return p.UpdateCount != 0
}

func (p *NoteList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *NoteList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TotalNotes = v
	}
	return nil
}

func (p *NoteList) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*Types.Note, 0, size)
	for i := 0; i < size; i++ {
		_elem12 := Types.NewNote()
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12)
		}
		p.Notes = append(p.Notes, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.StoppedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem13 = v
		}
		p.StoppedWords = append(p.StoppedWords, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteList) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SearchedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem14 = v
		}
		p.SearchedWords = append(p.SearchedWords, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *NoteList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:startIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return fmt.Errorf("%T.startIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:startIndex: %s", p, err)
	}
	return err
}

func (p *NoteList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNotes", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:totalNotes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalNotes)); err != nil {
		return fmt.Errorf("%T.totalNotes (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:totalNotes: %s", p, err)
	}
	return err
}

func (p *NoteList) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if err := oprot.WriteFieldBegin("notes", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Notes {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notes: %s", p, err)
		}
	}
	return err
}

func (p *NoteList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.StoppedWords != nil {
		if p.IsSetStoppedWords() {
			if err := oprot.WriteFieldBegin("stoppedWords", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:stoppedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.StoppedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.StoppedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:stoppedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteList) writeField5(oprot thrift.TProtocol) (err error) {
	if p.SearchedWords != nil {
		if p.IsSetSearchedWords() {
			if err := oprot.WriteFieldBegin("searchedWords", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:searchedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.SearchedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SearchedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:searchedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteList) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateCount() {
		if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:updateCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
			return fmt.Errorf("%T.updateCount (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:updateCount: %s", p, err)
		}
	}
	return err
}

func (p *NoteList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteList(%+v)", *p)
}

type NoteMetadata struct {
	Guid  Types.Guid `thrift:"guid,1,required"`
	Title string     `thrift:"title,2"`
	// unused field # 3
	// unused field # 4
	ContentLength int32           `thrift:"contentLength,5"`
	Created       Types.Timestamp `thrift:"created,6"`
	Updated       Types.Timestamp `thrift:"updated,7"`
	Deleted       Types.Timestamp `thrift:"deleted,8"`
	// unused field # 9
	UpdateSequenceNum int32        `thrift:"updateSequenceNum,10"`
	NotebookGuid      string       `thrift:"notebookGuid,11"`
	TagGuids          []Types.Guid `thrift:"tagGuids,12"`
	// unused field # 13
	Attributes *Types.NoteAttributes `thrift:"attributes,14"`
	// unused field # 15
	// unused field # 16
	// unused field # 17
	// unused field # 18
	// unused field # 19
	LargestResourceMime string `thrift:"largestResourceMime,20"`
	LargestResourceSize int32  `thrift:"largestResourceSize,21"`
}

func NewNoteMetadata() *NoteMetadata {
	return &NoteMetadata{}
}

func (p *NoteMetadata) IsSetTitle() bool {
	return p.Title != ""
}

func (p *NoteMetadata) IsSetContentLength() bool {
	return p.ContentLength != 0
}

func (p *NoteMetadata) IsSetCreated() bool {
	return p.Created != 0
}

func (p *NoteMetadata) IsSetUpdated() bool {
	return p.Updated != 0
}

func (p *NoteMetadata) IsSetDeleted() bool {
	return p.Deleted != 0
}

func (p *NoteMetadata) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != 0
}

func (p *NoteMetadata) IsSetNotebookGuid() bool {
	return p.NotebookGuid != ""
}

func (p *NoteMetadata) IsSetTagGuids() bool {
	return p.TagGuids != nil && len(p.TagGuids) > 0
}

func (p *NoteMetadata) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *NoteMetadata) IsSetLargestResourceMime() bool {
	return p.LargestResourceMime != ""
}

func (p *NoteMetadata) IsSetLargestResourceSize() bool {
	return p.LargestResourceSize != 0
}

func (p *NoteMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteMetadata) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = Types.Guid(v)
	}
	return nil
}

func (p *NoteMetadata) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *NoteMetadata) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ContentLength = v
	}
	return nil
}

func (p *NoteMetadata) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Created = Types.Timestamp(v)
	}
	return nil
}

func (p *NoteMetadata) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Updated = Types.Timestamp(v)
	}
	return nil
}

func (p *NoteMetadata) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Deleted = Types.Timestamp(v)
	}
	return nil
}

func (p *NoteMetadata) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *NoteMetadata) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.NotebookGuid = v
	}
	return nil
}

func (p *NoteMetadata) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TagGuids = make([]Types.Guid, 0, size)
	for i := 0; i < size; i++ {
		var _elem15 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem15 = Types.Guid(v)
		}
		p.TagGuids = append(p.TagGuids, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteMetadata) readField14(iprot thrift.TProtocol) error {
	p.Attributes = Types.NewNoteAttributes()
	if err := p.Attributes.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Attributes)
	}
	return nil
}

func (p *NoteMetadata) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.LargestResourceMime = v
	}
	return nil
}

func (p *NoteMetadata) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.LargestResourceSize = v
	}
	return nil
}

func (p *NoteMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Guid)); err != nil {
		return fmt.Errorf("%T.guid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
	}
	return err
}

func (p *NoteMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:title: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Title)); err != nil {
			return fmt.Errorf("%T.title (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:title: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err := oprot.WriteFieldBegin("contentLength", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:contentLength: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ContentLength)); err != nil {
			return fmt.Errorf("%T.contentLength (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:contentLength: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:created: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Created)); err != nil {
			return fmt.Errorf("%T.created (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:created: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:updated: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Updated)); err != nil {
			return fmt.Errorf("%T.updated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:updated: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:deleted: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Deleted)); err != nil {
			return fmt.Errorf("%T.deleted (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:deleted: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:updateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.updateSequenceNum (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:updateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:notebookGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
			return fmt.Errorf("%T.notebookGuid (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:notebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField12(oprot thrift.TProtocol) (err error) {
	if p.TagGuids != nil {
		if p.IsSetTagGuids() {
			if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:tagGuids: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.TagGuids {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:tagGuids: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteMetadata) writeField14(oprot thrift.TProtocol) (err error) {
	if p.Attributes != nil {
		if p.IsSetAttributes() {
			if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:attributes: %s", p, err)
			}
			if err := p.Attributes.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Attributes)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:attributes: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteMetadata) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargestResourceMime() {
		if err := oprot.WriteFieldBegin("largestResourceMime", thrift.STRING, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:largestResourceMime: %s", p, err)
		}
		if err := oprot.WriteString(string(p.LargestResourceMime)); err != nil {
			return fmt.Errorf("%T.largestResourceMime (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:largestResourceMime: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargestResourceSize() {
		if err := oprot.WriteFieldBegin("largestResourceSize", thrift.I32, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:largestResourceSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.LargestResourceSize)); err != nil {
			return fmt.Errorf("%T.largestResourceSize (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:largestResourceSize: %s", p, err)
		}
	}
	return err
}

func (p *NoteMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteMetadata(%+v)", *p)
}

type NotesMetadataList struct {
	StartIndex    int32           `thrift:"startIndex,1,required"`
	TotalNotes    int32           `thrift:"totalNotes,2,required"`
	Notes         []*NoteMetadata `thrift:"notes,3,required"`
	StoppedWords  []string        `thrift:"stoppedWords,4"`
	SearchedWords []string        `thrift:"searchedWords,5"`
	UpdateCount   int32           `thrift:"updateCount,6"`
}

func NewNotesMetadataList() *NotesMetadataList {
	return &NotesMetadataList{}
}

func (p *NotesMetadataList) IsSetStoppedWords() bool {
	return p.StoppedWords != nil && len(p.StoppedWords) > 0
}

func (p *NotesMetadataList) IsSetSearchedWords() bool {
	return p.SearchedWords != nil && len(p.SearchedWords) > 0
}

func (p *NotesMetadataList) IsSetUpdateCount() bool {
	return p.UpdateCount != 0
}

func (p *NotesMetadataList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotesMetadataList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *NotesMetadataList) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TotalNotes = v
	}
	return nil
}

func (p *NotesMetadataList) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*NoteMetadata, 0, size)
	for i := 0; i < size; i++ {
		_elem16 := NewNoteMetadata()
		if err := _elem16.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem16)
		}
		p.Notes = append(p.Notes, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotesMetadataList) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.StoppedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem17 = v
		}
		p.StoppedWords = append(p.StoppedWords, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotesMetadataList) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SearchedWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem18 = v
		}
		p.SearchedWords = append(p.SearchedWords, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NotesMetadataList) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UpdateCount = v
	}
	return nil
}

func (p *NotesMetadataList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotesMetadataList"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotesMetadataList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:startIndex: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return fmt.Errorf("%T.startIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:startIndex: %s", p, err)
	}
	return err
}

func (p *NotesMetadataList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNotes", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:totalNotes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalNotes)); err != nil {
		return fmt.Errorf("%T.totalNotes (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:totalNotes: %s", p, err)
	}
	return err
}

func (p *NotesMetadataList) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if err := oprot.WriteFieldBegin("notes", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:notes: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Notes {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:notes: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataList) writeField4(oprot thrift.TProtocol) (err error) {
	if p.StoppedWords != nil {
		if p.IsSetStoppedWords() {
			if err := oprot.WriteFieldBegin("stoppedWords", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:stoppedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.StoppedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.StoppedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:stoppedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NotesMetadataList) writeField5(oprot thrift.TProtocol) (err error) {
	if p.SearchedWords != nil {
		if p.IsSetSearchedWords() {
			if err := oprot.WriteFieldBegin("searchedWords", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:searchedWords: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.SearchedWords)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SearchedWords {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:searchedWords: %s", p, err)
			}
		}
	}
	return err
}

func (p *NotesMetadataList) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateCount() {
		if err := oprot.WriteFieldBegin("updateCount", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:updateCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.UpdateCount)); err != nil {
			return fmt.Errorf("%T.updateCount (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:updateCount: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotesMetadataList(%+v)", *p)
}

type NotesMetadataResultSpec struct {
	// unused field # 1
	IncludeTitle bool `thrift:"includeTitle,2"`
	// unused field # 3
	// unused field # 4
	IncludeContentLength bool `thrift:"includeContentLength,5"`
	IncludeCreated       bool `thrift:"includeCreated,6"`
	IncludeUpdated       bool `thrift:"includeUpdated,7"`
	IncludeDeleted       bool `thrift:"includeDeleted,8"`
	// unused field # 9
	IncludeUpdateSequenceNum bool `thrift:"includeUpdateSequenceNum,10"`
	IncludeNotebookGuid      bool `thrift:"includeNotebookGuid,11"`
	IncludeTagGuids          bool `thrift:"includeTagGuids,12"`
	// unused field # 13
	IncludeAttributes bool `thrift:"includeAttributes,14"`
	// unused field # 15
	// unused field # 16
	// unused field # 17
	// unused field # 18
	// unused field # 19
	IncludeLargestResourceMime bool `thrift:"includeLargestResourceMime,20"`
	IncludeLargestResourceSize bool `thrift:"includeLargestResourceSize,21"`
}

func NewNotesMetadataResultSpec() *NotesMetadataResultSpec {
	return &NotesMetadataResultSpec{}
}

func (p *NotesMetadataResultSpec) IsSetIncludeTitle() bool {
	return p.IncludeTitle != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeContentLength() bool {
	return p.IncludeContentLength != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeCreated() bool {
	return p.IncludeCreated != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeUpdated() bool {
	return p.IncludeUpdated != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeUpdateSequenceNum() bool {
	return p.IncludeUpdateSequenceNum != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeNotebookGuid() bool {
	return p.IncludeNotebookGuid != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeTagGuids() bool {
	return p.IncludeTagGuids != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeAttributes() bool {
	return p.IncludeAttributes != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeLargestResourceMime() bool {
	return p.IncludeLargestResourceMime != false
}

func (p *NotesMetadataResultSpec) IsSetIncludeLargestResourceSize() bool {
	return p.IncludeLargestResourceSize != false
}

func (p *NotesMetadataResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IncludeTitle = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeContentLength = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IncludeCreated = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.IncludeUpdated = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.IncludeDeleted = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.IncludeUpdateSequenceNum = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.IncludeNotebookGuid = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.IncludeTagGuids = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.IncludeAttributes = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.IncludeLargestResourceMime = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.IncludeLargestResourceSize = v
	}
	return nil
}

func (p *NotesMetadataResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotesMetadataResultSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NotesMetadataResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTitle() {
		if err := oprot.WriteFieldBegin("includeTitle", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:includeTitle: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeTitle)); err != nil {
			return fmt.Errorf("%T.includeTitle (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:includeTitle: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContentLength() {
		if err := oprot.WriteFieldBegin("includeContentLength", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeContentLength: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeContentLength)); err != nil {
			return fmt.Errorf("%T.includeContentLength (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeContentLength: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeCreated() {
		if err := oprot.WriteFieldBegin("includeCreated", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:includeCreated: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeCreated)); err != nil {
			return fmt.Errorf("%T.includeCreated (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:includeCreated: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUpdated() {
		if err := oprot.WriteFieldBegin("includeUpdated", thrift.BOOL, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:includeUpdated: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeUpdated)); err != nil {
			return fmt.Errorf("%T.includeUpdated (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:includeUpdated: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err := oprot.WriteFieldBegin("includeDeleted", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:includeDeleted: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeDeleted)); err != nil {
			return fmt.Errorf("%T.includeDeleted (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:includeDeleted: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("includeUpdateSequenceNum", thrift.BOOL, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:includeUpdateSequenceNum: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeUpdateSequenceNum)); err != nil {
			return fmt.Errorf("%T.includeUpdateSequenceNum (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:includeUpdateSequenceNum: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeNotebookGuid() {
		if err := oprot.WriteFieldBegin("includeNotebookGuid", thrift.BOOL, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:includeNotebookGuid: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeNotebookGuid)); err != nil {
			return fmt.Errorf("%T.includeNotebookGuid (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:includeNotebookGuid: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeTagGuids() {
		if err := oprot.WriteFieldBegin("includeTagGuids", thrift.BOOL, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:includeTagGuids: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeTagGuids)); err != nil {
			return fmt.Errorf("%T.includeTagGuids (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:includeTagGuids: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAttributes() {
		if err := oprot.WriteFieldBegin("includeAttributes", thrift.BOOL, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:includeAttributes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeAttributes)); err != nil {
			return fmt.Errorf("%T.includeAttributes (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:includeAttributes: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLargestResourceMime() {
		if err := oprot.WriteFieldBegin("includeLargestResourceMime", thrift.BOOL, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:includeLargestResourceMime: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeLargestResourceMime)); err != nil {
			return fmt.Errorf("%T.includeLargestResourceMime (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:includeLargestResourceMime: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeLargestResourceSize() {
		if err := oprot.WriteFieldBegin("includeLargestResourceSize", thrift.BOOL, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:includeLargestResourceSize: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeLargestResourceSize)); err != nil {
			return fmt.Errorf("%T.includeLargestResourceSize (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:includeLargestResourceSize: %s", p, err)
		}
	}
	return err
}

func (p *NotesMetadataResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotesMetadataResultSpec(%+v)", *p)
}

type NoteCollectionCounts struct {
	NotebookCounts map[Types.Guid]int32 `thrift:"notebookCounts,1"`
	TagCounts      map[Types.Guid]int32 `thrift:"tagCounts,2"`
	TrashCount     int32                `thrift:"trashCount,3"`
}

func NewNoteCollectionCounts() *NoteCollectionCounts {
	return &NoteCollectionCounts{}
}

func (p *NoteCollectionCounts) IsSetNotebookCounts() bool {
	return p.NotebookCounts != nil && len(p.NotebookCounts) > 0
}

func (p *NoteCollectionCounts) IsSetTagCounts() bool {
	return p.TagCounts != nil && len(p.TagCounts) > 0
}

func (p *NoteCollectionCounts) IsSetTrashCount() bool {
	return p.TrashCount != 0
}

func (p *NoteCollectionCounts) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteCollectionCounts) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.NotebookCounts = make(map[Types.Guid]int32, size)
	for i := 0; i < size; i++ {
		var _key19 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key19 = Types.Guid(v)
		}
		var _val20 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val20 = v
		}
		p.NotebookCounts[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *NoteCollectionCounts) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.TagCounts = make(map[Types.Guid]int32, size)
	for i := 0; i < size; i++ {
		var _key21 Types.Guid
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key21 = Types.Guid(v)
		}
		var _val22 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val22 = v
		}
		p.TagCounts[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *NoteCollectionCounts) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.TrashCount = v
	}
	return nil
}

func (p *NoteCollectionCounts) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteCollectionCounts"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteCollectionCounts) writeField1(oprot thrift.TProtocol) (err error) {
	if p.NotebookCounts != nil {
		if p.IsSetNotebookCounts() {
			if err := oprot.WriteFieldBegin("notebookCounts", thrift.MAP, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:notebookCounts: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.NotebookCounts)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.NotebookCounts {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:notebookCounts: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteCollectionCounts) writeField2(oprot thrift.TProtocol) (err error) {
	if p.TagCounts != nil {
		if p.IsSetTagCounts() {
			if err := oprot.WriteFieldBegin("tagCounts", thrift.MAP, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:tagCounts: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.TagCounts)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.TagCounts {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:tagCounts: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteCollectionCounts) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrashCount() {
		if err := oprot.WriteFieldBegin("trashCount", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:trashCount: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TrashCount)); err != nil {
			return fmt.Errorf("%T.trashCount (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:trashCount: %s", p, err)
		}
	}
	return err
}

func (p *NoteCollectionCounts) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteCollectionCounts(%+v)", *p)
}

type NoteEmailParameters struct {
	Guid        string      `thrift:"guid,1"`
	Note        *Types.Note `thrift:"note,2"`
	ToAddresses []string    `thrift:"toAddresses,3"`
	CcAddresses []string    `thrift:"ccAddresses,4"`
	Subject     string      `thrift:"subject,5"`
	Message     string      `thrift:"message,6"`
}

func NewNoteEmailParameters() *NoteEmailParameters {
	return &NoteEmailParameters{}
}

func (p *NoteEmailParameters) IsSetGuid() bool {
	return p.Guid != ""
}

func (p *NoteEmailParameters) IsSetNote() bool {
	return p.Note != nil
}

func (p *NoteEmailParameters) IsSetToAddresses() bool {
	return p.ToAddresses != nil && len(p.ToAddresses) > 0
}

func (p *NoteEmailParameters) IsSetCcAddresses() bool {
	return p.CcAddresses != nil && len(p.CcAddresses) > 0
}

func (p *NoteEmailParameters) IsSetSubject() bool {
	return p.Subject != ""
}

func (p *NoteEmailParameters) IsSetMessage() bool {
	return p.Message != ""
}

func (p *NoteEmailParameters) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteEmailParameters) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Guid = v
	}
	return nil
}

func (p *NoteEmailParameters) readField2(iprot thrift.TProtocol) error {
	p.Note = Types.NewNote()
	if err := p.Note.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Note)
	}
	return nil
}

func (p *NoteEmailParameters) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ToAddresses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem23 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem23 = v
		}
		p.ToAddresses = append(p.ToAddresses, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteEmailParameters) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.CcAddresses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem24 = v
		}
		p.CcAddresses = append(p.CcAddresses, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NoteEmailParameters) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Subject = v
	}
	return nil
}

func (p *NoteEmailParameters) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoteEmailParameters) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteEmailParameters"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteEmailParameters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGuid() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:guid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Guid)); err != nil {
			return fmt.Errorf("%T.guid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:guid: %s", p, err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Note != nil {
		if p.IsSetNote() {
			if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:note: %s", p, err)
			}
			if err := p.Note.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Note)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:note: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ToAddresses != nil {
		if p.IsSetToAddresses() {
			if err := oprot.WriteFieldBegin("toAddresses", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:toAddresses: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.ToAddresses)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ToAddresses {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:toAddresses: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField4(oprot thrift.TProtocol) (err error) {
	if p.CcAddresses != nil {
		if p.IsSetCcAddresses() {
			if err := oprot.WriteFieldBegin("ccAddresses", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:ccAddresses: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.CcAddresses)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.CcAddresses {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:ccAddresses: %s", p, err)
			}
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubject() {
		if err := oprot.WriteFieldBegin("subject", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:subject: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Subject)); err != nil {
			return fmt.Errorf("%T.subject (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:subject: %s", p, err)
		}
	}
	return err
}

func (p *NoteEmailParameters) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:message: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Message)); err != nil {
			return fmt.Errorf("%T.message (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:message: %s", p, err)
		}
	}
	return err
}

func (p *NoteEmailParameters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteEmailParameters(%+v)", *p)
}

type NoteVersionId struct {
	UpdateSequenceNum int32           `thrift:"updateSequenceNum,1,required"`
	Updated           Types.Timestamp `thrift:"updated,2,required"`
	Saved             Types.Timestamp `thrift:"saved,3,required"`
	Title             string          `thrift:"title,4,required"`
}

func NewNoteVersionId() *NoteVersionId {
	return &NoteVersionId{}
}

func (p *NoteVersionId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoteVersionId) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *NoteVersionId) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Updated = Types.Timestamp(v)
	}
	return nil
}

func (p *NoteVersionId) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Saved = Types.Timestamp(v)
	}
	return nil
}

func (p *NoteVersionId) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *NoteVersionId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteVersionId"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NoteVersionId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:updateSequenceNum: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
		return fmt.Errorf("%T.updateSequenceNum (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:updateSequenceNum: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updated", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:updated: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Updated)); err != nil {
		return fmt.Errorf("%T.updated (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:updated: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("saved", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:saved: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Saved)); err != nil {
		return fmt.Errorf("%T.saved (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:saved: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:title: %s", p, err)
	}
	return err
}

func (p *NoteVersionId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteVersionId(%+v)", *p)
}

type ClientUsageMetrics struct {
	Sessions int32 `thrift:"sessions,1"`
}

func NewClientUsageMetrics() *ClientUsageMetrics {
	return &ClientUsageMetrics{}
}

func (p *ClientUsageMetrics) IsSetSessions() bool {
	return p.Sessions != 0
}

func (p *ClientUsageMetrics) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClientUsageMetrics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Sessions = v
	}
	return nil
}

func (p *ClientUsageMetrics) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClientUsageMetrics"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ClientUsageMetrics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessions() {
		if err := oprot.WriteFieldBegin("sessions", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:sessions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Sessions)); err != nil {
			return fmt.Errorf("%T.sessions (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:sessions: %s", p, err)
		}
	}
	return err
}

func (p *ClientUsageMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientUsageMetrics(%+v)", *p)
}

type RelatedQuery struct {
	NoteGuid     string      `thrift:"noteGuid,1"`
	PlainText    string      `thrift:"plainText,2"`
	Filter       *NoteFilter `thrift:"filter,3"`
	ReferenceUri string      `thrift:"referenceUri,4"`
}

func NewRelatedQuery() *RelatedQuery {
	return &RelatedQuery{}
}

func (p *RelatedQuery) IsSetNoteGuid() bool {
	return p.NoteGuid != ""
}

func (p *RelatedQuery) IsSetPlainText() bool {
	return p.PlainText != ""
}

func (p *RelatedQuery) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *RelatedQuery) IsSetReferenceUri() bool {
	return p.ReferenceUri != ""
}

func (p *RelatedQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatedQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NoteGuid = v
	}
	return nil
}

func (p *RelatedQuery) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PlainText = v
	}
	return nil
}

func (p *RelatedQuery) readField3(iprot thrift.TProtocol) error {
	p.Filter = NewNoteFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Filter)
	}
	return nil
}

func (p *RelatedQuery) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ReferenceUri = v
	}
	return nil
}

func (p *RelatedQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedQuery"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatedQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:noteGuid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
			return fmt.Errorf("%T.noteGuid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:noteGuid: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlainText() {
		if err := oprot.WriteFieldBegin("plainText", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:plainText: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PlainText)); err != nil {
			return fmt.Errorf("%T.plainText (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:plainText: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Filter != nil {
		if p.IsSetFilter() {
			if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:filter: %s", p, err)
			}
			if err := p.Filter.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Filter)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:filter: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedQuery) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferenceUri() {
		if err := oprot.WriteFieldBegin("referenceUri", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:referenceUri: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ReferenceUri)); err != nil {
			return fmt.Errorf("%T.referenceUri (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:referenceUri: %s", p, err)
		}
	}
	return err
}

func (p *RelatedQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedQuery(%+v)", *p)
}

type RelatedResult struct {
	Notes               []*Types.Note               `thrift:"notes,1"`
	Notebooks           []*Types.Notebook           `thrift:"notebooks,2"`
	Tags                []*Types.Tag                `thrift:"tags,3"`
	ContainingNotebooks []*Types.NotebookDescriptor `thrift:"containingNotebooks,4"`
}

func NewRelatedResult() *RelatedResult {
	return &RelatedResult{}
}

func (p *RelatedResult) IsSetNotes() bool {
	return p.Notes != nil && len(p.Notes) > 0
}

func (p *RelatedResult) IsSetNotebooks() bool {
	return p.Notebooks != nil && len(p.Notebooks) > 0
}

func (p *RelatedResult) IsSetTags() bool {
	return p.Tags != nil && len(p.Tags) > 0
}

func (p *RelatedResult) IsSetContainingNotebooks() bool {
	return p.ContainingNotebooks != nil && len(p.ContainingNotebooks) > 0
}

func (p *RelatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatedResult) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notes = make([]*Types.Note, 0, size)
	for i := 0; i < size; i++ {
		_elem25 := Types.NewNote()
		if err := _elem25.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem25)
		}
		p.Notes = append(p.Notes, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Notebooks = make([]*Types.Notebook, 0, size)
	for i := 0; i < size; i++ {
		_elem26 := Types.NewNotebook()
		if err := _elem26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem26)
		}
		p.Notebooks = append(p.Notebooks, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Tags = make([]*Types.Tag, 0, size)
	for i := 0; i < size; i++ {
		_elem27 := Types.NewTag()
		if err := _elem27.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem27)
		}
		p.Tags = append(p.Tags, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ContainingNotebooks = make([]*Types.NotebookDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem28 := Types.NewNotebookDescriptor()
		if err := _elem28.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem28)
		}
		p.ContainingNotebooks = append(p.ContainingNotebooks, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *RelatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Notes != nil {
		if p.IsSetNotes() {
			if err := oprot.WriteFieldBegin("notes", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:notes: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notes)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notes {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:notes: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Notebooks != nil {
		if p.IsSetNotebooks() {
			if err := oprot.WriteFieldBegin("notebooks", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:notebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Notebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:notebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Tags != nil {
		if p.IsSetTags() {
			if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:tags: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Tags {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:tags: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.ContainingNotebooks != nil {
		if p.IsSetContainingNotebooks() {
			if err := oprot.WriteFieldBegin("containingNotebooks", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:containingNotebooks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContainingNotebooks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ContainingNotebooks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:containingNotebooks: %s", p, err)
			}
		}
	}
	return err
}

func (p *RelatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedResult(%+v)", *p)
}

type RelatedResultSpec struct {
	MaxNotes                   int32 `thrift:"maxNotes,1"`
	MaxNotebooks               int32 `thrift:"maxNotebooks,2"`
	MaxTags                    int32 `thrift:"maxTags,3"`
	WritableNotebooksOnly      bool  `thrift:"writableNotebooksOnly,4"`
	IncludeContainingNotebooks bool  `thrift:"includeContainingNotebooks,5"`
}

func NewRelatedResultSpec() *RelatedResultSpec {
	return &RelatedResultSpec{}
}

func (p *RelatedResultSpec) IsSetMaxNotes() bool {
	return p.MaxNotes != 0
}

func (p *RelatedResultSpec) IsSetMaxNotebooks() bool {
	return p.MaxNotebooks != 0
}

func (p *RelatedResultSpec) IsSetMaxTags() bool {
	return p.MaxTags != 0
}

func (p *RelatedResultSpec) IsSetWritableNotebooksOnly() bool {
	return p.WritableNotebooksOnly != false
}

func (p *RelatedResultSpec) IsSetIncludeContainingNotebooks() bool {
	return p.IncludeContainingNotebooks != false
}

func (p *RelatedResultSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatedResultSpec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.MaxNotes = v
	}
	return nil
}

func (p *RelatedResultSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MaxNotebooks = v
	}
	return nil
}

func (p *RelatedResultSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxTags = v
	}
	return nil
}

func (p *RelatedResultSpec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WritableNotebooksOnly = v
	}
	return nil
}

func (p *RelatedResultSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.IncludeContainingNotebooks = v
	}
	return nil
}

func (p *RelatedResultSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelatedResultSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatedResultSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNotes() {
		if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:maxNotes: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxNotes)); err != nil {
			return fmt.Errorf("%T.maxNotes (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:maxNotes: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNotebooks() {
		if err := oprot.WriteFieldBegin("maxNotebooks", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:maxNotebooks: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxNotebooks)); err != nil {
			return fmt.Errorf("%T.maxNotebooks (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:maxNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTags() {
		if err := oprot.WriteFieldBegin("maxTags", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:maxTags: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxTags)); err != nil {
			return fmt.Errorf("%T.maxTags (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:maxTags: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWritableNotebooksOnly() {
		if err := oprot.WriteFieldBegin("writableNotebooksOnly", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:writableNotebooksOnly: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.WritableNotebooksOnly)); err != nil {
			return fmt.Errorf("%T.writableNotebooksOnly (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:writableNotebooksOnly: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeContainingNotebooks() {
		if err := oprot.WriteFieldBegin("includeContainingNotebooks", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:includeContainingNotebooks: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.IncludeContainingNotebooks)); err != nil {
			return fmt.Errorf("%T.includeContainingNotebooks (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:includeContainingNotebooks: %s", p, err)
		}
	}
	return err
}

func (p *RelatedResultSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatedResultSpec(%+v)", *p)
}
